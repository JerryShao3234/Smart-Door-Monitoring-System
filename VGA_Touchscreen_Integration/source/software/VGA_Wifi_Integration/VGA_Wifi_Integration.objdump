
VGA_Wifi_Integration.elf:     file format elf32-littlenios2
VGA_Wifi_Integration.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000040b0 memsz 0x000040b0 flags r-x
    LOAD off    0x00006000 vaddr 0x08000000 paddr 0x0000c0d0 align 2**12
         filesz 0x0000ad5c memsz 0x0000ad6c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00010d5c  2**0
                  CONTENTS
  2 .text         000040b0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ac60  08000000  0000c0d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000fc  0800ac60  00016d30  00010c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0800ad5c  00016e2c  00010d5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016e2c  00016e2c  00010d5c  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  0800ad6c  0800ad6c  00010d5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010d5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000004c8  00000000  00000000  00010d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000795a  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024c7  00000000  00000000  00018ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002e2e  00000000  00000000  0001b069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000009bc  00000000  00000000  0001de98  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a02  00000000  00000000  0001e854  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007119  00000000  00000000  00020256  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00027370  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000009b0  00000000  00000000  000273b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000294b5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000294b8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000294c4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000294c5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000294c6  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000294d1  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000294dc  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000010  00000000  00000000  000294e7  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000050  00000000  00000000  000294f7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00067cc7  00000000  00000000  00029547  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
0800ac60 l    d  .rwdata	00000000 .rwdata
0800ad5c l    d  .bss	00000000 .bss
00016e2c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0800ad6c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../VGA_Wifi_Integration_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ColourPallette.c
00000000 l    df *ABS*	00000000 Fonts.c
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000b6ac l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0800ac60 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0800ad50 g     O .rwdata	00000004 touchscreen
0000b690 g     F .text	0000001c putchar
0000bf18 g     F .text	0000002c alt_main
00016d30 g       *ABS*	00000000 __flash_rwdata_start
0000b63c g     F .text	0000004c printf
08009c26 g     O .rodata	00000a64 Font10x14
0000bf44 g     F .text	00000038 alt_putstr
0000a05c g     F .text	000000dc .hidden __gtdf2
0000c0c8 g     F .text	00000008 altera_nios2_gen2_irq_init
000082e8 g     F .text	000000d0 DrawString
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0800ad5c g     O .bss	00000004 errno
0800ad64 g     O .bss	00000004 alt_argv
08012d40 g       *ABS*	00000000 _gp
0000bf7c g     F .text	00000004 usleep
0000b688 g     F .text	00000008 _putchar_r
0000b600 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b524 g     F .text	00000064 .hidden __udivsi3
08000400 g     O .rodata	00005794 Font38x59
000095f0 g     F .text	00000074 .hidden __fixunsdfsi
0800ad44 g     O .rwdata	00000004 _global_impure_ptr
0800ad6c g       *ABS*	00000000 __bss_end
0000b320 g     F .text	000000a8 .hidden __floatunsidf
000090b0 g     F .text	00000020 Init_Touch
0000841c g     F .text	000000e0 ShowWelcome
0800881c g     O .rodata	0000140a Font16x27
0000c0c0 g     F .text	00000004 alt_dcache_flush_all
000091a0 g     F .text	00000024 pixelInRange
0000b2a0 g     F .text	00000080 .hidden __fixdfsi
0800ad5c g       *ABS*	00000000 __ram_rwdata_end
000081b4 g     F .text	00000134 DrawSmallCharacter
0000bf80 g     F .text	00000060 write
0000bd6c g     F .text	00000058 _putc_r
0800ac60 g       *ABS*	00000000 __ram_rodata_end
0800ad54 g     O .rwdata	00000004 jtag_uart_0
0000b588 g     F .text	00000058 .hidden __umodsi3
0800ad6c g       *ABS*	00000000 end
000091c4 g     F .text	000000dc displayScreen
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0000b3c8 g     F .text	00000064 .hidden __clzsi2
000090d0 g     F .text	000000d0 Get_Coordinates_Of_Touch
0000c004 g     F .text	00000034 altera_avalon_jtag_uart_write
0000b718 g     F .text	0000052c ___vfprintf_internal_r
0000805c g     F .text	0000001c vga_plot
0000885c g     F .text	00000128 ShowOption1
0000853c g     F .text	000000e0 ShowFinish
00008020 g     F .text	0000003c _start
0000c000 g     F .text	00000004 alt_sys_init
00009664 g     F .text	00000028 .hidden __mulsi3
0800ac60 g       *ABS*	00000000 __ram_rwdata_start
08000000 g       *ABS*	00000000 __ram_rodata_start
0000c038 g     F .text	00000088 alt_busy_sleep
00008c58 g     F .text	000000e4 ShowMessage
0800ad6c g       *ABS*	00000000 __alt_stack_base
0000968c g     F .text	000009d0 .hidden __divdf3
0000a138 g     F .text	0000086c .hidden __muldf3
0000bc60 g     F .text	000000b8 __sfvwrite_small_dev
0800ad5c g       *ABS*	00000000 __bss_start
0000b5e0 g     F .text	00000020 memset
000092a0 g     F .text	00000350 main
0800ad60 g     O .bss	00000004 alt_envp
0800ad58 g     O .rwdata	00000004 alt_errno
00008d3c g     F .text	00000374 ShowRecordingEnd
0000bd18 g     F .text	00000054 putc
0000b42c g     F .text	00000084 .hidden __divsi3
0000c0d0 g       *ABS*	00000000 __flash_rodata_start
00008984 g     F .text	000000fc ShowOption2
0000bfe0 g     F .text	00000020 alt_irq_init
0800ab60 g     O .rodata	00000100 .hidden __clz_tab
0000bde0 g     F .text	00000058 _write_r
0800ad48 g     O .rwdata	00000004 _impure_ptr
000084fc g     F .text	00000040 ShowRecordingInProgress
0800ad68 g     O .bss	00000004 alt_argc
000083b8 g     F .text	00000064 ResetScreen
0800a68a g     O .rodata	00000299 Font5x7
00008a80 g     F .text	000000c8 ShowOption3
00008078 g     F .text	0000013c DrawMediumCharacter
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008b48 g     F .text	00000110 ShowOptionRecord
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0800ad4c g     O .rwdata	00000004 wifi_module
0800ad40 g     O .rwdata	00000004 vga_addr
0800ad5c g       *ABS*	00000000 _edata
0800ad6c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000861c g     F .text	00000240 DrawButton
0000b4b0 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000000 g     O .rodata	00000400 ColourPalletteData
08005b94 g     O .rodata	00002c88 Font22x40
0000800c g       .entry	00000000 _exit
0000bdc4 g     F .text	0000001c strlen
0000a05c g     F .text	000000dc .hidden __gedf2
0000c0c4 g     F .text	00000004 alt_icache_flush_all
0000bc44 g     F .text	0000001c __vfprintf_internal
0000a9a4 g     F .text	000008fc .hidden __subdf3
0000be38 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
    802c:	d68b5014 	ori	gp,gp,11584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
    8034:	10ab5714 	ori	r2,r2,44380

    movhi r3, %hi(__bss_end)
    8038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
    803c:	18eb5b14 	ori	r3,r3,44396

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <__alt_data_end+0xf4008044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000be380 	call	be38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000bf180 	call	bf18 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <__alt_data_end+0xf4008058>

0000805c <vga_plot>:
/*
	Sets the colour of pixel at (x, y) to colour.
*/
void vga_plot(unsigned x, unsigned y, unsigned colour)
{
	*vga_addr = (y << 24) + (x << 16) + colour;
    805c:	2008943a 	slli	r4,r4,16
    8060:	280a963a 	slli	r5,r5,24
    8064:	d0a00017 	ldw	r2,-32768(gp)
    8068:	218d883a 	add	r6,r4,r6
    806c:	314b883a 	add	r5,r6,r5
    8070:	11400015 	stw	r5,0(r2)
    8074:	f800283a 	ret

00008078 <DrawMediumCharacter>:
	register char theColour = colour;
	register int BitMask,
		theCharacter = c,
		theRow, theColumn;

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1))) // if start off edge of screen don't bother
    8078:	20bfffcc 	andi	r2,r4,65535
    807c:	10a0001c 	xori	r2,r2,32768
    8080:	10a00004 	addi	r2,r2,-32768
    8084:	00c027c4 	movi	r3,159
    8088:	18804916 	blt	r3,r2,81b0 <DrawMediumCharacter+0x138>
    808c:	28bfffcc 	andi	r2,r5,65535
    8090:	10a0001c 	xori	r2,r2,32768
    8094:	10a00004 	addi	r2,r2,-32768
    8098:	00c01dc4 	movi	r3,119
    809c:	18804416 	blt	r3,r2,81b0 <DrawMediumCharacter+0x138>
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void DrawMediumCharacter(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
    80a0:	defff304 	addi	sp,sp,-52
		theRow, theColumn;

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1))) // if start off edge of screen don't bother
		return;

	if (((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~')))
    80a4:	d8800d17 	ldw	r2,52(sp)
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void DrawMediumCharacter(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
    80a8:	dfc00c15 	stw	ra,48(sp)
    80ac:	df000b15 	stw	fp,44(sp)
		theRow, theColumn;

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1))) // if start off edge of screen don't bother
		return;

	if (((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~')))
    80b0:	10bff804 	addi	r2,r2,-32
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void DrawMediumCharacter(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
    80b4:	ddc00a15 	stw	r23,40(sp)
    80b8:	dd800915 	stw	r22,36(sp)
    80bc:	dd400815 	stw	r21,32(sp)
    80c0:	dd000715 	stw	r20,28(sp)
    80c4:	dcc00615 	stw	r19,24(sp)
    80c8:	dc800515 	stw	r18,20(sp)
    80cc:	dc400415 	stw	r17,16(sp)
    80d0:	dc000315 	stw	r16,12(sp)
		theRow, theColumn;

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1))) // if start off edge of screen don't bother
		return;

	if (((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~')))
    80d4:	10ffffcc 	andi	r3,r2,65535
    80d8:	02001784 	movi	r8,94
    80dc:	40c02936 	bltu	r8,r3,8184 <DrawMediumCharacter+0x10c>
    80e0:	2825883a 	mov	r18,r5
    80e4:	3021883a 	mov	r16,r6
    80e8:	2023883a 	mov	r17,r4
    80ec:	2d000384 	addi	r20,r5,14
    80f0:	1009883a 	mov	r4,r2
    80f4:	01400704 	movi	r5,28
    80f8:	d9c00215 	stw	r7,8(sp)
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
			BitMask = 512;						   // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn; column++)
			{
				if ((pixels & BitMask)) // if valid pixel, then write it
					vga_plot(theX + column, theY + row, theColour);
    80fc:	84003fcc 	andi	r16,r16,255
    8100:	00096640 	call	9664 <__mulsi3>
    8104:	1485c83a 	sub	r2,r2,r18
    8108:	8400201c 	xori	r16,r16,128
    810c:	1485c83a 	sub	r2,r2,r18
		theRow = MEDIUM_FONT_YPIXELS;
		theColumn = MEDIUM_FONT_XPIXELS;

		for (row = 0; row < theRow; row++)
		{
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
    8110:	05420074 	movhi	r21,2049
			BitMask = 512;						   // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn; column++)
			{
				if ((pixels & BitMask)) // if valid pixel, then write it
					vga_plot(theX + column, theY + row, theColour);
    8114:	843fe004 	addi	r16,r16,-128
    8118:	d8800015 	stw	r2,0(sp)
		theRow = MEDIUM_FONT_YPIXELS;
		theColumn = MEDIUM_FONT_XPIXELS;

		for (row = 0; row < theRow; row++)
		{
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
    811c:	ad670984 	addi	r21,r21,-25562
    8120:	8d800284 	addi	r22,r17,10
			{
				if ((pixels & BitMask)) // if valid pixel, then write it
					vga_plot(theX + column, theY + row, theColour);
				else
				{ // if not a valid pixel, do we erase or leave it along (no erase)
					if (Erase == TRUE)
    8124:	05c00044 	movi	r23,1
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
			BitMask = 512;						   // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn; column++)
			{
				if ((pixels & BitMask)) // if valid pixel, then write it
					vga_plot(theX + column, theY + row, theColour);
    8128:	dc000115 	stw	r16,4(sp)
		theRow = MEDIUM_FONT_YPIXELS;
		theColumn = MEDIUM_FONT_XPIXELS;

		for (row = 0; row < theRow; row++)
		{
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
    812c:	d8c00017 	ldw	r3,0(sp)
    8130:	9485883a 	add	r2,r18,r18
    8134:	8821883a 	mov	r16,r17
    8138:	10c5883a 	add	r2,r2,r3
    813c:	1545883a 	add	r2,r2,r21
    8140:	1700000b 	ldhu	fp,0(r2)
			BitMask = 512;						   // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
    8144:	04c08004 	movi	r19,512
			for (column = 0; column < theColumn; column++)
			{
				if ((pixels & BitMask)) // if valid pixel, then write it
    8148:	e4c8703a 	and	r4,fp,r19
    814c:	20000226 	beq	r4,zero,8158 <DrawMediumCharacter+0xe0>
					vga_plot(theX + column, theY + row, theColour);
    8150:	d9800117 	ldw	r6,4(sp)
    8154:	00000306 	br	8164 <DrawMediumCharacter+0xec>
				else
				{ // if not a valid pixel, do we erase or leave it along (no erase)
					if (Erase == TRUE)
    8158:	d8c00e17 	ldw	r3,56(sp)
    815c:	1dc0041e 	bne	r3,r23,8170 <DrawMediumCharacter+0xf8>
						vga_plot(theX + column, theY + row, backgroundcolour);
    8160:	d9800217 	ldw	r6,8(sp)
    8164:	900b883a 	mov	r5,r18
    8168:	8009883a 	mov	r4,r16
    816c:	000805c0 	call	805c <vga_plot>
    8170:	84000044 	addi	r16,r16,1
					// else leave it alone
				}

				BitMask = BitMask >> 1;
    8174:	9827d07a 	srai	r19,r19,1

		for (row = 0; row < theRow; row++)
		{
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
			BitMask = 512;						   // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn; column++)
    8178:	b43ff31e 	bne	r22,r16,8148 <__alt_data_end+0xf4008148>
    817c:	94800044 	addi	r18,r18,1
		theCharacter -= 0x20; // subtract hex 20 to get index of first printable character (the space character)

		theRow = MEDIUM_FONT_YPIXELS;
		theColumn = MEDIUM_FONT_XPIXELS;

		for (row = 0; row < theRow; row++)
    8180:	953fea1e 	bne	r18,r20,812c <__alt_data_end+0xf400812c>

				BitMask = BitMask >> 1;
			}
		}
	}
}
    8184:	dfc00c17 	ldw	ra,48(sp)
    8188:	df000b17 	ldw	fp,44(sp)
    818c:	ddc00a17 	ldw	r23,40(sp)
    8190:	dd800917 	ldw	r22,36(sp)
    8194:	dd400817 	ldw	r21,32(sp)
    8198:	dd000717 	ldw	r20,28(sp)
    819c:	dcc00617 	ldw	r19,24(sp)
    81a0:	dc800517 	ldw	r18,20(sp)
    81a4:	dc400417 	ldw	r17,16(sp)
    81a8:	dc000317 	ldw	r16,12(sp)
    81ac:	dec00d04 	addi	sp,sp,52
    81b0:	f800283a 	ret

000081b4 <DrawSmallCharacter>:
	register char theColour = colour;
	register int BitMask, theC = c, theRow, theColumn;

	// if x,y coord off edge of screen don't bother

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1)))
    81b4:	20bfffcc 	andi	r2,r4,65535
    81b8:	10a0001c 	xori	r2,r2,32768
    81bc:	10a00004 	addi	r2,r2,-32768
    81c0:	00c027c4 	movi	r3,159
    81c4:	18804716 	blt	r3,r2,82e4 <DrawSmallCharacter+0x130>
    81c8:	28bfffcc 	andi	r2,r5,65535
    81cc:	10a0001c 	xori	r2,r2,32768
    81d0:	10a00004 	addi	r2,r2,-32768
    81d4:	00c01dc4 	movi	r3,119
    81d8:	18804216 	blt	r3,r2,82e4 <DrawSmallCharacter+0x130>
		}
	}
}

void DrawSmallCharacter(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
    81dc:	defff304 	addi	sp,sp,-52

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1)))
		return;

	// if printable character subtract hex 20
	if (((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~')))
    81e0:	d8800d17 	ldw	r2,52(sp)
		}
	}
}

void DrawSmallCharacter(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
    81e4:	dfc00c15 	stw	ra,48(sp)
    81e8:	df000b15 	stw	fp,44(sp)

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1)))
		return;

	// if printable character subtract hex 20
	if (((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~')))
    81ec:	10bff804 	addi	r2,r2,-32
		}
	}
}

void DrawSmallCharacter(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
    81f0:	ddc00a15 	stw	r23,40(sp)
    81f4:	dd800915 	stw	r22,36(sp)
    81f8:	dd400815 	stw	r21,32(sp)
    81fc:	dd000715 	stw	r20,28(sp)
    8200:	dcc00615 	stw	r19,24(sp)
    8204:	dc800515 	stw	r18,20(sp)
    8208:	dc400415 	stw	r17,16(sp)
    820c:	dc000315 	stw	r16,12(sp)

	if (((short)(x) > (short)(RIGHT_X_LIMIT - 1)) || ((short)(y) > (short)(BOTTOM_Y_LIMIT - 1)))
		return;

	// if printable character subtract hex 20
	if (((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~')))
    8210:	10ffffcc 	andi	r3,r2,65535
    8214:	02001784 	movi	r8,94
    8218:	40c02736 	bltu	r8,r3,82b8 <DrawSmallCharacter+0x104>
    821c:	3021883a 	mov	r16,r6
			for (column = 0; column < theColumn; column++)
			{

				// if a pixel in the character display it
				if ((pixels & BitMask))
					vga_plot(theX + column, theY + row, theColour);
    8220:	84003fcc 	andi	r16,r16,255
    8224:	28c001c4 	addi	r3,r5,7
    8228:	2023883a 	mov	r17,r4
    822c:	2825883a 	mov	r18,r5
    8230:	1009883a 	mov	r4,r2
    8234:	014001c4 	movi	r5,7
    8238:	8400201c 	xori	r16,r16,128
    823c:	d9c00215 	stw	r7,8(sp)
    8240:	d8c00015 	stw	r3,0(sp)

		for (row = 0; row < theRow; row++)
		{

			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
    8244:	05420074 	movhi	r21,2049
    8248:	00096640 	call	9664 <__mulsi3>
			for (column = 0; column < theColumn; column++)
			{

				// if a pixel in the character display it
				if ((pixels & BitMask))
					vga_plot(theX + column, theY + row, theColour);
    824c:	843fe004 	addi	r16,r16,-128
    8250:	14a9c83a 	sub	r20,r2,r18

		for (row = 0; row < theRow; row++)
		{

			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
    8254:	ad69a284 	addi	r21,r21,-22902
    8258:	8d800144 	addi	r22,r17,5
				if ((pixels & BitMask))
					vga_plot(theX + column, theY + row, theColour);

				else
				{
					if (Erase == TRUE)
    825c:	05c00044 	movi	r23,1
			for (column = 0; column < theColumn; column++)
			{

				// if a pixel in the character display it
				if ((pixels & BitMask))
					vga_plot(theX + column, theY + row, theColour);
    8260:	dc000115 	stw	r16,4(sp)

		for (row = 0; row < theRow; row++)
		{

			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
    8264:	9505883a 	add	r2,r18,r20
    8268:	1545883a 	add	r2,r2,r21
    826c:	17000003 	ldbu	fp,0(r2)
    8270:	8821883a 	mov	r16,r17
			BitMask = 16;
    8274:	04c00404 	movi	r19,16

			for (column = 0; column < theColumn; column++)
			{

				// if a pixel in the character display it
				if ((pixels & BitMask))
    8278:	e4c8703a 	and	r4,fp,r19
    827c:	20000226 	beq	r4,zero,8288 <DrawSmallCharacter+0xd4>
					vga_plot(theX + column, theY + row, theColour);
    8280:	d9800117 	ldw	r6,4(sp)
    8284:	00000306 	br	8294 <DrawSmallCharacter+0xe0>

				else
				{
					if (Erase == TRUE)
    8288:	d8c00e17 	ldw	r3,56(sp)
    828c:	1dc0041e 	bne	r3,r23,82a0 <DrawSmallCharacter+0xec>

						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour

						vga_plot(theX + column, theY + row, backgroundcolour);
    8290:	d9800217 	ldw	r6,8(sp)
    8294:	900b883a 	mov	r5,r18
    8298:	8009883a 	mov	r4,r16
    829c:	000805c0 	call	805c <vga_plot>
    82a0:	84000044 	addi	r16,r16,1
				}
				BitMask = BitMask >> 1;
    82a4:	9827d07a 	srai	r19,r19,1

			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
			BitMask = 16;

			for (column = 0; column < theColumn; column++)
    82a8:	b43ff31e 	bne	r22,r16,8278 <__alt_data_end+0xf4008278>
	{
		theC = theC - 0x20;
		theRow = SMALL_FONT_YPIXELS;
		theColumn = SMALL_FONT_XPIXELS;

		for (row = 0; row < theRow; row++)
    82ac:	d8c00017 	ldw	r3,0(sp)
    82b0:	94800044 	addi	r18,r18,1
    82b4:	90ffeb1e 	bne	r18,r3,8264 <__alt_data_end+0xf4008264>
				}
				BitMask = BitMask >> 1;
			}
		}
	}
}
    82b8:	dfc00c17 	ldw	ra,48(sp)
    82bc:	df000b17 	ldw	fp,44(sp)
    82c0:	ddc00a17 	ldw	r23,40(sp)
    82c4:	dd800917 	ldw	r22,36(sp)
    82c8:	dd400817 	ldw	r21,32(sp)
    82cc:	dd000717 	ldw	r20,28(sp)
    82d0:	dcc00617 	ldw	r19,24(sp)
    82d4:	dc800517 	ldw	r18,20(sp)
    82d8:	dc400417 	ldw	r17,16(sp)
    82dc:	dc000317 	ldw	r16,12(sp)
    82e0:	dec00d04 	addi	sp,sp,52
    82e4:	f800283a 	ret

000082e8 <DrawString>:

void DrawString(int x, int y, int colour, int backgroundcolour, char s[], int Erase, int fontSize)
{
    82e8:	defff504 	addi	sp,sp,-44
    82ec:	dd800815 	stw	r22,32(sp)
    82f0:	dd400715 	stw	r21,28(sp)
    82f4:	dc400315 	stw	r17,12(sp)
    82f8:	dd400c17 	ldw	r21,48(sp)
    82fc:	dd800d17 	ldw	r22,52(sp)
    8300:	dc400b17 	ldw	r17,44(sp)
    8304:	ddc00915 	stw	r23,36(sp)
    8308:	dd000615 	stw	r20,24(sp)
    830c:	dcc00515 	stw	r19,20(sp)
    8310:	dc800415 	stw	r18,16(sp)
    8314:	dc000215 	stw	r16,8(sp)
    8318:	dfc00a15 	stw	ra,40(sp)
    831c:	2021883a 	mov	r16,r4
    8320:	2825883a 	mov	r18,r5
    8324:	3027883a 	mov	r19,r6
    8328:	3829883a 	mov	r20,r7
		if (fontSize == SMALL_FONT)
		{
			DrawSmallCharacter(start_x, y, colour, backgroundcolour, s[i], Erase);
			start_x = start_x + SMALL_FONT_XPIXELS + 1;
		}
		else if (fontSize == MEDIUM_FONT)
    832c:	05c00044 	movi	r23,1

void DrawString(int x, int y, int colour, int backgroundcolour, char s[], int Erase, int fontSize)
{
	int start_x = x;

	for (int i = 0; s[i] != 0; i++)
    8330:	88800007 	ldb	r2,0(r17)
    8334:	10001526 	beq	r2,zero,838c <DrawString+0xa4>
	{
		if (fontSize == SMALL_FONT)
    8338:	b000091e 	bne	r22,zero,8360 <DrawString+0x78>
		{
			DrawSmallCharacter(start_x, y, colour, backgroundcolour, s[i], Erase);
    833c:	8009883a 	mov	r4,r16
    8340:	dd400115 	stw	r21,4(sp)
    8344:	d8800015 	stw	r2,0(sp)
    8348:	a00f883a 	mov	r7,r20
    834c:	980d883a 	mov	r6,r19
    8350:	900b883a 	mov	r5,r18
    8354:	00081b40 	call	81b4 <DrawSmallCharacter>
			start_x = start_x + SMALL_FONT_XPIXELS + 1;
    8358:	84000184 	addi	r16,r16,6
    835c:	00000906 	br	8384 <DrawString+0x9c>
		}
		else if (fontSize == MEDIUM_FONT)
    8360:	b5c0081e 	bne	r22,r23,8384 <DrawString+0x9c>
		{
			DrawMediumCharacter(start_x, y, colour, backgroundcolour, s[i], Erase);
    8364:	8009883a 	mov	r4,r16
    8368:	dd400115 	stw	r21,4(sp)
    836c:	d8800015 	stw	r2,0(sp)
    8370:	a00f883a 	mov	r7,r20
    8374:	980d883a 	mov	r6,r19
    8378:	900b883a 	mov	r5,r18
    837c:	00080780 	call	8078 <DrawMediumCharacter>
			start_x = start_x + MEDIUM_FONT_XPIXELS + LETTER_SPACING;
    8380:	84000304 	addi	r16,r16,12
    8384:	8c400044 	addi	r17,r17,1
    8388:	003fe906 	br	8330 <__alt_data_end+0xf4008330>
		}
	}
}
    838c:	dfc00a17 	ldw	ra,40(sp)
    8390:	ddc00917 	ldw	r23,36(sp)
    8394:	dd800817 	ldw	r22,32(sp)
    8398:	dd400717 	ldw	r21,28(sp)
    839c:	dd000617 	ldw	r20,24(sp)
    83a0:	dcc00517 	ldw	r19,20(sp)
    83a4:	dc800417 	ldw	r18,16(sp)
    83a8:	dc400317 	ldw	r17,12(sp)
    83ac:	dc000217 	ldw	r16,8(sp)
    83b0:	dec00b04 	addi	sp,sp,44
    83b4:	f800283a 	ret

000083b8 <ResetScreen>:

void ResetScreen(void)
{
    83b8:	defffb04 	addi	sp,sp,-20
    83bc:	dcc00315 	stw	r19,12(sp)
    83c0:	dc800215 	stw	r18,8(sp)
    83c4:	dc400115 	stw	r17,4(sp)
    83c8:	dfc00415 	stw	ra,16(sp)
    83cc:	dc000015 	stw	r16,0(sp)
	for (int i = LEFT_X_LIMIT; i < RIGHT_X_LIMIT; i++)
    83d0:	0023883a 	mov	r17,zero
	{
		for (int j = TOP_Y_LIMIT; j < BOTTOM_Y_LIMIT; j++)
    83d4:	04801e04 	movi	r18,120
	}
}

void ResetScreen(void)
{
	for (int i = LEFT_X_LIMIT; i < RIGHT_X_LIMIT; i++)
    83d8:	04c02804 	movi	r19,160
		}
	}
}

void ResetScreen(void)
{
    83dc:	0021883a 	mov	r16,zero
	for (int i = LEFT_X_LIMIT; i < RIGHT_X_LIMIT; i++)
	{
		for (int j = TOP_Y_LIMIT; j < BOTTOM_Y_LIMIT; j++)
		{
			vga_plot(i, j, TEAL); // initialize screen to teal
    83e0:	800b883a 	mov	r5,r16
    83e4:	01800284 	movi	r6,10
    83e8:	8809883a 	mov	r4,r17

void ResetScreen(void)
{
	for (int i = LEFT_X_LIMIT; i < RIGHT_X_LIMIT; i++)
	{
		for (int j = TOP_Y_LIMIT; j < BOTTOM_Y_LIMIT; j++)
    83ec:	84000044 	addi	r16,r16,1
		{
			vga_plot(i, j, TEAL); // initialize screen to teal
    83f0:	000805c0 	call	805c <vga_plot>

void ResetScreen(void)
{
	for (int i = LEFT_X_LIMIT; i < RIGHT_X_LIMIT; i++)
	{
		for (int j = TOP_Y_LIMIT; j < BOTTOM_Y_LIMIT; j++)
    83f4:	84bffa1e 	bne	r16,r18,83e0 <__alt_data_end+0xf40083e0>
	}
}

void ResetScreen(void)
{
	for (int i = LEFT_X_LIMIT; i < RIGHT_X_LIMIT; i++)
    83f8:	8c400044 	addi	r17,r17,1
    83fc:	8cfff71e 	bne	r17,r19,83dc <__alt_data_end+0xf40083dc>
		for (int j = TOP_Y_LIMIT; j < BOTTOM_Y_LIMIT; j++)
		{
			vga_plot(i, j, TEAL); // initialize screen to teal
		}
	}
}
    8400:	dfc00417 	ldw	ra,16(sp)
    8404:	dcc00317 	ldw	r19,12(sp)
    8408:	dc800217 	ldw	r18,8(sp)
    840c:	dc400117 	ldw	r17,4(sp)
    8410:	dc000017 	ldw	r16,0(sp)
    8414:	dec00504 	addi	sp,sp,20
    8418:	f800283a 	ret

0000841c <ShowWelcome>:
#define BLACK 0
#define TEAL 10
#define PURPLE 21

void ShowWelcome(void)
{
    841c:	defff904 	addi	sp,sp,-28
    8420:	dfc00615 	stw	ra,24(sp)
    8424:	dc800515 	stw	r18,20(sp)
    8428:	dc400415 	stw	r17,16(sp)
    842c:	dc000315 	stw	r16,12(sp)
	ResetScreen();
    8430:	00083b80 	call	83b8 <ResetScreen>

	DrawString(HEADER_X, HEADER_Y, PURPLE, BLACK, "SDMS: Smart Door", FALSE, SMALL_FONT);
    8434:	00820074 	movhi	r2,2049
    8438:	04000284 	movi	r16,10
    843c:	04400544 	movi	r17,21
    8440:	10aa4904 	addi	r2,r2,-22236
    8444:	d8800015 	stw	r2,0(sp)
    8448:	880d883a 	mov	r6,r17
    844c:	800b883a 	mov	r5,r16
    8450:	d8000215 	stw	zero,8(sp)
    8454:	d8000115 	stw	zero,4(sp)
    8458:	000f883a 	mov	r7,zero
    845c:	01000144 	movi	r4,5
    8460:	00082e80 	call	82e8 <DrawString>
	DrawString(HEADER_X + 50, HEADER_Y + 10, PURPLE, BLACK, "Monitoring System", FALSE, SMALL_FONT);
    8464:	00820074 	movhi	r2,2049
    8468:	10aa4e04 	addi	r2,r2,-22216
    846c:	d8800015 	stw	r2,0(sp)
    8470:	880d883a 	mov	r6,r17
    8474:	d8000215 	stw	zero,8(sp)
    8478:	d8000115 	stw	zero,4(sp)
    847c:	000f883a 	mov	r7,zero
    8480:	01400504 	movi	r5,20
    8484:	01000dc4 	movi	r4,55
    8488:	00082e80 	call	82e8 <DrawString>

	DrawString(WELCOME_TITLE_X, WELCOME_TITLE_Y, WHITE, TEAL, "Welcome!", TRUE, MEDIUM_FONT);
    848c:	00820074 	movhi	r2,2049
    8490:	04400044 	movi	r17,1
    8494:	04800fc4 	movi	r18,63
    8498:	10aa5304 	addi	r2,r2,-22196
    849c:	d8800015 	stw	r2,0(sp)
    84a0:	800f883a 	mov	r7,r16
    84a4:	900d883a 	mov	r6,r18
    84a8:	dc400215 	stw	r17,8(sp)
    84ac:	dc400115 	stw	r17,4(sp)
    84b0:	01400c84 	movi	r5,50
    84b4:	01000a04 	movi	r4,40
    84b8:	00082e80 	call	82e8 <DrawString>
	DrawString(WELCOME_SUBTITLE_X, WELCOME_SUBTITLE_Y, WHITE, TEAL, "Touch Screen to Proceed", TRUE, SMALL_FONT);
    84bc:	00820074 	movhi	r2,2049
    84c0:	10aa5604 	addi	r2,r2,-22184
    84c4:	d8000215 	stw	zero,8(sp)
    84c8:	dc400115 	stw	r17,4(sp)
    84cc:	d8800015 	stw	r2,0(sp)
    84d0:	800f883a 	mov	r7,r16
    84d4:	900d883a 	mov	r6,r18
    84d8:	01401404 	movi	r5,80
    84dc:	8009883a 	mov	r4,r16
    84e0:	00082e80 	call	82e8 <DrawString>
}
    84e4:	dfc00617 	ldw	ra,24(sp)
    84e8:	dc800517 	ldw	r18,20(sp)
    84ec:	dc400417 	ldw	r17,16(sp)
    84f0:	dc000317 	ldw	r16,12(sp)
    84f4:	dec00704 	addi	sp,sp,28
    84f8:	f800283a 	ret

000084fc <ShowRecordingInProgress>:
	DrawButton(RECORD);
	DrawButton(LEFT);
}

void ShowRecordingInProgress(void)
{
    84fc:	defffc04 	addi	sp,sp,-16
    8500:	dfc00315 	stw	ra,12(sp)
	ResetScreen();
    8504:	00083b80 	call	83b8 <ResetScreen>

	DrawString(LEFT_X_LIMIT + 5, INTENT_Y + 20, WHITE, BLACK, "Please refer to the phone", FALSE, SMALL_FONT);
    8508:	00820074 	movhi	r2,2049
    850c:	10aa5c04 	addi	r2,r2,-22160
    8510:	d8000215 	stw	zero,8(sp)
    8514:	d8000115 	stw	zero,4(sp)
    8518:	d8800015 	stw	r2,0(sp)
    851c:	000f883a 	mov	r7,zero
    8520:	01800fc4 	movi	r6,63
    8524:	01400dc4 	movi	r5,55
    8528:	01000144 	movi	r4,5
    852c:	00082e80 	call	82e8 <DrawString>
}
    8530:	dfc00317 	ldw	ra,12(sp)
    8534:	dec00404 	addi	sp,sp,16
    8538:	f800283a 	ret

0000853c <ShowFinish>:
	printf("message 4: %s\n", msg_4);
	ShowMessage(msg_1, msg_2, msg_3, msg_4);
}

void ShowFinish(void) 
{
    853c:	defff904 	addi	sp,sp,-28
    8540:	dfc00615 	stw	ra,24(sp)
    8544:	dc800515 	stw	r18,20(sp)
    8548:	dc400415 	stw	r17,16(sp)
    854c:	dc000315 	stw	r16,12(sp)
	ResetScreen();
    8550:	00083b80 	call	83b8 <ResetScreen>

	DrawString(HEADER_X, HEADER_Y, PURPLE, BLACK, "SDMS: Smart Door", FALSE, SMALL_FONT);
    8554:	00820074 	movhi	r2,2049
    8558:	04400284 	movi	r17,10
    855c:	04000544 	movi	r16,21
    8560:	10aa4904 	addi	r2,r2,-22236
    8564:	d8800015 	stw	r2,0(sp)
    8568:	800d883a 	mov	r6,r16
    856c:	880b883a 	mov	r5,r17
    8570:	d8000215 	stw	zero,8(sp)
    8574:	d8000115 	stw	zero,4(sp)
    8578:	000f883a 	mov	r7,zero
    857c:	01000144 	movi	r4,5
    8580:	00082e80 	call	82e8 <DrawString>
	DrawString(HEADER_X + 50, HEADER_Y + 10, PURPLE, BLACK, "Monitoring System", FALSE, SMALL_FONT);
    8584:	00820074 	movhi	r2,2049
    8588:	10aa4e04 	addi	r2,r2,-22216
    858c:	d8800015 	stw	r2,0(sp)
    8590:	800d883a 	mov	r6,r16
    8594:	d8000215 	stw	zero,8(sp)
    8598:	d8000115 	stw	zero,4(sp)
    859c:	000f883a 	mov	r7,zero
    85a0:	01400504 	movi	r5,20
    85a4:	01000dc4 	movi	r4,55
    85a8:	00082e80 	call	82e8 <DrawString>

	DrawString(LEFT_X_LIMIT + 25, WELCOME_TITLE_Y, WHITE, TEAL, "Thank you", TRUE, MEDIUM_FONT);
    85ac:	00820074 	movhi	r2,2049
    85b0:	04000044 	movi	r16,1
    85b4:	04800fc4 	movi	r18,63
    85b8:	10aa6304 	addi	r2,r2,-22132
    85bc:	d8800015 	stw	r2,0(sp)
    85c0:	880f883a 	mov	r7,r17
    85c4:	900d883a 	mov	r6,r18
    85c8:	dc000215 	stw	r16,8(sp)
    85cc:	dc000115 	stw	r16,4(sp)
    85d0:	01400c84 	movi	r5,50
    85d4:	01000644 	movi	r4,25
    85d8:	00082e80 	call	82e8 <DrawString>
	DrawString(LEFT_X_LIMIT + 4, WELCOME_TITLE_Y + 16, WHITE, TEAL, "for visiting!", TRUE, MEDIUM_FONT);
    85dc:	00820074 	movhi	r2,2049
    85e0:	10aa6604 	addi	r2,r2,-22120
    85e4:	dc000215 	stw	r16,8(sp)
    85e8:	dc000115 	stw	r16,4(sp)
    85ec:	d8800015 	stw	r2,0(sp)
    85f0:	880f883a 	mov	r7,r17
    85f4:	900d883a 	mov	r6,r18
    85f8:	01401084 	movi	r5,66
    85fc:	01000104 	movi	r4,4
    8600:	00082e80 	call	82e8 <DrawString>
}
    8604:	dfc00617 	ldw	ra,24(sp)
    8608:	dc800517 	ldw	r18,20(sp)
    860c:	dc400417 	ldw	r17,16(sp)
    8610:	dc000317 	ldw	r16,12(sp)
    8614:	dec00704 	addi	sp,sp,28
    8618:	f800283a 	ret

0000861c <DrawButton>:
		}
	}
}

void DrawButton(int buttonType)
{
    861c:	defff104 	addi	sp,sp,-60
    8620:	dcc00815 	stw	r19,32(sp)
    8624:	dc000515 	stw	r16,20(sp)
    8628:	dfc00e15 	stw	ra,56(sp)
    862c:	df000d15 	stw	fp,52(sp)
    8630:	ddc00c15 	stw	r23,48(sp)
    8634:	dd800b15 	stw	r22,44(sp)
    8638:	dd400a15 	stw	r21,40(sp)
    863c:	dd000915 	stw	r20,36(sp)
    8640:	dc800715 	stw	r18,28(sp)
    8644:	dc400615 	stw	r17,24(sp)
	int x, y, width, height;
	int backgroundcolour = WHITE;

	switch (buttonType)
    8648:	00800044 	movi	r2,1
		}
	}
}

void DrawButton(int buttonType)
{
    864c:	2027883a 	mov	r19,r4
    8650:	04000084 	movi	r16,2
	int x, y, width, height;
	int backgroundcolour = WHITE;

	switch (buttonType)
    8654:	20800d26 	beq	r4,r2,868c <DrawButton+0x70>
    8658:	24000b26 	beq	r4,r16,8688 <DrawButton+0x6c>
    865c:	048003c4 	movi	r18,15
    8660:	04400c84 	movi	r17,50
    8664:	05801904 	movi	r22,100
    8668:	04000f04 	movi	r16,60
		break;
	default:
		break;
	}

	if (buttonType == SELECT ||
    866c:	20000a1e 	bne	r4,zero,8698 <DrawButton+0x7c>
    8670:	802b883a 	mov	r21,r16
	{
		for (int i = x; i < x + width; i++)
		{
			for (int j = y; j < y + height; j++)
			{
				if (i == SELECT_BUTTON_X ||
    8674:	05c00f04 	movi	r23,60
    8678:	07001b44 	movi	fp,109
					i == SELECT_BUTTON_X + SELECT_BUTTON_WIDTH - 1 ||
    867c:	00801904 	movi	r2,100
					j == SELECT_BUTTON_Y ||
    8680:	00c01c84 	movi	r3,114
    8684:	00001006 	br	86c8 <DrawButton+0xac>
		y = LEFT_BUTTON_Y;
		width = LEFT_RIGHT_BUTTON_WIDTH;
		height = LEFT_RIGHT_BUTTON_HEIGHT;
		break;
	case RIGHT:
		x = RIGHT_BUTTON_X;
    8688:	04002304 	movi	r16,140
    868c:	04800644 	movi	r18,25
    8690:	04400504 	movi	r17,20
    8694:	05800b44 	movi	r22,45
		break;
	default:
		break;
	}

	if (buttonType == SELECT ||
    8698:	98bfff44 	addi	r2,r19,-3
    869c:	00c00044 	movi	r3,1
    86a0:	18802f36 	bltu	r3,r2,8760 <DrawButton+0x144>
    86a4:	003ff206 	br	8670 <__alt_data_end+0xf4008670>
	{
		for (int i = x; i < x + width; i++)
		{
			for (int j = y; j < y + height; j++)
			{
				if (i == SELECT_BUTTON_X ||
    86a8:	adc00b26 	beq	r21,r23,86d8 <DrawButton+0xbc>
    86ac:	af000a26 	beq	r21,fp,86d8 <DrawButton+0xbc>
					i == SELECT_BUTTON_X + SELECT_BUTTON_WIDTH - 1 ||
    86b0:	a0800926 	beq	r20,r2,86d8 <DrawButton+0xbc>
					j == SELECT_BUTTON_Y ||
    86b4:	a0c00826 	beq	r20,r3,86d8 <DrawButton+0xbc>
		buttonType == RECORD ||
		buttonType == FINISH)
	{
		for (int i = x; i < x + width; i++)
		{
			for (int j = y; j < y + height; j++)
    86b8:	a5000044 	addi	r20,r20,1
    86bc:	b489883a 	add	r4,r22,r18
    86c0:	a13ff916 	blt	r20,r4,86a8 <__alt_data_end+0xf40086a8>

	if (buttonType == SELECT ||
		buttonType == RECORD ||
		buttonType == FINISH)
	{
		for (int i = x; i < x + width; i++)
    86c4:	ad400044 	addi	r21,r21,1
    86c8:	8449883a 	add	r4,r16,r17
    86cc:	a9000b0e 	bge	r21,r4,86fc <DrawButton+0xe0>
    86d0:	b029883a 	mov	r20,r22
    86d4:	003ff906 	br	86bc <__alt_data_end+0xf40086bc>
				if (i == SELECT_BUTTON_X ||
					i == SELECT_BUTTON_X + SELECT_BUTTON_WIDTH - 1 ||
					j == SELECT_BUTTON_Y ||
					j == SELECT_BUTTON_Y + SELECT_BUTTON_HEIGHT - 1)
				{
					vga_plot(i, j, backgroundcolour);
    86d8:	01800fc4 	movi	r6,63
    86dc:	a00b883a 	mov	r5,r20
    86e0:	a809883a 	mov	r4,r21
    86e4:	d8800315 	stw	r2,12(sp)
    86e8:	d8c00415 	stw	r3,16(sp)
    86ec:	000805c0 	call	805c <vga_plot>
    86f0:	d8c00417 	ldw	r3,16(sp)
    86f4:	d8800317 	ldw	r2,12(sp)
    86f8:	003fef06 	br	86b8 <__alt_data_end+0xf40086b8>
				}
			}
		}

		switch (buttonType)
    86fc:	008000c4 	movi	r2,3
    8700:	98800826 	beq	r19,r2,8724 <DrawButton+0x108>
    8704:	00800104 	movi	r2,4
    8708:	98800b26 	beq	r19,r2,8738 <DrawButton+0x11c>
    870c:	9800471e 	bne	r19,zero,882c <DrawButton+0x210>
		{
		case SELECT:
			DrawString(SELECT_BUTTON_X + 8, SELECT_BUTTON_Y + 4, WHITE, BLACK, "SELECT", FALSE, SMALL_FONT);
    8710:	00820074 	movhi	r2,2049
    8714:	d8000215 	stw	zero,8(sp)
    8718:	d8000115 	stw	zero,4(sp)
    871c:	10aa6a04 	addi	r2,r2,-22104
    8720:	00000906 	br	8748 <DrawButton+0x12c>
			break;
		case RECORD:
			DrawString(SELECT_BUTTON_X + 8, SELECT_BUTTON_Y + 4, WHITE, BLACK, "RECORD", FALSE, SMALL_FONT);
    8724:	00820074 	movhi	r2,2049
    8728:	d8000215 	stw	zero,8(sp)
    872c:	d8000115 	stw	zero,4(sp)
    8730:	10aa6c04 	addi	r2,r2,-22096
    8734:	00000406 	br	8748 <DrawButton+0x12c>
			break;
		case FINISH:
			DrawString(SELECT_BUTTON_X + 8, SELECT_BUTTON_Y + 4, WHITE, BLACK, "FINISH", FALSE, SMALL_FONT);
    8738:	00820074 	movhi	r2,2049
    873c:	d8000215 	stw	zero,8(sp)
    8740:	d8000115 	stw	zero,4(sp)
    8744:	10aa6e04 	addi	r2,r2,-22088
    8748:	d8800015 	stw	r2,0(sp)
    874c:	000f883a 	mov	r7,zero
    8750:	01800fc4 	movi	r6,63
    8754:	01401a04 	movi	r5,104
    8758:	01001104 	movi	r4,68
    875c:	00003206 	br	8828 <DrawButton+0x20c>
			break;
		default:
			break;
		}
	}
	else if (buttonType == LEFT)
    8760:	98c0181e 	bne	r19,r3,87c4 <DrawButton+0x1a8>
	{
		for (int i = x; i < x + width; i++)
    8764:	8c23883a 	add	r17,r17,r16
		{
			for (int j = y; j < y + height; j++)
    8768:	95a5883a 	add	r18,r18,r22
			break;
		}
	}
	else if (buttonType == LEFT)
	{
		for (int i = x; i < x + width; i++)
    876c:	84400a0e 	bge	r16,r17,8798 <DrawButton+0x17c>
    8770:	b027883a 	mov	r19,r22
		{
			for (int j = y; j < y + height; j++)
    8774:	9c80060e 	bge	r19,r18,8790 <DrawButton+0x174>
			{
				vga_plot(i, j, backgroundcolour);
    8778:	980b883a 	mov	r5,r19
    877c:	01800fc4 	movi	r6,63
    8780:	8009883a 	mov	r4,r16
    8784:	000805c0 	call	805c <vga_plot>
	}
	else if (buttonType == LEFT)
	{
		for (int i = x; i < x + width; i++)
		{
			for (int j = y; j < y + height; j++)
    8788:	9cc00044 	addi	r19,r19,1
    878c:	003ff906 	br	8774 <__alt_data_end+0xf4008774>
			break;
		}
	}
	else if (buttonType == LEFT)
	{
		for (int i = x; i < x + width; i++)
    8790:	84000044 	addi	r16,r16,1
    8794:	003ff506 	br	876c <__alt_data_end+0xf400876c>
			{
				vga_plot(i, j, backgroundcolour);
			}
		}

		DrawString(LEFT_BUTTON_X + 6, LEFT_BUTTON_Y + 6, BLACK, WHITE, "<", TRUE, MEDIUM_FONT);
    8798:	00800044 	movi	r2,1
    879c:	d8800215 	stw	r2,8(sp)
    87a0:	d8800115 	stw	r2,4(sp)
    87a4:	00820074 	movhi	r2,2049
    87a8:	10aa7004 	addi	r2,r2,-22080
    87ac:	d8800015 	stw	r2,0(sp)
    87b0:	01c00fc4 	movi	r7,63
    87b4:	000d883a 	mov	r6,zero
    87b8:	01400cc4 	movi	r5,51
    87bc:	01000204 	movi	r4,8
    87c0:	00001906 	br	8828 <DrawButton+0x20c>
	}
	else if (buttonType == RIGHT)
    87c4:	00800084 	movi	r2,2
    87c8:	9880181e 	bne	r19,r2,882c <DrawButton+0x210>
	{
		for (int i = x; i < x + width; i++)
    87cc:	8c23883a 	add	r17,r17,r16
		{
			for (int j = y; j < y + height; j++)
    87d0:	95a5883a 	add	r18,r18,r22

		DrawString(LEFT_BUTTON_X + 6, LEFT_BUTTON_Y + 6, BLACK, WHITE, "<", TRUE, MEDIUM_FONT);
	}
	else if (buttonType == RIGHT)
	{
		for (int i = x; i < x + width; i++)
    87d4:	84400a0e 	bge	r16,r17,8800 <DrawButton+0x1e4>
    87d8:	b027883a 	mov	r19,r22
		{
			for (int j = y; j < y + height; j++)
    87dc:	9c80060e 	bge	r19,r18,87f8 <DrawButton+0x1dc>
			{
				vga_plot(i, j, backgroundcolour);
    87e0:	980b883a 	mov	r5,r19
    87e4:	01800fc4 	movi	r6,63
    87e8:	8009883a 	mov	r4,r16
    87ec:	000805c0 	call	805c <vga_plot>
	}
	else if (buttonType == RIGHT)
	{
		for (int i = x; i < x + width; i++)
		{
			for (int j = y; j < y + height; j++)
    87f0:	9cc00044 	addi	r19,r19,1
    87f4:	003ff906 	br	87dc <__alt_data_end+0xf40087dc>

		DrawString(LEFT_BUTTON_X + 6, LEFT_BUTTON_Y + 6, BLACK, WHITE, "<", TRUE, MEDIUM_FONT);
	}
	else if (buttonType == RIGHT)
	{
		for (int i = x; i < x + width; i++)
    87f8:	84000044 	addi	r16,r16,1
    87fc:	003ff506 	br	87d4 <__alt_data_end+0xf40087d4>
			{
				vga_plot(i, j, backgroundcolour);
			}
		}

		DrawString(RIGHT_BUTTON_X + 5, RIGHT_BUTTON_Y + 6, BLACK, WHITE, ">", TRUE, MEDIUM_FONT);
    8800:	00800044 	movi	r2,1
    8804:	d8800215 	stw	r2,8(sp)
    8808:	d8800115 	stw	r2,4(sp)
    880c:	00820074 	movhi	r2,2049
    8810:	10aa7104 	addi	r2,r2,-22076
    8814:	d8800015 	stw	r2,0(sp)
    8818:	01c00fc4 	movi	r7,63
    881c:	000d883a 	mov	r6,zero
    8820:	01400cc4 	movi	r5,51
    8824:	01002444 	movi	r4,145
    8828:	00082e80 	call	82e8 <DrawString>
	}

	return;
}
    882c:	dfc00e17 	ldw	ra,56(sp)
    8830:	df000d17 	ldw	fp,52(sp)
    8834:	ddc00c17 	ldw	r23,48(sp)
    8838:	dd800b17 	ldw	r22,44(sp)
    883c:	dd400a17 	ldw	r21,40(sp)
    8840:	dd000917 	ldw	r20,36(sp)
    8844:	dcc00817 	ldw	r19,32(sp)
    8848:	dc800717 	ldw	r18,28(sp)
    884c:	dc400617 	ldw	r17,24(sp)
    8850:	dc000517 	ldw	r16,20(sp)
    8854:	dec00f04 	addi	sp,sp,60
    8858:	f800283a 	ret

0000885c <ShowOption1>:
	DrawString(WELCOME_TITLE_X, WELCOME_TITLE_Y, WHITE, TEAL, "Welcome!", TRUE, MEDIUM_FONT);
	DrawString(WELCOME_SUBTITLE_X, WELCOME_SUBTITLE_Y, WHITE, TEAL, "Touch Screen to Proceed", TRUE, SMALL_FONT);
}

void ShowOption1(void)
{
    885c:	defff704 	addi	sp,sp,-36
    8860:	dfc00815 	stw	ra,32(sp)
    8864:	dd000715 	stw	r20,28(sp)
    8868:	dcc00615 	stw	r19,24(sp)
    886c:	dc800515 	stw	r18,20(sp)
    8870:	dc400415 	stw	r17,16(sp)
    8874:	dc000315 	stw	r16,12(sp)
	ResetScreen();
    8878:	00083b80 	call	83b8 <ResetScreen>

	DrawString(QUESTION_X, QUESTION_Y, WHITE, BLACK, "What is the purpose", FALSE, SMALL_FONT);
    887c:	00820074 	movhi	r2,2049
    8880:	04000fc4 	movi	r16,63
    8884:	04800284 	movi	r18,10
    8888:	10aa7204 	addi	r2,r2,-22072
    888c:	d8800015 	stw	r2,0(sp)
    8890:	800d883a 	mov	r6,r16
    8894:	900b883a 	mov	r5,r18
    8898:	d8000215 	stw	zero,8(sp)
    889c:	d8000115 	stw	zero,4(sp)
    88a0:	000f883a 	mov	r7,zero
    88a4:	01000644 	movi	r4,25
    88a8:	00082e80 	call	82e8 <DrawString>
	DrawString(QUESTION_X + 15, QUESTION_Y + 10, WHITE, BLACK, "of your visit?", FALSE, SMALL_FONT);
    88ac:	00820074 	movhi	r2,2049
    88b0:	05000a04 	movi	r20,40
    88b4:	10aa7704 	addi	r2,r2,-22052
    88b8:	d8800015 	stw	r2,0(sp)
    88bc:	800d883a 	mov	r6,r16
    88c0:	a009883a 	mov	r4,r20
    88c4:	d8000215 	stw	zero,8(sp)
    88c8:	d8000115 	stw	zero,4(sp)
    88cc:	000f883a 	mov	r7,zero
    88d0:	01400504 	movi	r5,20
    88d4:	00082e80 	call	82e8 <DrawString>

	DrawString(INTENT_X, INTENT_Y + 5, WHITE, TEAL, "Family", TRUE, MEDIUM_FONT);
    88d8:	00820074 	movhi	r2,2049
    88dc:	04400044 	movi	r17,1
    88e0:	04c00c84 	movi	r19,50
    88e4:	10aa7b04 	addi	r2,r2,-22036
    88e8:	d8800015 	stw	r2,0(sp)
    88ec:	900f883a 	mov	r7,r18
    88f0:	800d883a 	mov	r6,r16
    88f4:	a00b883a 	mov	r5,r20
    88f8:	9809883a 	mov	r4,r19
    88fc:	dc400215 	stw	r17,8(sp)
    8900:	dc400115 	stw	r17,4(sp)
    8904:	00082e80 	call	82e8 <DrawString>
	DrawString(INTENT_X + 28, INTENT_Y + 21, WHITE, TEAL, "or", TRUE, SMALL_FONT);
    8908:	00820074 	movhi	r2,2049
    890c:	10aa7d04 	addi	r2,r2,-22028
    8910:	d8800015 	stw	r2,0(sp)
    8914:	900f883a 	mov	r7,r18
    8918:	800d883a 	mov	r6,r16
    891c:	d8000215 	stw	zero,8(sp)
    8920:	dc400115 	stw	r17,4(sp)
    8924:	01400e04 	movi	r5,56
    8928:	01001384 	movi	r4,78
    892c:	00082e80 	call	82e8 <DrawString>
	DrawString(INTENT_X, INTENT_Y + 30, WHITE, TEAL, "Friend", TRUE, MEDIUM_FONT);
    8930:	00820074 	movhi	r2,2049
    8934:	10aa7e04 	addi	r2,r2,-22024
    8938:	d8800015 	stw	r2,0(sp)
    893c:	900f883a 	mov	r7,r18
    8940:	800d883a 	mov	r6,r16
    8944:	01401044 	movi	r5,65
    8948:	9809883a 	mov	r4,r19
    894c:	dc400215 	stw	r17,8(sp)
    8950:	dc400115 	stw	r17,4(sp)
    8954:	00082e80 	call	82e8 <DrawString>

	DrawButton(SELECT);
    8958:	0009883a 	mov	r4,zero
    895c:	000861c0 	call	861c <DrawButton>
	DrawButton(RIGHT);
    8960:	01000084 	movi	r4,2
}
    8964:	dfc00817 	ldw	ra,32(sp)
    8968:	dd000717 	ldw	r20,28(sp)
    896c:	dcc00617 	ldw	r19,24(sp)
    8970:	dc800517 	ldw	r18,20(sp)
    8974:	dc400417 	ldw	r17,16(sp)
    8978:	dc000317 	ldw	r16,12(sp)
    897c:	dec00904 	addi	sp,sp,36
	DrawString(INTENT_X, INTENT_Y + 5, WHITE, TEAL, "Family", TRUE, MEDIUM_FONT);
	DrawString(INTENT_X + 28, INTENT_Y + 21, WHITE, TEAL, "or", TRUE, SMALL_FONT);
	DrawString(INTENT_X, INTENT_Y + 30, WHITE, TEAL, "Friend", TRUE, MEDIUM_FONT);

	DrawButton(SELECT);
	DrawButton(RIGHT);
    8980:	000861c1 	jmpi	861c <DrawButton>

00008984 <ShowOption2>:
}

void ShowOption2(void)
{
    8984:	defff804 	addi	sp,sp,-32
    8988:	dfc00715 	stw	ra,28(sp)
    898c:	dcc00615 	stw	r19,24(sp)
    8990:	dc800515 	stw	r18,20(sp)
    8994:	dc400415 	stw	r17,16(sp)
    8998:	dc000315 	stw	r16,12(sp)
	ResetScreen();
    899c:	00083b80 	call	83b8 <ResetScreen>

	DrawString(QUESTION_X, QUESTION_Y, WHITE, BLACK, "What is the purpose", FALSE, SMALL_FONT);
    89a0:	00820074 	movhi	r2,2049
    89a4:	04400fc4 	movi	r17,63
    89a8:	04800284 	movi	r18,10
    89ac:	10aa7204 	addi	r2,r2,-22072
    89b0:	d8800015 	stw	r2,0(sp)
    89b4:	880d883a 	mov	r6,r17
    89b8:	900b883a 	mov	r5,r18
    89bc:	d8000215 	stw	zero,8(sp)
    89c0:	d8000115 	stw	zero,4(sp)
    89c4:	000f883a 	mov	r7,zero
    89c8:	01000644 	movi	r4,25
    89cc:	00082e80 	call	82e8 <DrawString>
	DrawString(QUESTION_X + 15, QUESTION_Y + 10, WHITE, BLACK, "of your visit?", FALSE, SMALL_FONT);
    89d0:	00820074 	movhi	r2,2049
    89d4:	04c00a04 	movi	r19,40
    89d8:	10aa7704 	addi	r2,r2,-22052
    89dc:	d8800015 	stw	r2,0(sp)
    89e0:	880d883a 	mov	r6,r17
    89e4:	9809883a 	mov	r4,r19
    89e8:	d8000215 	stw	zero,8(sp)
    89ec:	d8000115 	stw	zero,4(sp)
    89f0:	000f883a 	mov	r7,zero
    89f4:	01400504 	movi	r5,20
    89f8:	00082e80 	call	82e8 <DrawString>

	DrawString(INTENT_X - 10, INTENT_Y + 3, WHITE, TEAL, "Package", TRUE, MEDIUM_FONT);
    89fc:	00820074 	movhi	r2,2049
    8a00:	04000044 	movi	r16,1
    8a04:	10aa8004 	addi	r2,r2,-22016
    8a08:	d8800015 	stw	r2,0(sp)
    8a0c:	900f883a 	mov	r7,r18
    8a10:	880d883a 	mov	r6,r17
    8a14:	9809883a 	mov	r4,r19
    8a18:	dc000215 	stw	r16,8(sp)
    8a1c:	dc000115 	stw	r16,4(sp)
    8a20:	01400984 	movi	r5,38
    8a24:	00082e80 	call	82e8 <DrawString>
	DrawString(INTENT_X - 15, INTENT_Y + 20, WHITE, TEAL, "Delivery", TRUE, MEDIUM_FONT);
    8a28:	00820074 	movhi	r2,2049
    8a2c:	10aa8204 	addi	r2,r2,-22008
    8a30:	d8800015 	stw	r2,0(sp)
    8a34:	900f883a 	mov	r7,r18
    8a38:	880d883a 	mov	r6,r17
    8a3c:	01400dc4 	movi	r5,55
    8a40:	dc000215 	stw	r16,8(sp)
    8a44:	dc000115 	stw	r16,4(sp)
    8a48:	010008c4 	movi	r4,35
    8a4c:	00082e80 	call	82e8 <DrawString>

	DrawButton(SELECT);
    8a50:	0009883a 	mov	r4,zero
    8a54:	000861c0 	call	861c <DrawButton>
	DrawButton(LEFT);
    8a58:	8009883a 	mov	r4,r16
    8a5c:	000861c0 	call	861c <DrawButton>
	DrawButton(RIGHT);
    8a60:	01000084 	movi	r4,2
}
    8a64:	dfc00717 	ldw	ra,28(sp)
    8a68:	dcc00617 	ldw	r19,24(sp)
    8a6c:	dc800517 	ldw	r18,20(sp)
    8a70:	dc400417 	ldw	r17,16(sp)
    8a74:	dc000317 	ldw	r16,12(sp)
    8a78:	dec00804 	addi	sp,sp,32
	DrawString(INTENT_X - 10, INTENT_Y + 3, WHITE, TEAL, "Package", TRUE, MEDIUM_FONT);
	DrawString(INTENT_X - 15, INTENT_Y + 20, WHITE, TEAL, "Delivery", TRUE, MEDIUM_FONT);

	DrawButton(SELECT);
	DrawButton(LEFT);
	DrawButton(RIGHT);
    8a7c:	000861c1 	jmpi	861c <DrawButton>

00008a80 <ShowOption3>:
}

void ShowOption3(void)
{
    8a80:	defff904 	addi	sp,sp,-28
    8a84:	dfc00615 	stw	ra,24(sp)
    8a88:	dc800515 	stw	r18,20(sp)
    8a8c:	dc400415 	stw	r17,16(sp)
    8a90:	dc000315 	stw	r16,12(sp)
	ResetScreen();
    8a94:	00083b80 	call	83b8 <ResetScreen>

	DrawString(QUESTION_X, QUESTION_Y, WHITE, BLACK, "What is the purpose", FALSE, SMALL_FONT);
    8a98:	00820074 	movhi	r2,2049
    8a9c:	04000fc4 	movi	r16,63
    8aa0:	04800284 	movi	r18,10
    8aa4:	10aa7204 	addi	r2,r2,-22072
    8aa8:	d8800015 	stw	r2,0(sp)
    8aac:	800d883a 	mov	r6,r16
    8ab0:	900b883a 	mov	r5,r18
    8ab4:	d8000215 	stw	zero,8(sp)
    8ab8:	d8000115 	stw	zero,4(sp)
    8abc:	000f883a 	mov	r7,zero
    8ac0:	01000644 	movi	r4,25
    8ac4:	00082e80 	call	82e8 <DrawString>
	DrawString(QUESTION_X + 15, QUESTION_Y + 10, WHITE, BLACK, "of your visit?", FALSE, SMALL_FONT);
    8ac8:	00820074 	movhi	r2,2049
    8acc:	10aa7704 	addi	r2,r2,-22052
    8ad0:	d8800015 	stw	r2,0(sp)
    8ad4:	800d883a 	mov	r6,r16
    8ad8:	d8000215 	stw	zero,8(sp)
    8adc:	d8000115 	stw	zero,4(sp)
    8ae0:	000f883a 	mov	r7,zero
    8ae4:	01400504 	movi	r5,20
    8ae8:	01000a04 	movi	r4,40
    8aec:	00082e80 	call	82e8 <DrawString>

	DrawString(INTENT_X - 3, INTENT_Y + 15, WHITE, TEAL, "Advertisement", TRUE, SMALL_FONT);
    8af0:	00820074 	movhi	r2,2049
    8af4:	10aa8504 	addi	r2,r2,-21996
    8af8:	04400044 	movi	r17,1
    8afc:	d8800015 	stw	r2,0(sp)
    8b00:	900f883a 	mov	r7,r18
    8b04:	800d883a 	mov	r6,r16
    8b08:	01400c84 	movi	r5,50
    8b0c:	d8000215 	stw	zero,8(sp)
    8b10:	dc400115 	stw	r17,4(sp)
    8b14:	01000bc4 	movi	r4,47
    8b18:	00082e80 	call	82e8 <DrawString>

	DrawButton(SELECT);
    8b1c:	0009883a 	mov	r4,zero
    8b20:	000861c0 	call	861c <DrawButton>
	DrawButton(LEFT);
    8b24:	8809883a 	mov	r4,r17
    8b28:	000861c0 	call	861c <DrawButton>
	DrawButton(RIGHT);
    8b2c:	01000084 	movi	r4,2
}
    8b30:	dfc00617 	ldw	ra,24(sp)
    8b34:	dc800517 	ldw	r18,20(sp)
    8b38:	dc400417 	ldw	r17,16(sp)
    8b3c:	dc000317 	ldw	r16,12(sp)
    8b40:	dec00704 	addi	sp,sp,28

	DrawString(INTENT_X - 3, INTENT_Y + 15, WHITE, TEAL, "Advertisement", TRUE, SMALL_FONT);

	DrawButton(SELECT);
	DrawButton(LEFT);
	DrawButton(RIGHT);
    8b44:	000861c1 	jmpi	861c <DrawButton>

00008b48 <ShowOptionRecord>:
}

void ShowOptionRecord(void)
{
    8b48:	defff904 	addi	sp,sp,-28
    8b4c:	dfc00615 	stw	ra,24(sp)
    8b50:	dc800515 	stw	r18,20(sp)
    8b54:	dc400415 	stw	r17,16(sp)
    8b58:	dc000315 	stw	r16,12(sp)
	ResetScreen();
    8b5c:	00083b80 	call	83b8 <ResetScreen>

	DrawString(QUESTION_X, QUESTION_Y, WHITE, BLACK, "What is the purpose", FALSE, SMALL_FONT);
    8b60:	00820074 	movhi	r2,2049
    8b64:	04400fc4 	movi	r17,63
    8b68:	04800284 	movi	r18,10
    8b6c:	10aa7204 	addi	r2,r2,-22072
    8b70:	d8800015 	stw	r2,0(sp)
    8b74:	880d883a 	mov	r6,r17
    8b78:	900b883a 	mov	r5,r18
    8b7c:	d8000215 	stw	zero,8(sp)
    8b80:	d8000115 	stw	zero,4(sp)
    8b84:	000f883a 	mov	r7,zero
    8b88:	01000644 	movi	r4,25
    8b8c:	00082e80 	call	82e8 <DrawString>
	DrawString(QUESTION_X + 15, QUESTION_Y + 10, WHITE, BLACK, "of your visit?", FALSE, SMALL_FONT);
    8b90:	00820074 	movhi	r2,2049
    8b94:	10aa7704 	addi	r2,r2,-22052
    8b98:	d8800015 	stw	r2,0(sp)
    8b9c:	880d883a 	mov	r6,r17
    8ba0:	d8000215 	stw	zero,8(sp)
    8ba4:	d8000115 	stw	zero,4(sp)
    8ba8:	000f883a 	mov	r7,zero
    8bac:	01400504 	movi	r5,20
    8bb0:	01000a04 	movi	r4,40
    8bb4:	00082e80 	call	82e8 <DrawString>

	DrawString(INTENT_X + 4, INTENT_Y + 10, WHITE, TEAL, "Other", TRUE, MEDIUM_FONT);
    8bb8:	00820074 	movhi	r2,2049
    8bbc:	04000044 	movi	r16,1
    8bc0:	10aa8904 	addi	r2,r2,-21980
    8bc4:	d8800015 	stw	r2,0(sp)
    8bc8:	900f883a 	mov	r7,r18
    8bcc:	880d883a 	mov	r6,r17
    8bd0:	dc000215 	stw	r16,8(sp)
    8bd4:	dc000115 	stw	r16,4(sp)
    8bd8:	01400b44 	movi	r5,45
    8bdc:	01000d84 	movi	r4,54
    8be0:	00082e80 	call	82e8 <DrawString>
	DrawString(INTENT_X + 6, INTENT_Y + 35, WHITE, TEAL, "Record a", TRUE, SMALL_FONT);
    8be4:	00820074 	movhi	r2,2049
    8be8:	10aa8b04 	addi	r2,r2,-21972
    8bec:	d8800015 	stw	r2,0(sp)
    8bf0:	900f883a 	mov	r7,r18
    8bf4:	880d883a 	mov	r6,r17
    8bf8:	d8000215 	stw	zero,8(sp)
    8bfc:	dc000115 	stw	r16,4(sp)
    8c00:	01401184 	movi	r5,70
    8c04:	01000e04 	movi	r4,56
    8c08:	00082e80 	call	82e8 <DrawString>
	DrawString(INTENT_X - 6, INTENT_Y + 45, WHITE, TEAL, "custom message", TRUE, SMALL_FONT);
    8c0c:	00820074 	movhi	r2,2049
    8c10:	10aa8e04 	addi	r2,r2,-21960
    8c14:	d8800015 	stw	r2,0(sp)
    8c18:	900f883a 	mov	r7,r18
    8c1c:	880d883a 	mov	r6,r17
    8c20:	01401404 	movi	r5,80
    8c24:	d8000215 	stw	zero,8(sp)
    8c28:	dc000115 	stw	r16,4(sp)
    8c2c:	01000b04 	movi	r4,44
    8c30:	00082e80 	call	82e8 <DrawString>

	DrawButton(RECORD);
    8c34:	010000c4 	movi	r4,3
    8c38:	000861c0 	call	861c <DrawButton>
	DrawButton(LEFT);
    8c3c:	8009883a 	mov	r4,r16
}
    8c40:	dfc00617 	ldw	ra,24(sp)
    8c44:	dc800517 	ldw	r18,20(sp)
    8c48:	dc400417 	ldw	r17,16(sp)
    8c4c:	dc000317 	ldw	r16,12(sp)
    8c50:	dec00704 	addi	sp,sp,28
	DrawString(INTENT_X + 4, INTENT_Y + 10, WHITE, TEAL, "Other", TRUE, MEDIUM_FONT);
	DrawString(INTENT_X + 6, INTENT_Y + 35, WHITE, TEAL, "Record a", TRUE, SMALL_FONT);
	DrawString(INTENT_X - 6, INTENT_Y + 45, WHITE, TEAL, "custom message", TRUE, SMALL_FONT);

	DrawButton(RECORD);
	DrawButton(LEFT);
    8c54:	000861c1 	jmpi	861c <DrawButton>

00008c58 <ShowMessage>:
	DrawString(LEFT_X_LIMIT + 25, WELCOME_TITLE_Y, WHITE, TEAL, "Thank you", TRUE, MEDIUM_FONT);
	DrawString(LEFT_X_LIMIT + 4, WELCOME_TITLE_Y + 16, WHITE, TEAL, "for visiting!", TRUE, MEDIUM_FONT);
}

void ShowMessage(char *message_1, char *message_2, char *message_3, char *message_4) 
{
    8c58:	defff604 	addi	sp,sp,-40
    8c5c:	dfc00915 	stw	ra,36(sp)
    8c60:	dd400815 	stw	r21,32(sp)
    8c64:	dd000715 	stw	r20,28(sp)
    8c68:	202b883a 	mov	r21,r4
    8c6c:	2829883a 	mov	r20,r5
    8c70:	dcc00615 	stw	r19,24(sp)
    8c74:	dc800515 	stw	r18,20(sp)
    8c78:	3027883a 	mov	r19,r6
    8c7c:	3825883a 	mov	r18,r7
    8c80:	dc400415 	stw	r17,16(sp)
    8c84:	dc000315 	stw	r16,12(sp)
	ResetScreen();

	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 20, WHITE, BLACK, message_1, FALSE, SMALL_FONT);
    8c88:	04400fc4 	movi	r17,63
	DrawString(LEFT_X_LIMIT + 4, WELCOME_TITLE_Y + 16, WHITE, TEAL, "for visiting!", TRUE, MEDIUM_FONT);
}

void ShowMessage(char *message_1, char *message_2, char *message_3, char *message_4) 
{
	ResetScreen();
    8c8c:	00083b80 	call	83b8 <ResetScreen>

	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 20, WHITE, BLACK, message_1, FALSE, SMALL_FONT);
    8c90:	04000144 	movi	r16,5
    8c94:	880d883a 	mov	r6,r17
    8c98:	8009883a 	mov	r4,r16
    8c9c:	d8000215 	stw	zero,8(sp)
    8ca0:	d8000115 	stw	zero,4(sp)
    8ca4:	dd400015 	stw	r21,0(sp)
    8ca8:	000f883a 	mov	r7,zero
    8cac:	01400504 	movi	r5,20
    8cb0:	00082e80 	call	82e8 <DrawString>
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 40, WHITE, BLACK, message_2, FALSE, SMALL_FONT);
    8cb4:	880d883a 	mov	r6,r17
    8cb8:	8009883a 	mov	r4,r16
    8cbc:	d8000215 	stw	zero,8(sp)
    8cc0:	d8000115 	stw	zero,4(sp)
    8cc4:	dd000015 	stw	r20,0(sp)
    8cc8:	000f883a 	mov	r7,zero
    8ccc:	01400a04 	movi	r5,40
    8cd0:	00082e80 	call	82e8 <DrawString>
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 60, WHITE, BLACK, message_3, FALSE, SMALL_FONT);
    8cd4:	880d883a 	mov	r6,r17
    8cd8:	8009883a 	mov	r4,r16
    8cdc:	d8000215 	stw	zero,8(sp)
    8ce0:	d8000115 	stw	zero,4(sp)
    8ce4:	dcc00015 	stw	r19,0(sp)
    8ce8:	000f883a 	mov	r7,zero
    8cec:	01400f04 	movi	r5,60
    8cf0:	00082e80 	call	82e8 <DrawString>
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 80, WHITE, BLACK, message_4, FALSE, SMALL_FONT);
    8cf4:	8009883a 	mov	r4,r16
    8cf8:	d8000215 	stw	zero,8(sp)
    8cfc:	d8000115 	stw	zero,4(sp)
    8d00:	dc800015 	stw	r18,0(sp)
    8d04:	000f883a 	mov	r7,zero
    8d08:	880d883a 	mov	r6,r17
    8d0c:	01401404 	movi	r5,80
    8d10:	00082e80 	call	82e8 <DrawString>

	DrawButton(FINISH);
    8d14:	01000104 	movi	r4,4
}
    8d18:	dfc00917 	ldw	ra,36(sp)
    8d1c:	dd400817 	ldw	r21,32(sp)
    8d20:	dd000717 	ldw	r20,28(sp)
    8d24:	dcc00617 	ldw	r19,24(sp)
    8d28:	dc800517 	ldw	r18,20(sp)
    8d2c:	dc400417 	ldw	r17,16(sp)
    8d30:	dc000317 	ldw	r16,12(sp)
    8d34:	dec00a04 	addi	sp,sp,40
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 20, WHITE, BLACK, message_1, FALSE, SMALL_FONT);
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 40, WHITE, BLACK, message_2, FALSE, SMALL_FONT);
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 60, WHITE, BLACK, message_3, FALSE, SMALL_FONT);
	DrawString(LEFT_X_LIMIT + 5, TOP_Y_LIMIT + 80, WHITE, BLACK, message_4, FALSE, SMALL_FONT);

	DrawButton(FINISH);
    8d38:	000861c1 	jmpi	861c <DrawButton>

00008d3c <ShowRecordingEnd>:

	DrawString(LEFT_X_LIMIT + 5, INTENT_Y + 20, WHITE, BLACK, "Please refer to the phone", FALSE, SMALL_FONT);
}

void ShowRecordingEnd(int wait_time)
{
    8d3c:	deffc104 	addi	sp,sp,-252
    8d40:	dfc03e15 	stw	ra,248(sp)
    8d44:	dc803c15 	stw	r18,240(sp)
    8d48:	dc403b15 	stw	r17,236(sp)
    8d4c:	dcc03d15 	stw	r19,244(sp)
    8d50:	dc003a15 	stw	r16,232(sp)
	char num[2];
	ResetScreen();
    8d54:	00083b80 	call	83b8 <ResetScreen>

	DrawString(LEFT_X_LIMIT + 43, INTENT_Y, WHITE, BLACK, "Message sent!", FALSE, SMALL_FONT);
    8d58:	00820074 	movhi	r2,2049
    8d5c:	10aa9204 	addi	r2,r2,-21944
    8d60:	d8800015 	stw	r2,0(sp)
    8d64:	000f883a 	mov	r7,zero
    8d68:	01800fc4 	movi	r6,63
    8d6c:	014008c4 	movi	r5,35
    8d70:	01000ac4 	movi	r4,43
    8d74:	d8000215 	stw	zero,8(sp)
    8d78:	d8000115 	stw	zero,4(sp)
    8d7c:	00082e80 	call	82e8 <DrawString>
	DrawString(HEADER_X + 3, INTENT_Y + 20, WHITE, BLACK, "Please wait for a reply.", FALSE, SMALL_FONT);
    8d80:	00820074 	movhi	r2,2049
    8d84:	10aa9604 	addi	r2,r2,-21928
    8d88:	d8800015 	stw	r2,0(sp)
    8d8c:	000f883a 	mov	r7,zero
    8d90:	01800fc4 	movi	r6,63
    8d94:	01400dc4 	movi	r5,55
    8d98:	01000204 	movi	r4,8
    8d9c:	d8000215 	stw	zero,8(sp)
    8da0:	d8000115 	stw	zero,4(sp)
    8da4:	00082e80 	call	82e8 <DrawString>
	DrawString(HEADER_X + 17, INTENT_Y + 30, WHITE, BLACK, "This may take up to ", FALSE, SMALL_FONT);
    8da8:	00820074 	movhi	r2,2049
    8dac:	10aa9d04 	addi	r2,r2,-21900
    8db0:	d8800015 	stw	r2,0(sp)
    8db4:	000f883a 	mov	r7,zero
    8db8:	01800fc4 	movi	r6,63
    8dbc:	01401044 	movi	r5,65
    8dc0:	01000584 	movi	r4,22
    8dc4:	d8000215 	stw	zero,8(sp)
    8dc8:	d8000115 	stw	zero,4(sp)
    8dcc:	00082e80 	call	82e8 <DrawString>
	DrawString(HEADER_X + 45, INTENT_Y + 40, WHITE, BLACK, "60 seconds", FALSE, SMALL_FONT);
    8dd0:	00820074 	movhi	r2,2049
    8dd4:	10aaa304 	addi	r2,r2,-21876
    8dd8:	000f883a 	mov	r7,zero
    8ddc:	d8800015 	stw	r2,0(sp)
    8de0:	01800fc4 	movi	r6,63
    8de4:	014012c4 	movi	r5,75
    8de8:	01000c84 	movi	r4,50
    8dec:	d8000215 	stw	zero,8(sp)
    8df0:	d8000115 	stw	zero,4(sp)
    8df4:	00082e80 	call	82e8 <DrawString>

	int index = 0;

	char msg[100] = "";
    8df8:	01801804 	movi	r6,96
    8dfc:	000b883a 	mov	r5,zero
    8e00:	d9000404 	addi	r4,sp,16
    8e04:	d8000315 	stw	zero,12(sp)
    8e08:	000b5e00 	call	b5e0 <memset>
	char msg_1[30] = "";
    8e0c:	01800684 	movi	r6,26
    8e10:	000b883a 	mov	r5,zero
    8e14:	d9003384 	addi	r4,sp,206
    8e18:	d800328d 	sth	zero,202(sp)
    8e1c:	d800330d 	sth	zero,204(sp)
    8e20:	000b5e00 	call	b5e0 <memset>
	char msg_2[30] = "";
    8e24:	01800684 	movi	r6,26
    8e28:	000b883a 	mov	r5,zero
    8e2c:	d9002c04 	addi	r4,sp,176
    8e30:	d8002b15 	stw	zero,172(sp)
    8e34:	000b5e00 	call	b5e0 <memset>
	char msg_3[30] = "";
    8e38:	01800684 	movi	r6,26
    8e3c:	000b883a 	mov	r5,zero
    8e40:	d9002484 	addi	r4,sp,146
    8e44:	d800238d 	sth	zero,142(sp)
    8e48:	d800240d 	sth	zero,144(sp)
    8e4c:	000b5e00 	call	b5e0 <memset>
	char msg_4[30] = "";
    8e50:	01800684 	movi	r6,26
    8e54:	000b883a 	mov	r5,zero
    8e58:	d9001d04 	addi	r4,sp,116
    8e5c:	d8001c15 	stw	zero,112(sp)

	char c = 'a';
	
	while(c != '<')
	{
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8e60:	04801004 	movi	r18,64

	char msg[100] = "";
	char msg_1[30] = "";
	char msg_2[30] = "";
	char msg_3[30] = "";
	char msg_4[30] = "";
    8e64:	000b5e00 	call	b5e0 <memset>

	char c = 'a';
	
	while(c != '<')
    8e68:	04400f04 	movi	r17,60
	{
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8e6c:	94000037 	ldwio	r16,0(r18)
		printf("Loop 1: %c\n", c);
    8e70:	01020074 	movhi	r4,2049
    8e74:	84003fcc 	andi	r16,r16,255
    8e78:	8400201c 	xori	r16,r16,128
    8e7c:	843fe004 	addi	r16,r16,-128
    8e80:	212aa604 	addi	r4,r4,-21864
    8e84:	800b883a 	mov	r5,r16
    8e88:	000b63c0 	call	b63c <printf>
		usleep(35500);
    8e8c:	0122ab14 	movui	r4,35500
    8e90:	000bf7c0 	call	bf7c <usleep>
	char msg_3[30] = "";
	char msg_4[30] = "";

	char c = 'a';
	
	while(c != '<')
    8e94:	847ff51e 	bne	r16,r17,8e6c <__alt_data_end+0xf4008e6c>
		usleep(35500);
	}

	while(c == '<')
	{
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8e98:	04c01004 	movi	r19,64
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
		printf("Loop 1: %c\n", c);
		usleep(35500);
	}

	while(c == '<')
    8e9c:	04800f04 	movi	r18,60
	{
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8ea0:	9c000037 	ldwio	r16,0(r19)
		printf("Loop 1: %c\n", c);
    8ea4:	01020074 	movhi	r4,2049
		usleep(35500);
	}

	while(c == '<')
	{
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8ea8:	8023883a 	mov	r17,r16
		printf("Loop 1: %c\n", c);
    8eac:	84003fcc 	andi	r16,r16,255
    8eb0:	8400201c 	xori	r16,r16,128
    8eb4:	843fe004 	addi	r16,r16,-128
    8eb8:	212aa604 	addi	r4,r4,-21864
    8ebc:	800b883a 	mov	r5,r16
    8ec0:	000b63c0 	call	b63c <printf>
		usleep(35500);
    8ec4:	0122ab14 	movui	r4,35500
    8ec8:	000bf7c0 	call	bf7c <usleep>
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
		printf("Loop 1: %c\n", c);
		usleep(35500);
	}

	while(c == '<')
    8ecc:	84bff426 	beq	r16,r18,8ea0 <__alt_data_end+0xf4008ea0>
    8ed0:	0021883a 	mov	r16,zero
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
		printf("Loop 1: %c\n", c);
		usleep(35500);
	}

	while(c != '>'){
    8ed4:	04800f84 	movi	r18,62
		msg[index++] = c;
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8ed8:	04c01004 	movi	r19,64
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
		printf("Loop 1: %c\n", c);
		usleep(35500);
	}

	while(c != '>'){
    8edc:	88803fcc 	andi	r2,r17,255
    8ee0:	1080201c 	xori	r2,r2,128
    8ee4:	d9000304 	addi	r4,sp,12
    8ee8:	10bfe004 	addi	r2,r2,-128
    8eec:	2407883a 	add	r3,r4,r16
    8ef0:	14800d26 	beq	r2,r18,8f28 <ShowRecordingEnd+0x1ec>
		msg[index++] = c;
    8ef4:	1c400005 	stb	r17,0(r3)
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8ef8:	99400037 	ldwio	r5,0(r19)
		printf("Loop 2: %c\n", c);
    8efc:	01020074 	movhi	r4,2049
		usleep(35500);
	}

	while(c != '>'){
		msg[index++] = c;
		c = IORD_ALTERA_AVALON_UART_RXDATA(WIFI_MODULE_BASE);
    8f00:	2823883a 	mov	r17,r5
		printf("Loop 2: %c\n", c);
    8f04:	29403fcc 	andi	r5,r5,255
    8f08:	2940201c 	xori	r5,r5,128
    8f0c:	297fe004 	addi	r5,r5,-128
    8f10:	212aa904 	addi	r4,r4,-21852
    8f14:	000b63c0 	call	b63c <printf>
		usleep(35500);
    8f18:	0122ab14 	movui	r4,35500
    8f1c:	000bf7c0 	call	bf7c <usleep>
    8f20:	84000044 	addi	r16,r16,1
    8f24:	003fed06 	br	8edc <__alt_data_end+0xf4008edc>
	}

	msg[index] = ' ';
    8f28:	00800804 	movi	r2,32
    8f2c:	18800005 	stb	r2,0(r3)
    8f30:	8027883a 	mov	r19,r16
    8f34:	8025883a 	mov	r18,r16
    8f38:	8023883a 	mov	r17,r16

	int index_1 = index;
	int index_2 = index;
	int index_3 = index;

	for(int i = 0; i <= index; i++) {
    8f3c:	0005883a 	mov	r2,zero
		if(i <= 25 && (msg[i] == ' ')) {
    8f40:	01000644 	movi	r4,25
			index_1 = i;
		}
		else if(i <= (index_1 + 25) && (msg[i] == ' ')) {
			index_2 = i;
		}
		else if(i <= (index_2 + 25) && (msg[i] == ' ')) {
    8f44:	00c00804 	movi	r3,32
	int index_1 = index;
	int index_2 = index;
	int index_3 = index;

	for(int i = 0; i <= index; i++) {
		if(i <= 25 && (msg[i] == ' ')) {
    8f48:	20800416 	blt	r4,r2,8f5c <ShowRecordingEnd+0x220>
    8f4c:	d9800304 	addi	r6,sp,12
    8f50:	308b883a 	add	r5,r6,r2
    8f54:	29400007 	ldb	r5,0(r5)
    8f58:	28c00e26 	beq	r5,r3,8f94 <ShowRecordingEnd+0x258>
			index_1 = i;
		}
		else if(i <= (index_1 + 25) && (msg[i] == ' ')) {
    8f5c:	89400644 	addi	r5,r17,25
    8f60:	28800416 	blt	r5,r2,8f74 <ShowRecordingEnd+0x238>
    8f64:	d9800304 	addi	r6,sp,12
    8f68:	308b883a 	add	r5,r6,r2
    8f6c:	29400007 	ldb	r5,0(r5)
    8f70:	28c00a26 	beq	r5,r3,8f9c <ShowRecordingEnd+0x260>
			index_2 = i;
		}
		else if(i <= (index_2 + 25) && (msg[i] == ' ')) {
    8f74:	91400644 	addi	r5,r18,25
    8f78:	28800916 	blt	r5,r2,8fa0 <ShowRecordingEnd+0x264>
    8f7c:	d9800304 	addi	r6,sp,12
    8f80:	308b883a 	add	r5,r6,r2
    8f84:	29400007 	ldb	r5,0(r5)
    8f88:	28c0051e 	bne	r5,r3,8fa0 <ShowRecordingEnd+0x264>
    8f8c:	1027883a 	mov	r19,r2
    8f90:	00000306 	br	8fa0 <ShowRecordingEnd+0x264>
    8f94:	1023883a 	mov	r17,r2
    8f98:	00000106 	br	8fa0 <ShowRecordingEnd+0x264>
    8f9c:	1025883a 	mov	r18,r2

	int index_1 = index;
	int index_2 = index;
	int index_3 = index;

	for(int i = 0; i <= index; i++) {
    8fa0:	10800044 	addi	r2,r2,1
    8fa4:	80bfe80e 	bge	r16,r2,8f48 <__alt_data_end+0xf4008f48>
		else if(i <= (index_2 + 25) && (msg[i] == ' ')) {
			index_3 = i;
		}
	}

	printf("Index 1: %d\n", index_1);
    8fa8:	01020074 	movhi	r4,2049
    8fac:	880b883a 	mov	r5,r17
    8fb0:	212aac04 	addi	r4,r4,-21840
    8fb4:	000b63c0 	call	b63c <printf>
	printf("Index 2: %d\n", index_2);
    8fb8:	01020074 	movhi	r4,2049
    8fbc:	900b883a 	mov	r5,r18
    8fc0:	212ab004 	addi	r4,r4,-21824
    8fc4:	000b63c0 	call	b63c <printf>
	printf("Index 3: %d\n", index_3);
    8fc8:	01020074 	movhi	r4,2049
    8fcc:	980b883a 	mov	r5,r19
    8fd0:	212ab404 	addi	r4,r4,-21808
    8fd4:	000b63c0 	call	b63c <printf>
    8fd8:	d8c00304 	addi	r3,sp,12

	for(int i = 0; i < index; i++) {
    8fdc:	0005883a 	mov	r2,zero
    8fe0:	80801726 	beq	r16,r2,9040 <ShowRecordingEnd+0x304>
		if(i >= 0 && i < index_1) {
    8fe4:	1440050e 	bge	r2,r17,8ffc <ShowRecordingEnd+0x2c0>
			msg_1[i] = msg[i];
    8fe8:	19400003 	ldbu	r5,0(r3)
    8fec:	d9803284 	addi	r6,sp,202
    8ff0:	3089883a 	add	r4,r6,r2
    8ff4:	21400005 	stb	r5,0(r4)
    8ff8:	00000e06 	br	9034 <ShowRecordingEnd+0x2f8>
		}
		else if(i >= index_1 && i < index_2) {
    8ffc:	1480030e 	bge	r2,r18,900c <ShowRecordingEnd+0x2d0>
			msg_2[i - index_1 - 1] = msg[i];
    9000:	1449c83a 	sub	r4,r2,r17
    9004:	d9402b04 	addi	r5,sp,172
    9008:	00000706 	br	9028 <ShowRecordingEnd+0x2ec>
		}
		else if(i >= index_2 && i < index_3) {
    900c:	14c0040e 	bge	r2,r19,9020 <ShowRecordingEnd+0x2e4>
			msg_3[i - index_2 - 1] = msg[i];
    9010:	1489c83a 	sub	r4,r2,r18
    9014:	d9802384 	addi	r6,sp,142
    9018:	3109883a 	add	r4,r6,r4
    901c:	00000306 	br	902c <ShowRecordingEnd+0x2f0>
		}
		else if(i >= index_3) {
			msg_4[i - index_3 - 1] = msg[i];
    9020:	14c9c83a 	sub	r4,r2,r19
    9024:	d9401c04 	addi	r5,sp,112
    9028:	2909883a 	add	r4,r5,r4
    902c:	19400003 	ldbu	r5,0(r3)
    9030:	217fffc5 	stb	r5,-1(r4)

	printf("Index 1: %d\n", index_1);
	printf("Index 2: %d\n", index_2);
	printf("Index 3: %d\n", index_3);

	for(int i = 0; i < index; i++) {
    9034:	10800044 	addi	r2,r2,1
    9038:	18c00044 	addi	r3,r3,1
    903c:	003fe806 	br	8fe0 <__alt_data_end+0xf4008fe0>
		else if(i >= index_3) {
			msg_4[i - index_3 - 1] = msg[i];
		}
	}

	printf("message 1: %s\n", msg_1);
    9040:	01020074 	movhi	r4,2049
    9044:	d9403284 	addi	r5,sp,202
    9048:	212ab804 	addi	r4,r4,-21792
    904c:	000b63c0 	call	b63c <printf>
	printf("message 2: %s\n", msg_2);
    9050:	01020074 	movhi	r4,2049
    9054:	d9402b04 	addi	r5,sp,172
    9058:	212abc04 	addi	r4,r4,-21776
    905c:	000b63c0 	call	b63c <printf>
	printf("message 3: %s\n", msg_3);
    9060:	01020074 	movhi	r4,2049
    9064:	d9402384 	addi	r5,sp,142
    9068:	212ac004 	addi	r4,r4,-21760
    906c:	000b63c0 	call	b63c <printf>
	printf("message 4: %s\n", msg_4);
    9070:	01020074 	movhi	r4,2049
    9074:	d9401c04 	addi	r5,sp,112
    9078:	212ac404 	addi	r4,r4,-21744
    907c:	000b63c0 	call	b63c <printf>
	ShowMessage(msg_1, msg_2, msg_3, msg_4);
    9080:	d9c01c04 	addi	r7,sp,112
    9084:	d9802384 	addi	r6,sp,142
    9088:	d9402b04 	addi	r5,sp,172
    908c:	d9003284 	addi	r4,sp,202
    9090:	0008c580 	call	8c58 <ShowMessage>
}
    9094:	dfc03e17 	ldw	ra,248(sp)
    9098:	dcc03d17 	ldw	r19,244(sp)
    909c:	dc803c17 	ldw	r18,240(sp)
    90a0:	dc403b17 	ldw	r17,236(sp)
    90a4:	dc003a17 	ldw	r16,232(sp)
    90a8:	dec03f04 	addi	sp,sp,252
    90ac:	f800283a 	ret

000090b0 <Init_Touch>:
** Initialise touch screen controller
*****************************************************************************/
void Init_Touch(void)
{
    // send touchscreen controller an "enable touch" command
    IOWR_ALTERA_AVALON_UART_TXDATA(TOUCHSCREEN_BASE, 0x55);
    90b0:	00801904 	movi	r2,100
    90b4:	00c01544 	movi	r3,85
    90b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_TXDATA(TOUCHSCREEN_BASE, 0x01);
    90bc:	00c00044 	movi	r3,1
    90c0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_TXDATA(TOUCHSCREEN_BASE, 0x12);
    90c4:	00c00484 	movi	r3,18
    90c8:	10c00035 	stwio	r3,0(r2)
    90cc:	f800283a 	ret

000090d0 <Get_Coordinates_Of_Touch>:
}

struct coordinate Get_Coordinates_Of_Touch(void)
{
    // Wait for pen to go down 
    while(IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE) != 0x81);
    90d0:	01401804 	movi	r5,96
    90d4:	00802044 	movi	r2,129
    90d8:	28c00037 	ldwio	r3,0(r5)
    90dc:	01001804 	movi	r4,96
    90e0:	18bffd1e 	bne	r3,r2,90d8 <__alt_data_end+0xf40090d8>
    IOWR_ALTERA_AVALON_UART_TXDATA(TOUCHSCREEN_BASE, 0x01);
    IOWR_ALTERA_AVALON_UART_TXDATA(TOUCHSCREEN_BASE, 0x12);
}

struct coordinate Get_Coordinates_Of_Touch(void)
{
    90e4:	defffb04 	addi	sp,sp,-20
    90e8:	dfc00415 	stw	ra,16(sp)
    90ec:	dcc00315 	stw	r19,12(sp)
    90f0:	dc800215 	stw	r18,8(sp)
    90f4:	dc400115 	stw	r17,4(sp)
    90f8:	dc000015 	stw	r16,0(sp)
    // Wait for pen to go down 
    while(IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE) != 0x81);

    // Wait for pen to go up
    while(IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE) != 0x80);
    90fc:	00802004 	movi	r2,128
    9100:	04001804 	movi	r16,96
    9104:	20c00037 	ldwio	r3,0(r4)
    9108:	18bffd1e 	bne	r3,r2,9100 <__alt_data_end+0xf4009100>
    // x and y coordinates of touch
    unsigned int x = 0;
    unsigned int y = 0;

    //Read next two bytes
    usleep(833);
    910c:	0100d044 	movi	r4,833
    9110:	000bf7c0 	call	bf7c <usleep>
    char response2 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    9114:	84c00037 	ldwio	r19,0(r16)

    usleep(833);
    9118:	0100d044 	movi	r4,833
    911c:	000bf7c0 	call	bf7c <usleep>
    char response3 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    9120:	84400037 	ldwio	r17,0(r16)

    usleep(833);
    9124:	0100d044 	movi	r4,833
    9128:	000bf7c0 	call	bf7c <usleep>

    //Calculate x
    x = (response3 << 7) | response2;

    // Read the next two bytes
    char response4 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    912c:	84800037 	ldwio	r18,0(r16)
    usleep(833);
    9130:	0100d044 	movi	r4,833
    9134:	000bf7c0 	call	bf7c <usleep>

    char response5 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    9138:	84000037 	ldwio	r16,0(r16)
    printf("\n");
    913c:	01000284 	movi	r4,10

    struct coordinate touch_cord;
    touch_cord.x = x;
    touch_cord.y = y;

    return touch_cord;
    9140:	8c403fcc 	andi	r17,r17,255
    9144:	84003fcc 	andi	r16,r16,255
    9148:	8c40201c 	xori	r17,r17,128
    914c:	8400201c 	xori	r16,r16,128
    // Read the next two bytes
    char response4 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    usleep(833);

    char response5 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    printf("\n");
    9150:	000b6900 	call	b690 <putchar>

    struct coordinate touch_cord;
    touch_cord.x = x;
    touch_cord.y = y;

    return touch_cord;
    9154:	8c7fe004 	addi	r17,r17,-128
    9158:	843fe004 	addi	r16,r16,-128
    915c:	882291fa 	slli	r17,r17,7
    9160:	98803fcc 	andi	r2,r19,255
    9164:	802091fa 	slli	r16,r16,7
    9168:	90c03fcc 	andi	r3,r18,255
    916c:	1080201c 	xori	r2,r2,128
    9170:	18c0201c 	xori	r3,r3,128
    9174:	10bfe004 	addi	r2,r2,-128
    9178:	18ffe004 	addi	r3,r3,-128
}
    917c:	8884b03a 	or	r2,r17,r2
    9180:	80c6b03a 	or	r3,r16,r3
    9184:	dfc00417 	ldw	ra,16(sp)
    9188:	dcc00317 	ldw	r19,12(sp)
    918c:	dc800217 	ldw	r18,8(sp)
    9190:	dc400117 	ldw	r17,4(sp)
    9194:	dc000017 	ldw	r16,0(sp)
    9198:	dec00504 	addi	sp,sp,20
    919c:	f800283a 	ret

000091a0 <pixelInRange>:

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    91a0:	21800636 	bltu	r4,r6,91bc <pixelInRange+0x1c>
    91a4:	39000536 	bltu	r7,r4,91bc <pixelInRange+0x1c>
    91a8:	d8800017 	ldw	r2,0(sp)
    91ac:	28800336 	bltu	r5,r2,91bc <pixelInRange+0x1c>
    91b0:	d8800117 	ldw	r2,4(sp)
    91b4:	1145403a 	cmpgeu	r2,r2,r5
    91b8:	f800283a 	ret
    91bc:	0005883a 	mov	r2,zero
}
    91c0:	f800283a 	ret

000091c4 <displayScreen>:

void displayScreen(enum state s){
    91c4:	deffff04 	addi	sp,sp,-4
    91c8:	dfc00015 	stw	ra,0(sp)
	switch(s){
    91cc:	00800244 	movi	r2,9
    91d0:	11003036 	bltu	r2,r4,9294 <displayScreen+0xd0>
    91d4:	200890ba 	slli	r4,r4,2
    91d8:	00800074 	movhi	r2,1
    91dc:	10a47b04 	addi	r2,r2,-28180
    91e0:	2089883a 	add	r4,r4,r2
    91e4:	20800017 	ldw	r2,0(r4)
    91e8:	1000683a 	jmp	r2
    91ec:	00009288 	cmpgei	zero,zero,586
    91f0:	00009214 	movui	zero,584
    91f4:	00009220 	cmpeqi	zero,zero,584
    91f8:	0000922c 	andhi	zero,zero,584
    91fc:	00009238 	rdprs	zero,zero,584
    9200:	00009244 	movi	zero,585
    9204:	00009250 	cmplti	zero,zero,585
    9208:	00009278 	rdprs	zero,zero,585
    920c:	00009294 	movui	zero,586
    9210:	00009268 	cmpgeui	zero,zero,585
		}
		default: {
			break;
		}
	}
}
    9214:	dfc00017 	ldw	ra,0(sp)
    9218:	dec00104 	addi	sp,sp,4
		case WELCOME: {
			ShowWelcome();
			break;
		}
		case OP1: {
			ShowOption1();
    921c:	000885c1 	jmpi	885c <ShowOption1>
		}
		default: {
			break;
		}
	}
}
    9220:	dfc00017 	ldw	ra,0(sp)
    9224:	dec00104 	addi	sp,sp,4
		case OP1: {
			ShowOption1();
			break;
		}
		case OP2: {
			ShowOption2();
    9228:	00089841 	jmpi	8984 <ShowOption2>
		}
		default: {
			break;
		}
	}
}
    922c:	dfc00017 	ldw	ra,0(sp)
    9230:	dec00104 	addi	sp,sp,4
		case OP2: {
			ShowOption2();
			break;
		}
		case OP3: {
			ShowOption3();
    9234:	0008a801 	jmpi	8a80 <ShowOption3>
		}
		default: {
			break;
		}
	}
}
    9238:	dfc00017 	ldw	ra,0(sp)
    923c:	dec00104 	addi	sp,sp,4
		case OP3: {
			ShowOption3();
			break;
		}
		case REC: {
			ShowOptionRecord();
    9240:	0008b481 	jmpi	8b48 <ShowOptionRecord>
		}
		default: {
			break;
		}
	}
}
    9244:	dfc00017 	ldw	ra,0(sp)
    9248:	dec00104 	addi	sp,sp,4
		case REC: {
			ShowOptionRecord();
			break;
		}
		case PROG: {
			ShowRecordingInProgress();
    924c:	00084fc1 	jmpi	84fc <ShowRecordingInProgress>
			break;
		}
		case END: {
			ShowRecordingInProgress();
    9250:	00084fc0 	call	84fc <ShowRecordingInProgress>
			usleep(31 * 1000000); //45 seconds in real time
    9254:	01007674 	movhi	r4,473
    9258:	21017004 	addi	r4,r4,1472
    925c:	000bf7c0 	call	bf7c <usleep>
			ShowRecordingEnd(RECORD_TIMEOUT);
    9260:	01000284 	movi	r4,10
    9264:	00000106 	br	926c <displayScreen+0xa8>
			break;
		}
		case POST: {
			ShowRecordingEnd(SEND_TIMEOUT);
    9268:	01000144 	movi	r4,5
		}
		default: {
			break;
		}
	}
}
    926c:	dfc00017 	ldw	ra,0(sp)
    9270:	dec00104 	addi	sp,sp,4
			usleep(31 * 1000000); //45 seconds in real time
			ShowRecordingEnd(RECORD_TIMEOUT);
			break;
		}
		case POST: {
			ShowRecordingEnd(SEND_TIMEOUT);
    9274:	0008d3c1 	jmpi	8d3c <ShowRecordingEnd>
			break;
		}
		case FIN: {
			ShowFinish();
    9278:	000853c0 	call	853c <ShowFinish>
			usleep(2 * 1000000);
    927c:	010007f4 	movhi	r4,31
    9280:	21212004 	addi	r4,r4,-31616
    9284:	000bf7c0 	call	bf7c <usleep>
		}
		default: {
			break;
		}
	}
}
    9288:	dfc00017 	ldw	ra,0(sp)
    928c:	dec00104 	addi	sp,sp,4
			break;
		}
		case FIN: {
			ShowFinish();
			usleep(2 * 1000000);
			ShowWelcome();
    9290:	000841c1 	jmpi	841c <ShowWelcome>
		}
		default: {
			break;
		}
	}
}
    9294:	dfc00017 	ldw	ra,0(sp)
    9298:	dec00104 	addi	sp,sp,4
    929c:	f800283a 	ret

000092a0 <main>:
	enum state next_state;
	enum state prev_state;
	prev_state = WELCOME;
	current_state = WELCOME;
	next_state = OP1;
    alt_putstr("Hello from Nios II!\n");
    92a0:	01020074 	movhi	r4,2049
struct coordinate Get_Coordinates_Of_Touch(void);
unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y);
void displayScreen(enum state s);

int main()
{ 
    92a4:	defff904 	addi	sp,sp,-28
	enum state next_state;
	enum state prev_state;
	prev_state = WELCOME;
	current_state = WELCOME;
	next_state = OP1;
    alt_putstr("Hello from Nios II!\n");
    92a8:	212ac804 	addi	r4,r4,-21728
struct coordinate Get_Coordinates_Of_Touch(void);
unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y);
void displayScreen(enum state s);

int main()
{ 
    92ac:	dfc00615 	stw	ra,24(sp)
    92b0:	dd000415 	stw	r20,16(sp)
    92b4:	dcc00315 	stw	r19,12(sp)
    92b8:	dc000015 	stw	r16,0(sp)
    92bc:	dd400515 	stw	r21,20(sp)
    92c0:	dc800215 	stw	r18,8(sp)
    92c4:	dc400115 	stw	r17,4(sp)
	enum state next_state;
	enum state prev_state;
	prev_state = WELCOME;
	current_state = WELCOME;
	next_state = OP1;
    alt_putstr("Hello from Nios II!\n");
    92c8:	000bf440 	call	bf44 <alt_putstr>
    ShowWelcome();
    92cc:	000841c0 	call	841c <ShowWelcome>
			x = (unsigned int)(((x-200)/3700.0)*160);
			y = (unsigned int)(((y-500)/3300.0)*120);
			printf("pixel: (%d, %d)\n", x, y);

			current_state = prev_state;
        	switch(current_state){
    92d0:	05000074 	movhi	r20,1
int main()
{ 
	enum state current_state;
	enum state next_state;
	enum state prev_state;
	prev_state = WELCOME;
    92d4:	0027883a 	mov	r19,zero
	current_state = WELCOME;
	next_state = OP1;
    92d8:	04000044 	movi	r16,1
{ 
	enum state current_state;
	enum state next_state;
	enum state prev_state;
	prev_state = WELCOME;
	current_state = WELCOME;
    92dc:	0005883a 	mov	r2,zero
			x = (unsigned int)(((x-200)/3700.0)*160);
			y = (unsigned int)(((y-500)/3300.0)*120);
			printf("pixel: (%d, %d)\n", x, y);

			current_state = prev_state;
        	switch(current_state){
    92e0:	a5251204 	addi	r20,r20,-27576

    // Init_Touch();

    /* Event loop never exits. */
    while (1) {
        if(IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE) == 0x81){
    92e4:	04801804 	movi	r18,96
    92e8:	91400037 	ldwio	r5,0(r18)
    92ec:	01002044 	movi	r4,129
    92f0:	00c00204 	movi	r3,8
    92f4:	2900021e 	bne	r5,r4,9300 <main+0x60>
        	current_state = IDLE;
    92f8:	1805883a 	mov	r2,r3
    92fc:	003ff906 	br	92e4 <__alt_data_end+0xf40092e4>
        }else if(current_state == IDLE && IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE) == 0x80){
    9300:	10fff81e 	bne	r2,r3,92e4 <__alt_data_end+0xf40092e4>
    9304:	91000037 	ldwio	r4,0(r18)
    9308:	00c02004 	movi	r3,128
    930c:	20fff51e 	bne	r4,r3,92e4 <__alt_data_end+0xf40092e4>
        	/* compute coordinate of touch */
        	unsigned int x = 0;
        	unsigned int y = 0;

        	//Read next two bytes
			usleep(833);
    9310:	0100d044 	movi	r4,833
    9314:	000bf7c0 	call	bf7c <usleep>
			char x_param1 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    9318:	95400037 	ldwio	r21,0(r18)

			usleep(833);
    931c:	0100d044 	movi	r4,833
    9320:	000bf7c0 	call	bf7c <usleep>
			char x_param2 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    9324:	90800037 	ldwio	r2,0(r18)

			x = (x_param2 << 7) | x_param1;

			usleep(833);
    9328:	0100d044 	movi	r4,833
			char x_param1 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);

			usleep(833);
			char x_param2 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);

			x = (x_param2 << 7) | x_param1;
    932c:	10803fcc 	andi	r2,r2,255
    9330:	1080201c 	xori	r2,r2,128
    9334:	10bfe004 	addi	r2,r2,-128
    9338:	100491fa 	slli	r2,r2,7
    933c:	ad403fcc 	andi	r21,r21,255
    9340:	ad40201c 	xori	r21,r21,128
    9344:	ad7fe004 	addi	r21,r21,-128
    9348:	156ab03a 	or	r21,r2,r21

			usleep(833);
    934c:	000bf7c0 	call	bf7c <usleep>
			char y_param1 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    9350:	94400037 	ldwio	r17,0(r18)

			usleep(833);
    9354:	0100d044 	movi	r4,833
    9358:	000bf7c0 	call	bf7c <usleep>
			char y_param2 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);
    935c:	94800037 	ldwio	r18,0(r18)

			y = (y_param2 << 7) | y_param1;
			printf("touch: (%d, %d)\n", x, y);
    9360:	01020074 	movhi	r4,2049
			char y_param1 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);

			usleep(833);
			char y_param2 = IORD_ALTERA_AVALON_UART_RXDATA(TOUCHSCREEN_BASE);

			y = (y_param2 << 7) | y_param1;
    9364:	94803fcc 	andi	r18,r18,255
    9368:	9480201c 	xori	r18,r18,128
    936c:	94bfe004 	addi	r18,r18,-128
    9370:	902491fa 	slli	r18,r18,7
    9374:	8c403fcc 	andi	r17,r17,255
    9378:	8c40201c 	xori	r17,r17,128
    937c:	8c7fe004 	addi	r17,r17,-128
    9380:	9464b03a 	or	r18,r18,r17
			printf("touch: (%d, %d)\n", x, y);
    9384:	900d883a 	mov	r6,r18
    9388:	a80b883a 	mov	r5,r21
    938c:	212ace04 	addi	r4,r4,-21704
    9390:	000b63c0 	call	b63c <printf>

			/* convert x, y to pixel coordinates */
			x = (unsigned int)(((x-200)/3700.0)*160);
    9394:	a93fce04 	addi	r4,r21,-200
    9398:	000b3200 	call	b320 <__floatunsidf>
    939c:	01d02b74 	movhi	r7,16557
    93a0:	000d883a 	mov	r6,zero
    93a4:	39fa0004 	addi	r7,r7,-6144
    93a8:	1009883a 	mov	r4,r2
    93ac:	180b883a 	mov	r5,r3
    93b0:	000968c0 	call	968c <__divdf3>
    93b4:	000d883a 	mov	r6,zero
    93b8:	01d01934 	movhi	r7,16484
    93bc:	1009883a 	mov	r4,r2
    93c0:	180b883a 	mov	r5,r3
    93c4:	000a1380 	call	a138 <__muldf3>
    93c8:	180b883a 	mov	r5,r3
    93cc:	1009883a 	mov	r4,r2
    93d0:	00095f00 	call	95f0 <__fixunsdfsi>
			y = (unsigned int)(((y-500)/3300.0)*120);
    93d4:	913f8304 	addi	r4,r18,-500

			y = (y_param2 << 7) | y_param1;
			printf("touch: (%d, %d)\n", x, y);

			/* convert x, y to pixel coordinates */
			x = (unsigned int)(((x-200)/3700.0)*160);
    93d8:	1023883a 	mov	r17,r2
			y = (unsigned int)(((y-500)/3300.0)*120);
    93dc:	000b3200 	call	b320 <__floatunsidf>
    93e0:	01d02ab4 	movhi	r7,16554
    93e4:	000d883a 	mov	r6,zero
    93e8:	39f20004 	addi	r7,r7,-14336
    93ec:	1009883a 	mov	r4,r2
    93f0:	180b883a 	mov	r5,r3
    93f4:	000968c0 	call	968c <__divdf3>
    93f8:	000d883a 	mov	r6,zero
    93fc:	01d017b4 	movhi	r7,16478
    9400:	1009883a 	mov	r4,r2
    9404:	180b883a 	mov	r5,r3
    9408:	000a1380 	call	a138 <__muldf3>
    940c:	180b883a 	mov	r5,r3
    9410:	1009883a 	mov	r4,r2
    9414:	00095f00 	call	95f0 <__fixunsdfsi>
			printf("pixel: (%d, %d)\n", x, y);
    9418:	01020074 	movhi	r4,2049
    941c:	100d883a 	mov	r6,r2
    9420:	880b883a 	mov	r5,r17
    9424:	212ad304 	addi	r4,r4,-21684
			y = (y_param2 << 7) | y_param1;
			printf("touch: (%d, %d)\n", x, y);

			/* convert x, y to pixel coordinates */
			x = (unsigned int)(((x-200)/3700.0)*160);
			y = (unsigned int)(((y-500)/3300.0)*120);
    9428:	1025883a 	mov	r18,r2
			printf("pixel: (%d, %d)\n", x, y);
    942c:	000b63c0 	call	b63c <printf>

			current_state = prev_state;
        	switch(current_state){
    9430:	00800244 	movi	r2,9
    9434:	14c03236 	bltu	r2,r19,9500 <main+0x260>
    9438:	980490ba 	slli	r2,r19,2
    943c:	1505883a 	add	r2,r2,r20
    9440:	10800017 	ldw	r2,0(r2)
    9444:	1000683a 	jmp	r2
    9448:	000095d0 	cmplti	zero,zero,599
    944c:	00009470 	cmpltui	zero,zero,593
    9450:	00009494 	movui	zero,594
    9454:	000094b8 	rdprs	zero,zero,594
    9458:	000094dc 	xori	zero,zero,595
    945c:	000095c8 	cmpgei	zero,zero,599
    9460:	000094f8 	rdprs	zero,zero,595
    9464:	000095d0 	cmplti	zero,zero,599
    9468:	00009500 	call	950 <__alt_mem_onchip_memory2_0-0x76b0>
    946c:	000094f8 	rdprs	zero,zero,595

    return touch_cord;
}

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    9470:	88bff104 	addi	r2,r17,-60
    9474:	00c00c84 	movi	r3,50
    9478:	18802836 	bltu	r3,r2,951c <main+0x27c>
    947c:	90bfe704 	addi	r2,r18,-100
    9480:	00c003c4 	movi	r3,15
    9484:	18802536 	bltu	r3,r2,951c <main+0x27c>
        		case OP1: {
        			prev_state = OP1;
					if(pixelInRange(x, y, SELECT_BUTTON_X, SELECT_BUTTON_X + SELECT_BUTTON_WIDTH,
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'a');
    9488:	00801104 	movi	r2,68
    948c:	00c01844 	movi	r3,97
    9490:	00002906 	br	9538 <main+0x298>

    return touch_cord;
}

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    9494:	88bff104 	addi	r2,r17,-60
    9498:	00c00c84 	movi	r3,50
    949c:	18802936 	bltu	r3,r2,9544 <main+0x2a4>
    94a0:	90bfe704 	addi	r2,r18,-100
    94a4:	00c003c4 	movi	r3,15
    94a8:	18802636 	bltu	r3,r2,9544 <main+0x2a4>
        		case OP2: {
        			prev_state = OP2;
					if(pixelInRange(x, y, SELECT_BUTTON_X, SELECT_BUTTON_X + SELECT_BUTTON_WIDTH,
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'b');
    94ac:	00801104 	movi	r2,68
    94b0:	00c01884 	movi	r3,98
    94b4:	00002006 	br	9538 <main+0x298>

    return touch_cord;
}

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    94b8:	88bff104 	addi	r2,r17,-60
    94bc:	00c00c84 	movi	r3,50
    94c0:	18802c36 	bltu	r3,r2,9574 <main+0x2d4>
    94c4:	90bfe704 	addi	r2,r18,-100
    94c8:	00c003c4 	movi	r3,15
    94cc:	18802936 	bltu	r3,r2,9574 <main+0x2d4>
        		case OP3: {
        			prev_state = OP3;
					if(pixelInRange(x, y, SELECT_BUTTON_X, SELECT_BUTTON_X + SELECT_BUTTON_WIDTH,
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'c');
    94d0:	00801104 	movi	r2,68
    94d4:	00c018c4 	movi	r3,99
    94d8:	00001706 	br	9538 <main+0x298>

    return touch_cord;
}

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    94dc:	88bff104 	addi	r2,r17,-60
    94e0:	00c00c84 	movi	r3,50
    94e4:	18802c36 	bltu	r3,r2,9598 <main+0x2f8>
    94e8:	90bfe704 	addi	r2,r18,-100
    94ec:	00c003c4 	movi	r3,15
    94f0:	1880322e 	bgeu	r3,r2,95bc <main+0x31c>
    94f4:	00002806 	br	9598 <main+0x2f8>
        			int wait_time = SEND_TIMEOUT;
					break;
        		}
        		case POST: {
        			prev_state = POST;
        			next_state = FIN;
    94f8:	040001c4 	movi	r16,7

        			break;
    94fc:	00000206 	br	9508 <main+0x268>
    9500:	9805883a 	mov	r2,r19
				}
        		default: {
        			break;
        		}
        	}
        	if(prev_state != next_state){
    9504:	84ff7726 	beq	r16,r19,92e4 <__alt_data_end+0xf40092e4>
				displayScreen(next_state);
    9508:	8009883a 	mov	r4,r16
    950c:	00091c40 	call	91c4 <displayScreen>
    9510:	9805883a 	mov	r2,r19
    9514:	8027883a 	mov	r19,r16
    9518:	003f7206 	br	92e4 <__alt_data_end+0xf40092e4>

    return touch_cord;
}

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    951c:	8c7fdd04 	addi	r17,r17,-140
    9520:	00800504 	movi	r2,20
    9524:	14402236 	bltu	r2,r17,95b0 <main+0x310>
    9528:	94bff4c4 	addi	r18,r18,-45
    952c:	00800644 	movi	r2,25
    9530:	14802b2e 	bgeu	r2,r18,95e0 <main+0x340>
    9534:	00001e06 	br	95b0 <main+0x310>
        		case OP2: {
        			prev_state = OP2;
					if(pixelInRange(x, y, SELECT_BUTTON_X, SELECT_BUTTON_X + SELECT_BUTTON_WIDTH,
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'b');
    9538:	10c00035 	stwio	r3,0(r2)
        		}
        		case OP2: {
        			prev_state = OP2;
					if(pixelInRange(x, y, SELECT_BUTTON_X, SELECT_BUTTON_X + SELECT_BUTTON_WIDTH,
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
    953c:	04000244 	movi	r16,9
    9540:	003ff106 	br	9508 <__alt_data_end+0xf4009508>

    return touch_cord;
}

unsigned int pixelInRange(unsigned int x, unsigned int y, unsigned int lower_x, unsigned int upper_x, int lower_y, int upper_y){
	return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
    9544:	88bfdd04 	addi	r2,r17,-140
    9548:	00c00504 	movi	r3,20
    954c:	18800336 	bltu	r3,r2,955c <main+0x2bc>
    9550:	90bff4c4 	addi	r2,r18,-45
    9554:	01000644 	movi	r4,25
    9558:	2080232e 	bgeu	r4,r2,95e8 <main+0x348>
    955c:	8c7fff84 	addi	r17,r17,-2
    9560:	1c401336 	bltu	r3,r17,95b0 <main+0x310>
    9564:	94bff4c4 	addi	r18,r18,-45
    9568:	00800644 	movi	r2,25
    956c:	1480182e 	bgeu	r2,r18,95d0 <main+0x330>
    9570:	00000f06 	br	95b0 <main+0x310>
    9574:	88bfdd04 	addi	r2,r17,-140
    9578:	00c00504 	movi	r3,20
    957c:	18800336 	bltu	r3,r2,958c <main+0x2ec>
    9580:	90bff4c4 	addi	r2,r18,-45
    9584:	01000644 	movi	r4,25
    9588:	2080132e 	bgeu	r4,r2,95d8 <main+0x338>
    958c:	8c7fff84 	addi	r17,r17,-2
    9590:	1c7fe52e 	bgeu	r3,r17,9528 <__alt_data_end+0xf4009528>
    9594:	00000606 	br	95b0 <main+0x310>
    9598:	8c7fff84 	addi	r17,r17,-2
    959c:	00800504 	movi	r2,20
    95a0:	14400336 	bltu	r2,r17,95b0 <main+0x310>
    95a4:	94bff4c4 	addi	r18,r18,-45
    95a8:	00800644 	movi	r2,25
    95ac:	14800e2e 	bgeu	r2,r18,95e8 <main+0x348>
						next_state = OP3;
					}
					break;
        		}
        		case REC: {
        			prev_state = REC;
    95b0:	9821883a 	mov	r16,r19
        		default: {
        			break;
        		}
        	}
        	if(prev_state != next_state){
				displayScreen(next_state);
    95b4:	9805883a 	mov	r2,r19
    95b8:	003f4a06 	br	92e4 <__alt_data_end+0xf40092e4>
        		case REC: {
        			prev_state = REC;
					if(pixelInRange(x, y, SELECT_BUTTON_X, SELECT_BUTTON_X + SELECT_BUTTON_WIDTH,
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = END;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'd');
    95bc:	00801104 	movi	r2,68
    95c0:	00c01904 	movi	r3,100
    95c4:	10c00035 	stwio	r3,0(r2)
					}
					break;
        		}
        		case PROG: {
					prev_state = PROG;
					next_state = END;
    95c8:	04000184 	movi	r16,6
    95cc:	003fce06 	br	9508 <__alt_data_end+0xf4009508>
					} else if(pixelInRange(x, y, RIGHT_BUTTON_X, RIGHT_BUTTON_X + LEFT_RIGHT_BUTTON_WIDTH,
							RIGHT_BUTTON_Y, RIGHT_BUTTON_Y+ LEFT_RIGHT_BUTTON_HEIGHT)){
						next_state = OP3;
					} else if(pixelInRange(x, y, LEFT_BUTTON_X, LEFT_BUTTON_X + LEFT_RIGHT_BUTTON_WIDTH,
							LEFT_BUTTON_Y, LEFT_BUTTON_Y + LEFT_RIGHT_BUTTON_HEIGHT)){
						next_state = OP1;
    95d0:	04000044 	movi	r16,1
    95d4:	003fcc06 	br	9508 <__alt_data_end+0xf4009508>
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'c');
					} else if(pixelInRange(x, y, RIGHT_BUTTON_X, RIGHT_BUTTON_X + LEFT_RIGHT_BUTTON_WIDTH,
							RIGHT_BUTTON_Y, RIGHT_BUTTON_Y+ LEFT_RIGHT_BUTTON_HEIGHT)){
						next_state = REC;
    95d8:	04000104 	movi	r16,4
    95dc:	003fca06 	br	9508 <__alt_data_end+0xf4009508>
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'a');
					} else if(pixelInRange(x, y, RIGHT_BUTTON_X, RIGHT_BUTTON_X + LEFT_RIGHT_BUTTON_WIDTH,
							RIGHT_BUTTON_Y, RIGHT_BUTTON_Y+ LEFT_RIGHT_BUTTON_HEIGHT)){
						next_state = OP2;
    95e0:	04000084 	movi	r16,2
    95e4:	003fc806 	br	9508 <__alt_data_end+0xf4009508>
							SELECT_BUTTON_Y, SELECT_BUTTON_Y+SELECT_BUTTON_HEIGHT)){
						next_state = POST;
						IOWR_ALTERA_AVALON_UART_TXDATA(WIFI_MODULE_BASE, 'b');
					} else if(pixelInRange(x, y, RIGHT_BUTTON_X, RIGHT_BUTTON_X + LEFT_RIGHT_BUTTON_WIDTH,
							RIGHT_BUTTON_Y, RIGHT_BUTTON_Y+ LEFT_RIGHT_BUTTON_HEIGHT)){
						next_state = OP3;
    95e8:	040000c4 	movi	r16,3
    95ec:	003fc606 	br	9508 <__alt_data_end+0xf4009508>

000095f0 <__fixunsdfsi>:
    95f0:	defffd04 	addi	sp,sp,-12
    95f4:	000d883a 	mov	r6,zero
    95f8:	01d07834 	movhi	r7,16864
    95fc:	dc400115 	stw	r17,4(sp)
    9600:	dc000015 	stw	r16,0(sp)
    9604:	dfc00215 	stw	ra,8(sp)
    9608:	2023883a 	mov	r17,r4
    960c:	2821883a 	mov	r16,r5
    9610:	000a05c0 	call	a05c <__gedf2>
    9614:	1000080e 	bge	r2,zero,9638 <__fixunsdfsi+0x48>
    9618:	8809883a 	mov	r4,r17
    961c:	800b883a 	mov	r5,r16
    9620:	000b2a00 	call	b2a0 <__fixdfsi>
    9624:	dfc00217 	ldw	ra,8(sp)
    9628:	dc400117 	ldw	r17,4(sp)
    962c:	dc000017 	ldw	r16,0(sp)
    9630:	dec00304 	addi	sp,sp,12
    9634:	f800283a 	ret
    9638:	000d883a 	mov	r6,zero
    963c:	01d07834 	movhi	r7,16864
    9640:	8809883a 	mov	r4,r17
    9644:	800b883a 	mov	r5,r16
    9648:	000a9a40 	call	a9a4 <__subdf3>
    964c:	180b883a 	mov	r5,r3
    9650:	1009883a 	mov	r4,r2
    9654:	000b2a00 	call	b2a0 <__fixdfsi>
    9658:	00e00034 	movhi	r3,32768
    965c:	10c5883a 	add	r2,r2,r3
    9660:	003ff006 	br	9624 <__alt_data_end+0xf4009624>

00009664 <__mulsi3>:
    9664:	0005883a 	mov	r2,zero
    9668:	20000726 	beq	r4,zero,9688 <__mulsi3+0x24>
    966c:	20c0004c 	andi	r3,r4,1
    9670:	2008d07a 	srli	r4,r4,1
    9674:	18000126 	beq	r3,zero,967c <__mulsi3+0x18>
    9678:	1145883a 	add	r2,r2,r5
    967c:	294b883a 	add	r5,r5,r5
    9680:	203ffa1e 	bne	r4,zero,966c <__alt_data_end+0xf400966c>
    9684:	f800283a 	ret
    9688:	f800283a 	ret

0000968c <__divdf3>:
    968c:	defff004 	addi	sp,sp,-64
    9690:	dc800815 	stw	r18,32(sp)
    9694:	2824d53a 	srli	r18,r5,20
    9698:	dd800c15 	stw	r22,48(sp)
    969c:	282cd7fa 	srli	r22,r5,31
    96a0:	dc000615 	stw	r16,24(sp)
    96a4:	04000434 	movhi	r16,16
    96a8:	843fffc4 	addi	r16,r16,-1
    96ac:	dfc00f15 	stw	ra,60(sp)
    96b0:	df000e15 	stw	fp,56(sp)
    96b4:	ddc00d15 	stw	r23,52(sp)
    96b8:	dd400b15 	stw	r21,44(sp)
    96bc:	dd000a15 	stw	r20,40(sp)
    96c0:	dcc00915 	stw	r19,36(sp)
    96c4:	dc400715 	stw	r17,28(sp)
    96c8:	9481ffcc 	andi	r18,r18,2047
    96cc:	2c20703a 	and	r16,r5,r16
    96d0:	b2003fcc 	andi	r8,r22,255
    96d4:	90006126 	beq	r18,zero,985c <__divdf3+0x1d0>
    96d8:	0081ffc4 	movi	r2,2047
    96dc:	202b883a 	mov	r21,r4
    96e0:	90803726 	beq	r18,r2,97c0 <__divdf3+0x134>
    96e4:	80800434 	orhi	r2,r16,16
    96e8:	100490fa 	slli	r2,r2,3
    96ec:	2020d77a 	srli	r16,r4,29
    96f0:	202a90fa 	slli	r21,r4,3
    96f4:	94bf0044 	addi	r18,r18,-1023
    96f8:	80a0b03a 	or	r16,r16,r2
    96fc:	0013883a 	mov	r9,zero
    9700:	000b883a 	mov	r5,zero
    9704:	3806d53a 	srli	r3,r7,20
    9708:	382ed7fa 	srli	r23,r7,31
    970c:	04400434 	movhi	r17,16
    9710:	8c7fffc4 	addi	r17,r17,-1
    9714:	18c1ffcc 	andi	r3,r3,2047
    9718:	3029883a 	mov	r20,r6
    971c:	3c62703a 	and	r17,r7,r17
    9720:	bf003fcc 	andi	fp,r23,255
    9724:	18006e26 	beq	r3,zero,98e0 <__divdf3+0x254>
    9728:	0081ffc4 	movi	r2,2047
    972c:	18806626 	beq	r3,r2,98c8 <__divdf3+0x23c>
    9730:	88800434 	orhi	r2,r17,16
    9734:	100490fa 	slli	r2,r2,3
    9738:	3022d77a 	srli	r17,r6,29
    973c:	302890fa 	slli	r20,r6,3
    9740:	18ff0044 	addi	r3,r3,-1023
    9744:	88a2b03a 	or	r17,r17,r2
    9748:	000f883a 	mov	r7,zero
    974c:	b5e6f03a 	xor	r19,r22,r23
    9750:	3a4cb03a 	or	r6,r7,r9
    9754:	008003c4 	movi	r2,15
    9758:	9809883a 	mov	r4,r19
    975c:	90c7c83a 	sub	r3,r18,r3
    9760:	9cc03fcc 	andi	r19,r19,255
    9764:	11809636 	bltu	r2,r6,99c0 <__divdf3+0x334>
    9768:	300c90ba 	slli	r6,r6,2
    976c:	00800074 	movhi	r2,1
    9770:	10a5e004 	addi	r2,r2,-26752
    9774:	308d883a 	add	r6,r6,r2
    9778:	30800017 	ldw	r2,0(r6)
    977c:	1000683a 	jmp	r2
    9780:	000099c0 	call	99c <__alt_mem_onchip_memory2_0-0x7664>
    9784:	000097f8 	rdprs	zero,zero,607
    9788:	000099b0 	cmpltui	zero,zero,614
    978c:	000097ec 	andhi	zero,zero,607
    9790:	000099b0 	cmpltui	zero,zero,614
    9794:	00009984 	movi	zero,614
    9798:	000099b0 	cmpltui	zero,zero,614
    979c:	000097ec 	andhi	zero,zero,607
    97a0:	000097f8 	rdprs	zero,zero,607
    97a4:	000097f8 	rdprs	zero,zero,607
    97a8:	00009984 	movi	zero,614
    97ac:	000097ec 	andhi	zero,zero,607
    97b0:	000097dc 	xori	zero,zero,607
    97b4:	000097dc 	xori	zero,zero,607
    97b8:	000097dc 	xori	zero,zero,607
    97bc:	00009d48 	cmpgei	zero,zero,629
    97c0:	2404b03a 	or	r2,r4,r16
    97c4:	10006c1e 	bne	r2,zero,9978 <__divdf3+0x2ec>
    97c8:	02400204 	movi	r9,8
    97cc:	0021883a 	mov	r16,zero
    97d0:	002b883a 	mov	r21,zero
    97d4:	01400084 	movi	r5,2
    97d8:	003fca06 	br	9704 <__alt_data_end+0xf4009704>
    97dc:	8023883a 	mov	r17,r16
    97e0:	a829883a 	mov	r20,r21
    97e4:	4039883a 	mov	fp,r8
    97e8:	280f883a 	mov	r7,r5
    97ec:	00800084 	movi	r2,2
    97f0:	3881601e 	bne	r7,r2,9d74 <__divdf3+0x6e8>
    97f4:	e027883a 	mov	r19,fp
    97f8:	9900004c 	andi	r4,r19,1
    97fc:	0081ffc4 	movi	r2,2047
    9800:	0021883a 	mov	r16,zero
    9804:	002b883a 	mov	r21,zero
    9808:	1004953a 	slli	r2,r2,20
    980c:	20c03fcc 	andi	r3,r4,255
    9810:	01400434 	movhi	r5,16
    9814:	297fffc4 	addi	r5,r5,-1
    9818:	180697fa 	slli	r3,r3,31
    981c:	8160703a 	and	r16,r16,r5
    9820:	80a0b03a 	or	r16,r16,r2
    9824:	80c6b03a 	or	r3,r16,r3
    9828:	a805883a 	mov	r2,r21
    982c:	dfc00f17 	ldw	ra,60(sp)
    9830:	df000e17 	ldw	fp,56(sp)
    9834:	ddc00d17 	ldw	r23,52(sp)
    9838:	dd800c17 	ldw	r22,48(sp)
    983c:	dd400b17 	ldw	r21,44(sp)
    9840:	dd000a17 	ldw	r20,40(sp)
    9844:	dcc00917 	ldw	r19,36(sp)
    9848:	dc800817 	ldw	r18,32(sp)
    984c:	dc400717 	ldw	r17,28(sp)
    9850:	dc000617 	ldw	r16,24(sp)
    9854:	dec01004 	addi	sp,sp,64
    9858:	f800283a 	ret
    985c:	2404b03a 	or	r2,r4,r16
    9860:	2023883a 	mov	r17,r4
    9864:	10003f26 	beq	r2,zero,9964 <__divdf3+0x2d8>
    9868:	80015e26 	beq	r16,zero,9de4 <__divdf3+0x758>
    986c:	8009883a 	mov	r4,r16
    9870:	d9800215 	stw	r6,8(sp)
    9874:	d9c00515 	stw	r7,20(sp)
    9878:	da000415 	stw	r8,16(sp)
    987c:	000b3c80 	call	b3c8 <__clzsi2>
    9880:	d9800217 	ldw	r6,8(sp)
    9884:	d9c00517 	ldw	r7,20(sp)
    9888:	da000417 	ldw	r8,16(sp)
    988c:	113ffd44 	addi	r4,r2,-11
    9890:	00c00704 	movi	r3,28
    9894:	19014f16 	blt	r3,r4,9dd4 <__divdf3+0x748>
    9898:	00c00744 	movi	r3,29
    989c:	157ffe04 	addi	r21,r2,-8
    98a0:	1907c83a 	sub	r3,r3,r4
    98a4:	8560983a 	sll	r16,r16,r21
    98a8:	88c6d83a 	srl	r3,r17,r3
    98ac:	8d6a983a 	sll	r21,r17,r21
    98b0:	1c20b03a 	or	r16,r3,r16
    98b4:	1080fcc4 	addi	r2,r2,1011
    98b8:	00a5c83a 	sub	r18,zero,r2
    98bc:	0013883a 	mov	r9,zero
    98c0:	000b883a 	mov	r5,zero
    98c4:	003f8f06 	br	9704 <__alt_data_end+0xf4009704>
    98c8:	3444b03a 	or	r2,r6,r17
    98cc:	1000231e 	bne	r2,zero,995c <__divdf3+0x2d0>
    98d0:	0023883a 	mov	r17,zero
    98d4:	0029883a 	mov	r20,zero
    98d8:	01c00084 	movi	r7,2
    98dc:	003f9b06 	br	974c <__alt_data_end+0xf400974c>
    98e0:	3444b03a 	or	r2,r6,r17
    98e4:	10001926 	beq	r2,zero,994c <__divdf3+0x2c0>
    98e8:	88014b26 	beq	r17,zero,9e18 <__divdf3+0x78c>
    98ec:	8809883a 	mov	r4,r17
    98f0:	d9400115 	stw	r5,4(sp)
    98f4:	d9800215 	stw	r6,8(sp)
    98f8:	da000415 	stw	r8,16(sp)
    98fc:	da400315 	stw	r9,12(sp)
    9900:	000b3c80 	call	b3c8 <__clzsi2>
    9904:	d9400117 	ldw	r5,4(sp)
    9908:	d9800217 	ldw	r6,8(sp)
    990c:	da000417 	ldw	r8,16(sp)
    9910:	da400317 	ldw	r9,12(sp)
    9914:	113ffd44 	addi	r4,r2,-11
    9918:	00c00704 	movi	r3,28
    991c:	19013a16 	blt	r3,r4,9e08 <__divdf3+0x77c>
    9920:	00c00744 	movi	r3,29
    9924:	153ffe04 	addi	r20,r2,-8
    9928:	1907c83a 	sub	r3,r3,r4
    992c:	8d22983a 	sll	r17,r17,r20
    9930:	30c6d83a 	srl	r3,r6,r3
    9934:	3528983a 	sll	r20,r6,r20
    9938:	1c62b03a 	or	r17,r3,r17
    993c:	1080fcc4 	addi	r2,r2,1011
    9940:	0087c83a 	sub	r3,zero,r2
    9944:	000f883a 	mov	r7,zero
    9948:	003f8006 	br	974c <__alt_data_end+0xf400974c>
    994c:	0023883a 	mov	r17,zero
    9950:	0029883a 	mov	r20,zero
    9954:	01c00044 	movi	r7,1
    9958:	003f7c06 	br	974c <__alt_data_end+0xf400974c>
    995c:	01c000c4 	movi	r7,3
    9960:	003f7a06 	br	974c <__alt_data_end+0xf400974c>
    9964:	02400104 	movi	r9,4
    9968:	0021883a 	mov	r16,zero
    996c:	002b883a 	mov	r21,zero
    9970:	01400044 	movi	r5,1
    9974:	003f6306 	br	9704 <__alt_data_end+0xf4009704>
    9978:	02400304 	movi	r9,12
    997c:	014000c4 	movi	r5,3
    9980:	003f6006 	br	9704 <__alt_data_end+0xf4009704>
    9984:	04000434 	movhi	r16,16
    9988:	0009883a 	mov	r4,zero
    998c:	843fffc4 	addi	r16,r16,-1
    9990:	057fffc4 	movi	r21,-1
    9994:	0081ffc4 	movi	r2,2047
    9998:	003f9b06 	br	9808 <__alt_data_end+0xf4009808>
    999c:	00c00044 	movi	r3,1
    99a0:	1887c83a 	sub	r3,r3,r2
    99a4:	01000e04 	movi	r4,56
    99a8:	20c1530e 	bge	r4,r3,9ef8 <__divdf3+0x86c>
    99ac:	9900004c 	andi	r4,r19,1
    99b0:	0005883a 	mov	r2,zero
    99b4:	0021883a 	mov	r16,zero
    99b8:	002b883a 	mov	r21,zero
    99bc:	003f9206 	br	9808 <__alt_data_end+0xf4009808>
    99c0:	8c012e36 	bltu	r17,r16,9e7c <__divdf3+0x7f0>
    99c4:	84412c26 	beq	r16,r17,9e78 <__divdf3+0x7ec>
    99c8:	a82f883a 	mov	r23,r21
    99cc:	18ffffc4 	addi	r3,r3,-1
    99d0:	002b883a 	mov	r21,zero
    99d4:	a004d63a 	srli	r2,r20,24
    99d8:	8822923a 	slli	r17,r17,8
    99dc:	a028923a 	slli	r20,r20,8
    99e0:	8009883a 	mov	r4,r16
    99e4:	88acb03a 	or	r22,r17,r2
    99e8:	dd000015 	stw	r20,0(sp)
    99ec:	b028d43a 	srli	r20,r22,16
    99f0:	d8c00215 	stw	r3,8(sp)
    99f4:	b4bfffcc 	andi	r18,r22,65535
    99f8:	a00b883a 	mov	r5,r20
    99fc:	000b5240 	call	b524 <__udivsi3>
    9a00:	100b883a 	mov	r5,r2
    9a04:	9009883a 	mov	r4,r18
    9a08:	1023883a 	mov	r17,r2
    9a0c:	00096640 	call	9664 <__mulsi3>
    9a10:	8009883a 	mov	r4,r16
    9a14:	a00b883a 	mov	r5,r20
    9a18:	1039883a 	mov	fp,r2
    9a1c:	000b5880 	call	b588 <__umodsi3>
    9a20:	1004943a 	slli	r2,r2,16
    9a24:	b808d43a 	srli	r4,r23,16
    9a28:	d8c00217 	ldw	r3,8(sp)
    9a2c:	2084b03a 	or	r2,r4,r2
    9a30:	1700062e 	bgeu	r2,fp,9a4c <__divdf3+0x3c0>
    9a34:	1585883a 	add	r2,r2,r22
    9a38:	893fffc4 	addi	r4,r17,-1
    9a3c:	15811d36 	bltu	r2,r22,9eb4 <__divdf3+0x828>
    9a40:	17011c2e 	bgeu	r2,fp,9eb4 <__divdf3+0x828>
    9a44:	8c7fff84 	addi	r17,r17,-2
    9a48:	1585883a 	add	r2,r2,r22
    9a4c:	1739c83a 	sub	fp,r2,fp
    9a50:	a00b883a 	mov	r5,r20
    9a54:	e009883a 	mov	r4,fp
    9a58:	d8c00215 	stw	r3,8(sp)
    9a5c:	000b5240 	call	b524 <__udivsi3>
    9a60:	100b883a 	mov	r5,r2
    9a64:	9009883a 	mov	r4,r18
    9a68:	1021883a 	mov	r16,r2
    9a6c:	00096640 	call	9664 <__mulsi3>
    9a70:	a00b883a 	mov	r5,r20
    9a74:	e009883a 	mov	r4,fp
    9a78:	d8800415 	stw	r2,16(sp)
    9a7c:	000b5880 	call	b588 <__umodsi3>
    9a80:	1004943a 	slli	r2,r2,16
    9a84:	da000417 	ldw	r8,16(sp)
    9a88:	bdffffcc 	andi	r23,r23,65535
    9a8c:	b884b03a 	or	r2,r23,r2
    9a90:	d8c00217 	ldw	r3,8(sp)
    9a94:	1200062e 	bgeu	r2,r8,9ab0 <__divdf3+0x424>
    9a98:	1585883a 	add	r2,r2,r22
    9a9c:	813fffc4 	addi	r4,r16,-1
    9aa0:	15810236 	bltu	r2,r22,9eac <__divdf3+0x820>
    9aa4:	1201012e 	bgeu	r2,r8,9eac <__divdf3+0x820>
    9aa8:	843fff84 	addi	r16,r16,-2
    9aac:	1585883a 	add	r2,r2,r22
    9ab0:	8822943a 	slli	r17,r17,16
    9ab4:	d9800017 	ldw	r6,0(sp)
    9ab8:	1211c83a 	sub	r8,r2,r8
    9abc:	8c22b03a 	or	r17,r17,r16
    9ac0:	373fffcc 	andi	fp,r6,65535
    9ac4:	8abfffcc 	andi	r10,r17,65535
    9ac8:	8820d43a 	srli	r16,r17,16
    9acc:	5009883a 	mov	r4,r10
    9ad0:	e00b883a 	mov	r5,fp
    9ad4:	302ed43a 	srli	r23,r6,16
    9ad8:	d8c00215 	stw	r3,8(sp)
    9adc:	da000415 	stw	r8,16(sp)
    9ae0:	da800115 	stw	r10,4(sp)
    9ae4:	00096640 	call	9664 <__mulsi3>
    9ae8:	800b883a 	mov	r5,r16
    9aec:	e009883a 	mov	r4,fp
    9af0:	d8800515 	stw	r2,20(sp)
    9af4:	00096640 	call	9664 <__mulsi3>
    9af8:	8009883a 	mov	r4,r16
    9afc:	b80b883a 	mov	r5,r23
    9b00:	d8800315 	stw	r2,12(sp)
    9b04:	00096640 	call	9664 <__mulsi3>
    9b08:	da800117 	ldw	r10,4(sp)
    9b0c:	b80b883a 	mov	r5,r23
    9b10:	1021883a 	mov	r16,r2
    9b14:	5009883a 	mov	r4,r10
    9b18:	00096640 	call	9664 <__mulsi3>
    9b1c:	d9c00517 	ldw	r7,20(sp)
    9b20:	da400317 	ldw	r9,12(sp)
    9b24:	d8c00217 	ldw	r3,8(sp)
    9b28:	3808d43a 	srli	r4,r7,16
    9b2c:	1245883a 	add	r2,r2,r9
    9b30:	da000417 	ldw	r8,16(sp)
    9b34:	2085883a 	add	r2,r4,r2
    9b38:	1240022e 	bgeu	r2,r9,9b44 <__divdf3+0x4b8>
    9b3c:	01000074 	movhi	r4,1
    9b40:	8121883a 	add	r16,r16,r4
    9b44:	1008d43a 	srli	r4,r2,16
    9b48:	1004943a 	slli	r2,r2,16
    9b4c:	39ffffcc 	andi	r7,r7,65535
    9b50:	2409883a 	add	r4,r4,r16
    9b54:	11c5883a 	add	r2,r2,r7
    9b58:	4100bb36 	bltu	r8,r4,9e48 <__divdf3+0x7bc>
    9b5c:	4100d726 	beq	r8,r4,9ebc <__divdf3+0x830>
    9b60:	4109c83a 	sub	r4,r8,r4
    9b64:	a8a1c83a 	sub	r16,r21,r2
    9b68:	ac2b803a 	cmpltu	r21,r21,r16
    9b6c:	256bc83a 	sub	r21,r4,r21
    9b70:	b540d926 	beq	r22,r21,9ed8 <__divdf3+0x84c>
    9b74:	a00b883a 	mov	r5,r20
    9b78:	a809883a 	mov	r4,r21
    9b7c:	d8c00215 	stw	r3,8(sp)
    9b80:	000b5240 	call	b524 <__udivsi3>
    9b84:	100b883a 	mov	r5,r2
    9b88:	9009883a 	mov	r4,r18
    9b8c:	d8800515 	stw	r2,20(sp)
    9b90:	00096640 	call	9664 <__mulsi3>
    9b94:	a809883a 	mov	r4,r21
    9b98:	a00b883a 	mov	r5,r20
    9b9c:	d8800415 	stw	r2,16(sp)
    9ba0:	000b5880 	call	b588 <__umodsi3>
    9ba4:	1004943a 	slli	r2,r2,16
    9ba8:	8008d43a 	srli	r4,r16,16
    9bac:	da000417 	ldw	r8,16(sp)
    9bb0:	d8c00217 	ldw	r3,8(sp)
    9bb4:	2084b03a 	or	r2,r4,r2
    9bb8:	d9c00517 	ldw	r7,20(sp)
    9bbc:	1200062e 	bgeu	r2,r8,9bd8 <__divdf3+0x54c>
    9bc0:	1585883a 	add	r2,r2,r22
    9bc4:	393fffc4 	addi	r4,r7,-1
    9bc8:	1580c536 	bltu	r2,r22,9ee0 <__divdf3+0x854>
    9bcc:	1200c42e 	bgeu	r2,r8,9ee0 <__divdf3+0x854>
    9bd0:	39ffff84 	addi	r7,r7,-2
    9bd4:	1585883a 	add	r2,r2,r22
    9bd8:	122bc83a 	sub	r21,r2,r8
    9bdc:	a00b883a 	mov	r5,r20
    9be0:	a809883a 	mov	r4,r21
    9be4:	d8c00215 	stw	r3,8(sp)
    9be8:	d9c00515 	stw	r7,20(sp)
    9bec:	000b5240 	call	b524 <__udivsi3>
    9bf0:	9009883a 	mov	r4,r18
    9bf4:	100b883a 	mov	r5,r2
    9bf8:	d8800415 	stw	r2,16(sp)
    9bfc:	00096640 	call	9664 <__mulsi3>
    9c00:	a809883a 	mov	r4,r21
    9c04:	a00b883a 	mov	r5,r20
    9c08:	1025883a 	mov	r18,r2
    9c0c:	000b5880 	call	b588 <__umodsi3>
    9c10:	1004943a 	slli	r2,r2,16
    9c14:	813fffcc 	andi	r4,r16,65535
    9c18:	d8c00217 	ldw	r3,8(sp)
    9c1c:	20a0b03a 	or	r16,r4,r2
    9c20:	d9c00517 	ldw	r7,20(sp)
    9c24:	da000417 	ldw	r8,16(sp)
    9c28:	8480062e 	bgeu	r16,r18,9c44 <__divdf3+0x5b8>
    9c2c:	85a1883a 	add	r16,r16,r22
    9c30:	40bfffc4 	addi	r2,r8,-1
    9c34:	8580ac36 	bltu	r16,r22,9ee8 <__divdf3+0x85c>
    9c38:	8480ab2e 	bgeu	r16,r18,9ee8 <__divdf3+0x85c>
    9c3c:	423fff84 	addi	r8,r8,-2
    9c40:	85a1883a 	add	r16,r16,r22
    9c44:	3804943a 	slli	r2,r7,16
    9c48:	84a1c83a 	sub	r16,r16,r18
    9c4c:	e009883a 	mov	r4,fp
    9c50:	1228b03a 	or	r20,r2,r8
    9c54:	a1ffffcc 	andi	r7,r20,65535
    9c58:	a024d43a 	srli	r18,r20,16
    9c5c:	380b883a 	mov	r5,r7
    9c60:	d8c00215 	stw	r3,8(sp)
    9c64:	d9c00515 	stw	r7,20(sp)
    9c68:	00096640 	call	9664 <__mulsi3>
    9c6c:	900b883a 	mov	r5,r18
    9c70:	e009883a 	mov	r4,fp
    9c74:	102b883a 	mov	r21,r2
    9c78:	00096640 	call	9664 <__mulsi3>
    9c7c:	900b883a 	mov	r5,r18
    9c80:	b809883a 	mov	r4,r23
    9c84:	1039883a 	mov	fp,r2
    9c88:	00096640 	call	9664 <__mulsi3>
    9c8c:	d9c00517 	ldw	r7,20(sp)
    9c90:	b80b883a 	mov	r5,r23
    9c94:	1025883a 	mov	r18,r2
    9c98:	3809883a 	mov	r4,r7
    9c9c:	00096640 	call	9664 <__mulsi3>
    9ca0:	a808d43a 	srli	r4,r21,16
    9ca4:	1705883a 	add	r2,r2,fp
    9ca8:	d8c00217 	ldw	r3,8(sp)
    9cac:	2085883a 	add	r2,r4,r2
    9cb0:	1700022e 	bgeu	r2,fp,9cbc <__divdf3+0x630>
    9cb4:	01000074 	movhi	r4,1
    9cb8:	9125883a 	add	r18,r18,r4
    9cbc:	1008d43a 	srli	r4,r2,16
    9cc0:	1004943a 	slli	r2,r2,16
    9cc4:	ad7fffcc 	andi	r21,r21,65535
    9cc8:	2489883a 	add	r4,r4,r18
    9ccc:	1545883a 	add	r2,r2,r21
    9cd0:	81003836 	bltu	r16,r4,9db4 <__divdf3+0x728>
    9cd4:	81003626 	beq	r16,r4,9db0 <__divdf3+0x724>
    9cd8:	a5000054 	ori	r20,r20,1
    9cdc:	1880ffc4 	addi	r2,r3,1023
    9ce0:	00bf2e0e 	bge	zero,r2,999c <__alt_data_end+0xf400999c>
    9ce4:	a10001cc 	andi	r4,r20,7
    9ce8:	20000726 	beq	r4,zero,9d08 <__divdf3+0x67c>
    9cec:	a10003cc 	andi	r4,r20,15
    9cf0:	01400104 	movi	r5,4
    9cf4:	21400426 	beq	r4,r5,9d08 <__divdf3+0x67c>
    9cf8:	a149883a 	add	r4,r20,r5
    9cfc:	2529803a 	cmpltu	r20,r4,r20
    9d00:	8d23883a 	add	r17,r17,r20
    9d04:	2029883a 	mov	r20,r4
    9d08:	8900402c 	andhi	r4,r17,256
    9d0c:	20000426 	beq	r4,zero,9d20 <__divdf3+0x694>
    9d10:	18810004 	addi	r2,r3,1024
    9d14:	00ffc034 	movhi	r3,65280
    9d18:	18ffffc4 	addi	r3,r3,-1
    9d1c:	88e2703a 	and	r17,r17,r3
    9d20:	00c1ff84 	movi	r3,2046
    9d24:	18beb416 	blt	r3,r2,97f8 <__alt_data_end+0xf40097f8>
    9d28:	a028d0fa 	srli	r20,r20,3
    9d2c:	882a977a 	slli	r21,r17,29
    9d30:	8820927a 	slli	r16,r17,9
    9d34:	1081ffcc 	andi	r2,r2,2047
    9d38:	ad2ab03a 	or	r21,r21,r20
    9d3c:	8020d33a 	srli	r16,r16,12
    9d40:	9900004c 	andi	r4,r19,1
    9d44:	003eb006 	br	9808 <__alt_data_end+0xf4009808>
    9d48:	8080022c 	andhi	r2,r16,8
    9d4c:	10001226 	beq	r2,zero,9d98 <__divdf3+0x70c>
    9d50:	8880022c 	andhi	r2,r17,8
    9d54:	1000101e 	bne	r2,zero,9d98 <__divdf3+0x70c>
    9d58:	00800434 	movhi	r2,16
    9d5c:	8c000234 	orhi	r16,r17,8
    9d60:	10bfffc4 	addi	r2,r2,-1
    9d64:	b809883a 	mov	r4,r23
    9d68:	80a0703a 	and	r16,r16,r2
    9d6c:	a02b883a 	mov	r21,r20
    9d70:	003f0806 	br	9994 <__alt_data_end+0xf4009994>
    9d74:	008000c4 	movi	r2,3
    9d78:	3880b126 	beq	r7,r2,a040 <__divdf3+0x9b4>
    9d7c:	00800044 	movi	r2,1
    9d80:	38805b1e 	bne	r7,r2,9ef0 <__divdf3+0x864>
    9d84:	e009883a 	mov	r4,fp
    9d88:	0005883a 	mov	r2,zero
    9d8c:	0021883a 	mov	r16,zero
    9d90:	002b883a 	mov	r21,zero
    9d94:	003e9c06 	br	9808 <__alt_data_end+0xf4009808>
    9d98:	00800434 	movhi	r2,16
    9d9c:	84000234 	orhi	r16,r16,8
    9da0:	10bfffc4 	addi	r2,r2,-1
    9da4:	b009883a 	mov	r4,r22
    9da8:	80a0703a 	and	r16,r16,r2
    9dac:	003ef906 	br	9994 <__alt_data_end+0xf4009994>
    9db0:	103fca26 	beq	r2,zero,9cdc <__alt_data_end+0xf4009cdc>
    9db4:	b421883a 	add	r16,r22,r16
    9db8:	a17fffc4 	addi	r5,r20,-1
    9dbc:	8580422e 	bgeu	r16,r22,9ec8 <__divdf3+0x83c>
    9dc0:	2829883a 	mov	r20,r5
    9dc4:	813fc41e 	bne	r16,r4,9cd8 <__alt_data_end+0xf4009cd8>
    9dc8:	d9800017 	ldw	r6,0(sp)
    9dcc:	30bfc21e 	bne	r6,r2,9cd8 <__alt_data_end+0xf4009cd8>
    9dd0:	003fc206 	br	9cdc <__alt_data_end+0xf4009cdc>
    9dd4:	143ff604 	addi	r16,r2,-40
    9dd8:	8c20983a 	sll	r16,r17,r16
    9ddc:	002b883a 	mov	r21,zero
    9de0:	003eb406 	br	98b4 <__alt_data_end+0xf40098b4>
    9de4:	d9800215 	stw	r6,8(sp)
    9de8:	d9c00515 	stw	r7,20(sp)
    9dec:	da000415 	stw	r8,16(sp)
    9df0:	000b3c80 	call	b3c8 <__clzsi2>
    9df4:	10800804 	addi	r2,r2,32
    9df8:	da000417 	ldw	r8,16(sp)
    9dfc:	d9c00517 	ldw	r7,20(sp)
    9e00:	d9800217 	ldw	r6,8(sp)
    9e04:	003ea106 	br	988c <__alt_data_end+0xf400988c>
    9e08:	147ff604 	addi	r17,r2,-40
    9e0c:	3462983a 	sll	r17,r6,r17
    9e10:	0029883a 	mov	r20,zero
    9e14:	003ec906 	br	993c <__alt_data_end+0xf400993c>
    9e18:	3009883a 	mov	r4,r6
    9e1c:	d9400115 	stw	r5,4(sp)
    9e20:	d9800215 	stw	r6,8(sp)
    9e24:	da000415 	stw	r8,16(sp)
    9e28:	da400315 	stw	r9,12(sp)
    9e2c:	000b3c80 	call	b3c8 <__clzsi2>
    9e30:	10800804 	addi	r2,r2,32
    9e34:	da400317 	ldw	r9,12(sp)
    9e38:	da000417 	ldw	r8,16(sp)
    9e3c:	d9800217 	ldw	r6,8(sp)
    9e40:	d9400117 	ldw	r5,4(sp)
    9e44:	003eb306 	br	9914 <__alt_data_end+0xf4009914>
    9e48:	d9800017 	ldw	r6,0(sp)
    9e4c:	a9ab883a 	add	r21,r21,r6
    9e50:	a98b803a 	cmpltu	r5,r21,r6
    9e54:	2d8b883a 	add	r5,r5,r22
    9e58:	2a11883a 	add	r8,r5,r8
    9e5c:	897fffc4 	addi	r5,r17,-1
    9e60:	b2000c2e 	bgeu	r22,r8,9e94 <__divdf3+0x808>
    9e64:	41003f36 	bltu	r8,r4,9f64 <__divdf3+0x8d8>
    9e68:	22006c26 	beq	r4,r8,a01c <__divdf3+0x990>
    9e6c:	4109c83a 	sub	r4,r8,r4
    9e70:	2823883a 	mov	r17,r5
    9e74:	003f3b06 	br	9b64 <__alt_data_end+0xf4009b64>
    9e78:	ad3ed336 	bltu	r21,r20,99c8 <__alt_data_end+0xf40099c8>
    9e7c:	a804d07a 	srli	r2,r21,1
    9e80:	802e97fa 	slli	r23,r16,31
    9e84:	a82a97fa 	slli	r21,r21,31
    9e88:	8020d07a 	srli	r16,r16,1
    9e8c:	b8aeb03a 	or	r23,r23,r2
    9e90:	003ed006 	br	99d4 <__alt_data_end+0xf40099d4>
    9e94:	b23ff51e 	bne	r22,r8,9e6c <__alt_data_end+0xf4009e6c>
    9e98:	d9800017 	ldw	r6,0(sp)
    9e9c:	a9bff12e 	bgeu	r21,r6,9e64 <__alt_data_end+0xf4009e64>
    9ea0:	b109c83a 	sub	r4,r22,r4
    9ea4:	2823883a 	mov	r17,r5
    9ea8:	003f2e06 	br	9b64 <__alt_data_end+0xf4009b64>
    9eac:	2021883a 	mov	r16,r4
    9eb0:	003eff06 	br	9ab0 <__alt_data_end+0xf4009ab0>
    9eb4:	2023883a 	mov	r17,r4
    9eb8:	003ee406 	br	9a4c <__alt_data_end+0xf4009a4c>
    9ebc:	a8bfe236 	bltu	r21,r2,9e48 <__alt_data_end+0xf4009e48>
    9ec0:	0009883a 	mov	r4,zero
    9ec4:	003f2706 	br	9b64 <__alt_data_end+0xf4009b64>
    9ec8:	81002d36 	bltu	r16,r4,9f80 <__divdf3+0x8f4>
    9ecc:	24005626 	beq	r4,r16,a028 <__divdf3+0x99c>
    9ed0:	2829883a 	mov	r20,r5
    9ed4:	003f8006 	br	9cd8 <__alt_data_end+0xf4009cd8>
    9ed8:	053fffc4 	movi	r20,-1
    9edc:	003f7f06 	br	9cdc <__alt_data_end+0xf4009cdc>
    9ee0:	200f883a 	mov	r7,r4
    9ee4:	003f3c06 	br	9bd8 <__alt_data_end+0xf4009bd8>
    9ee8:	1011883a 	mov	r8,r2
    9eec:	003f5506 	br	9c44 <__alt_data_end+0xf4009c44>
    9ef0:	e027883a 	mov	r19,fp
    9ef4:	003f7906 	br	9cdc <__alt_data_end+0xf4009cdc>
    9ef8:	010007c4 	movi	r4,31
    9efc:	20c02816 	blt	r4,r3,9fa0 <__divdf3+0x914>
    9f00:	00800804 	movi	r2,32
    9f04:	10c5c83a 	sub	r2,r2,r3
    9f08:	888a983a 	sll	r5,r17,r2
    9f0c:	a0c8d83a 	srl	r4,r20,r3
    9f10:	a084983a 	sll	r2,r20,r2
    9f14:	88e2d83a 	srl	r17,r17,r3
    9f18:	2906b03a 	or	r3,r5,r4
    9f1c:	1004c03a 	cmpne	r2,r2,zero
    9f20:	1886b03a 	or	r3,r3,r2
    9f24:	188001cc 	andi	r2,r3,7
    9f28:	10000726 	beq	r2,zero,9f48 <__divdf3+0x8bc>
    9f2c:	188003cc 	andi	r2,r3,15
    9f30:	01000104 	movi	r4,4
    9f34:	11000426 	beq	r2,r4,9f48 <__divdf3+0x8bc>
    9f38:	1805883a 	mov	r2,r3
    9f3c:	10c00104 	addi	r3,r2,4
    9f40:	1885803a 	cmpltu	r2,r3,r2
    9f44:	88a3883a 	add	r17,r17,r2
    9f48:	8880202c 	andhi	r2,r17,128
    9f4c:	10002926 	beq	r2,zero,9ff4 <__divdf3+0x968>
    9f50:	9900004c 	andi	r4,r19,1
    9f54:	00800044 	movi	r2,1
    9f58:	0021883a 	mov	r16,zero
    9f5c:	002b883a 	mov	r21,zero
    9f60:	003e2906 	br	9808 <__alt_data_end+0xf4009808>
    9f64:	d9800017 	ldw	r6,0(sp)
    9f68:	8c7fff84 	addi	r17,r17,-2
    9f6c:	a9ab883a 	add	r21,r21,r6
    9f70:	a98b803a 	cmpltu	r5,r21,r6
    9f74:	2d8b883a 	add	r5,r5,r22
    9f78:	2a11883a 	add	r8,r5,r8
    9f7c:	003ef806 	br	9b60 <__alt_data_end+0xf4009b60>
    9f80:	d9800017 	ldw	r6,0(sp)
    9f84:	318f883a 	add	r7,r6,r6
    9f88:	398b803a 	cmpltu	r5,r7,r6
    9f8c:	2d8d883a 	add	r6,r5,r22
    9f90:	81a1883a 	add	r16,r16,r6
    9f94:	a17fff84 	addi	r5,r20,-2
    9f98:	d9c00015 	stw	r7,0(sp)
    9f9c:	003f8806 	br	9dc0 <__alt_data_end+0xf4009dc0>
    9fa0:	013ff844 	movi	r4,-31
    9fa4:	2085c83a 	sub	r2,r4,r2
    9fa8:	8888d83a 	srl	r4,r17,r2
    9fac:	00800804 	movi	r2,32
    9fb0:	18802126 	beq	r3,r2,a038 <__divdf3+0x9ac>
    9fb4:	04001004 	movi	r16,64
    9fb8:	80c7c83a 	sub	r3,r16,r3
    9fbc:	88e0983a 	sll	r16,r17,r3
    9fc0:	8504b03a 	or	r2,r16,r20
    9fc4:	1004c03a 	cmpne	r2,r2,zero
    9fc8:	2084b03a 	or	r2,r4,r2
    9fcc:	144001cc 	andi	r17,r2,7
    9fd0:	88000d1e 	bne	r17,zero,a008 <__divdf3+0x97c>
    9fd4:	0021883a 	mov	r16,zero
    9fd8:	102ad0fa 	srli	r21,r2,3
    9fdc:	9900004c 	andi	r4,r19,1
    9fe0:	0005883a 	mov	r2,zero
    9fe4:	ac6ab03a 	or	r21,r21,r17
    9fe8:	003e0706 	br	9808 <__alt_data_end+0xf4009808>
    9fec:	1007883a 	mov	r3,r2
    9ff0:	0023883a 	mov	r17,zero
    9ff4:	8820927a 	slli	r16,r17,9
    9ff8:	1805883a 	mov	r2,r3
    9ffc:	8822977a 	slli	r17,r17,29
    a000:	8020d33a 	srli	r16,r16,12
    a004:	003ff406 	br	9fd8 <__alt_data_end+0xf4009fd8>
    a008:	10c003cc 	andi	r3,r2,15
    a00c:	01000104 	movi	r4,4
    a010:	193ff626 	beq	r3,r4,9fec <__alt_data_end+0xf4009fec>
    a014:	0023883a 	mov	r17,zero
    a018:	003fc806 	br	9f3c <__alt_data_end+0xf4009f3c>
    a01c:	a8bfd136 	bltu	r21,r2,9f64 <__alt_data_end+0xf4009f64>
    a020:	2823883a 	mov	r17,r5
    a024:	003fa606 	br	9ec0 <__alt_data_end+0xf4009ec0>
    a028:	d9800017 	ldw	r6,0(sp)
    a02c:	30bfd436 	bltu	r6,r2,9f80 <__alt_data_end+0xf4009f80>
    a030:	2829883a 	mov	r20,r5
    a034:	003f6406 	br	9dc8 <__alt_data_end+0xf4009dc8>
    a038:	0021883a 	mov	r16,zero
    a03c:	003fe006 	br	9fc0 <__alt_data_end+0xf4009fc0>
    a040:	00800434 	movhi	r2,16
    a044:	8c000234 	orhi	r16,r17,8
    a048:	10bfffc4 	addi	r2,r2,-1
    a04c:	e009883a 	mov	r4,fp
    a050:	80a0703a 	and	r16,r16,r2
    a054:	a02b883a 	mov	r21,r20
    a058:	003e4e06 	br	9994 <__alt_data_end+0xf4009994>

0000a05c <__gedf2>:
    a05c:	2804d53a 	srli	r2,r5,20
    a060:	3806d53a 	srli	r3,r7,20
    a064:	02000434 	movhi	r8,16
    a068:	423fffc4 	addi	r8,r8,-1
    a06c:	1081ffcc 	andi	r2,r2,2047
    a070:	0241ffc4 	movi	r9,2047
    a074:	2a14703a 	and	r10,r5,r8
    a078:	18c1ffcc 	andi	r3,r3,2047
    a07c:	3a10703a 	and	r8,r7,r8
    a080:	280ad7fa 	srli	r5,r5,31
    a084:	380ed7fa 	srli	r7,r7,31
    a088:	12401d26 	beq	r2,r9,a100 <__gedf2+0xa4>
    a08c:	0241ffc4 	movi	r9,2047
    a090:	1a401226 	beq	r3,r9,a0dc <__gedf2+0x80>
    a094:	1000081e 	bne	r2,zero,a0b8 <__gedf2+0x5c>
    a098:	2296b03a 	or	r11,r4,r10
    a09c:	5813003a 	cmpeq	r9,r11,zero
    a0a0:	1800091e 	bne	r3,zero,a0c8 <__gedf2+0x6c>
    a0a4:	3218b03a 	or	r12,r6,r8
    a0a8:	6000071e 	bne	r12,zero,a0c8 <__gedf2+0x6c>
    a0ac:	0005883a 	mov	r2,zero
    a0b0:	5800101e 	bne	r11,zero,a0f4 <__gedf2+0x98>
    a0b4:	f800283a 	ret
    a0b8:	18000c1e 	bne	r3,zero,a0ec <__gedf2+0x90>
    a0bc:	3212b03a 	or	r9,r6,r8
    a0c0:	48000c26 	beq	r9,zero,a0f4 <__gedf2+0x98>
    a0c4:	0013883a 	mov	r9,zero
    a0c8:	39c03fcc 	andi	r7,r7,255
    a0cc:	48000826 	beq	r9,zero,a0f0 <__gedf2+0x94>
    a0d0:	38000926 	beq	r7,zero,a0f8 <__gedf2+0x9c>
    a0d4:	00800044 	movi	r2,1
    a0d8:	f800283a 	ret
    a0dc:	3212b03a 	or	r9,r6,r8
    a0e0:	483fec26 	beq	r9,zero,a094 <__alt_data_end+0xf400a094>
    a0e4:	00bfff84 	movi	r2,-2
    a0e8:	f800283a 	ret
    a0ec:	39c03fcc 	andi	r7,r7,255
    a0f0:	29c00626 	beq	r5,r7,a10c <__gedf2+0xb0>
    a0f4:	283ff726 	beq	r5,zero,a0d4 <__alt_data_end+0xf400a0d4>
    a0f8:	00bfffc4 	movi	r2,-1
    a0fc:	f800283a 	ret
    a100:	2292b03a 	or	r9,r4,r10
    a104:	483fe126 	beq	r9,zero,a08c <__alt_data_end+0xf400a08c>
    a108:	003ff606 	br	a0e4 <__alt_data_end+0xf400a0e4>
    a10c:	18bff916 	blt	r3,r2,a0f4 <__alt_data_end+0xf400a0f4>
    a110:	10c00316 	blt	r2,r3,a120 <__gedf2+0xc4>
    a114:	42bff736 	bltu	r8,r10,a0f4 <__alt_data_end+0xf400a0f4>
    a118:	52000326 	beq	r10,r8,a128 <__gedf2+0xcc>
    a11c:	5200042e 	bgeu	r10,r8,a130 <__gedf2+0xd4>
    a120:	283fec1e 	bne	r5,zero,a0d4 <__alt_data_end+0xf400a0d4>
    a124:	003ff406 	br	a0f8 <__alt_data_end+0xf400a0f8>
    a128:	313ff236 	bltu	r6,r4,a0f4 <__alt_data_end+0xf400a0f4>
    a12c:	21bffc36 	bltu	r4,r6,a120 <__alt_data_end+0xf400a120>
    a130:	0005883a 	mov	r2,zero
    a134:	f800283a 	ret

0000a138 <__muldf3>:
    a138:	deffee04 	addi	sp,sp,-72
    a13c:	dd000c15 	stw	r20,48(sp)
    a140:	2828d53a 	srli	r20,r5,20
    a144:	ddc00f15 	stw	r23,60(sp)
    a148:	282ed7fa 	srli	r23,r5,31
    a14c:	dc000815 	stw	r16,32(sp)
    a150:	04000434 	movhi	r16,16
    a154:	dcc00b15 	stw	r19,44(sp)
    a158:	843fffc4 	addi	r16,r16,-1
    a15c:	dfc01115 	stw	ra,68(sp)
    a160:	df001015 	stw	fp,64(sp)
    a164:	dd800e15 	stw	r22,56(sp)
    a168:	dd400d15 	stw	r21,52(sp)
    a16c:	dc800a15 	stw	r18,40(sp)
    a170:	dc400915 	stw	r17,36(sp)
    a174:	a501ffcc 	andi	r20,r20,2047
    a178:	2c20703a 	and	r16,r5,r16
    a17c:	b827883a 	mov	r19,r23
    a180:	ba403fcc 	andi	r9,r23,255
    a184:	a0006026 	beq	r20,zero,a308 <__muldf3+0x1d0>
    a188:	0081ffc4 	movi	r2,2047
    a18c:	202d883a 	mov	r22,r4
    a190:	a0803626 	beq	r20,r2,a26c <__muldf3+0x134>
    a194:	84000434 	orhi	r16,r16,16
    a198:	200ad77a 	srli	r5,r4,29
    a19c:	800490fa 	slli	r2,r16,3
    a1a0:	202c90fa 	slli	r22,r4,3
    a1a4:	a53f0044 	addi	r20,r20,-1023
    a1a8:	28a0b03a 	or	r16,r5,r2
    a1ac:	002b883a 	mov	r21,zero
    a1b0:	000b883a 	mov	r5,zero
    a1b4:	3804d53a 	srli	r2,r7,20
    a1b8:	3838d7fa 	srli	fp,r7,31
    a1bc:	04400434 	movhi	r17,16
    a1c0:	8c7fffc4 	addi	r17,r17,-1
    a1c4:	1081ffcc 	andi	r2,r2,2047
    a1c8:	3025883a 	mov	r18,r6
    a1cc:	3c62703a 	and	r17,r7,r17
    a1d0:	e2803fcc 	andi	r10,fp,255
    a1d4:	10006d26 	beq	r2,zero,a38c <__muldf3+0x254>
    a1d8:	00c1ffc4 	movi	r3,2047
    a1dc:	10c06526 	beq	r2,r3,a374 <__muldf3+0x23c>
    a1e0:	8c400434 	orhi	r17,r17,16
    a1e4:	300ed77a 	srli	r7,r6,29
    a1e8:	880690fa 	slli	r3,r17,3
    a1ec:	302490fa 	slli	r18,r6,3
    a1f0:	10bf0044 	addi	r2,r2,-1023
    a1f4:	38e2b03a 	or	r17,r7,r3
    a1f8:	000f883a 	mov	r7,zero
    a1fc:	a087883a 	add	r3,r20,r2
    a200:	010003c4 	movi	r4,15
    a204:	3d44b03a 	or	r2,r7,r21
    a208:	e5ccf03a 	xor	r6,fp,r23
    a20c:	1a000044 	addi	r8,r3,1
    a210:	20809b36 	bltu	r4,r2,a480 <__muldf3+0x348>
    a214:	100490ba 	slli	r2,r2,2
    a218:	01000074 	movhi	r4,1
    a21c:	21288b04 	addi	r4,r4,-24020
    a220:	1105883a 	add	r2,r2,r4
    a224:	10800017 	ldw	r2,0(r2)
    a228:	1000683a 	jmp	r2
    a22c:	0000a480 	call	a48 <__alt_mem_onchip_memory2_0-0x75b8>
    a230:	0000a28c 	andi	zero,zero,650
    a234:	0000a28c 	andi	zero,zero,650
    a238:	0000a288 	cmpgei	zero,zero,650
    a23c:	0000a45c 	xori	zero,zero,657
    a240:	0000a45c 	xori	zero,zero,657
    a244:	0000a444 	movi	zero,657
    a248:	0000a288 	cmpgei	zero,zero,650
    a24c:	0000a45c 	xori	zero,zero,657
    a250:	0000a444 	movi	zero,657
    a254:	0000a45c 	xori	zero,zero,657
    a258:	0000a288 	cmpgei	zero,zero,650
    a25c:	0000a46c 	andhi	zero,zero,657
    a260:	0000a46c 	andhi	zero,zero,657
    a264:	0000a46c 	andhi	zero,zero,657
    a268:	0000a7cc 	andi	zero,zero,671
    a26c:	2404b03a 	or	r2,r4,r16
    a270:	1000711e 	bne	r2,zero,a438 <__muldf3+0x300>
    a274:	05400204 	movi	r21,8
    a278:	0021883a 	mov	r16,zero
    a27c:	002d883a 	mov	r22,zero
    a280:	01400084 	movi	r5,2
    a284:	003fcb06 	br	a1b4 <__alt_data_end+0xf400a1b4>
    a288:	500d883a 	mov	r6,r10
    a28c:	00800084 	movi	r2,2
    a290:	38805926 	beq	r7,r2,a3f8 <__muldf3+0x2c0>
    a294:	008000c4 	movi	r2,3
    a298:	3881bb26 	beq	r7,r2,a988 <__muldf3+0x850>
    a29c:	00800044 	movi	r2,1
    a2a0:	3881961e 	bne	r7,r2,a8fc <__muldf3+0x7c4>
    a2a4:	3027883a 	mov	r19,r6
    a2a8:	0005883a 	mov	r2,zero
    a2ac:	0021883a 	mov	r16,zero
    a2b0:	002d883a 	mov	r22,zero
    a2b4:	1004953a 	slli	r2,r2,20
    a2b8:	98c03fcc 	andi	r3,r19,255
    a2bc:	04400434 	movhi	r17,16
    a2c0:	8c7fffc4 	addi	r17,r17,-1
    a2c4:	180697fa 	slli	r3,r3,31
    a2c8:	8460703a 	and	r16,r16,r17
    a2cc:	80a0b03a 	or	r16,r16,r2
    a2d0:	80c6b03a 	or	r3,r16,r3
    a2d4:	b005883a 	mov	r2,r22
    a2d8:	dfc01117 	ldw	ra,68(sp)
    a2dc:	df001017 	ldw	fp,64(sp)
    a2e0:	ddc00f17 	ldw	r23,60(sp)
    a2e4:	dd800e17 	ldw	r22,56(sp)
    a2e8:	dd400d17 	ldw	r21,52(sp)
    a2ec:	dd000c17 	ldw	r20,48(sp)
    a2f0:	dcc00b17 	ldw	r19,44(sp)
    a2f4:	dc800a17 	ldw	r18,40(sp)
    a2f8:	dc400917 	ldw	r17,36(sp)
    a2fc:	dc000817 	ldw	r16,32(sp)
    a300:	dec01204 	addi	sp,sp,72
    a304:	f800283a 	ret
    a308:	2404b03a 	or	r2,r4,r16
    a30c:	202b883a 	mov	r21,r4
    a310:	10004426 	beq	r2,zero,a424 <__muldf3+0x2ec>
    a314:	80015126 	beq	r16,zero,a85c <__muldf3+0x724>
    a318:	8009883a 	mov	r4,r16
    a31c:	d9800715 	stw	r6,28(sp)
    a320:	d9c00215 	stw	r7,8(sp)
    a324:	da400415 	stw	r9,16(sp)
    a328:	000b3c80 	call	b3c8 <__clzsi2>
    a32c:	d9800717 	ldw	r6,28(sp)
    a330:	d9c00217 	ldw	r7,8(sp)
    a334:	da400417 	ldw	r9,16(sp)
    a338:	113ffd44 	addi	r4,r2,-11
    a33c:	00c00704 	movi	r3,28
    a340:	19014216 	blt	r3,r4,a84c <__muldf3+0x714>
    a344:	00c00744 	movi	r3,29
    a348:	15bffe04 	addi	r22,r2,-8
    a34c:	1907c83a 	sub	r3,r3,r4
    a350:	85a0983a 	sll	r16,r16,r22
    a354:	a8c6d83a 	srl	r3,r21,r3
    a358:	adac983a 	sll	r22,r21,r22
    a35c:	1c20b03a 	or	r16,r3,r16
    a360:	1080fcc4 	addi	r2,r2,1011
    a364:	00a9c83a 	sub	r20,zero,r2
    a368:	002b883a 	mov	r21,zero
    a36c:	000b883a 	mov	r5,zero
    a370:	003f9006 	br	a1b4 <__alt_data_end+0xf400a1b4>
    a374:	3446b03a 	or	r3,r6,r17
    a378:	1800281e 	bne	r3,zero,a41c <__muldf3+0x2e4>
    a37c:	0023883a 	mov	r17,zero
    a380:	0025883a 	mov	r18,zero
    a384:	01c00084 	movi	r7,2
    a388:	003f9c06 	br	a1fc <__alt_data_end+0xf400a1fc>
    a38c:	3446b03a 	or	r3,r6,r17
    a390:	18001e26 	beq	r3,zero,a40c <__muldf3+0x2d4>
    a394:	88012126 	beq	r17,zero,a81c <__muldf3+0x6e4>
    a398:	8809883a 	mov	r4,r17
    a39c:	d9400215 	stw	r5,8(sp)
    a3a0:	d9800715 	stw	r6,28(sp)
    a3a4:	da400415 	stw	r9,16(sp)
    a3a8:	da800315 	stw	r10,12(sp)
    a3ac:	000b3c80 	call	b3c8 <__clzsi2>
    a3b0:	d9400217 	ldw	r5,8(sp)
    a3b4:	d9800717 	ldw	r6,28(sp)
    a3b8:	da400417 	ldw	r9,16(sp)
    a3bc:	da800317 	ldw	r10,12(sp)
    a3c0:	113ffd44 	addi	r4,r2,-11
    a3c4:	00c00704 	movi	r3,28
    a3c8:	19011016 	blt	r3,r4,a80c <__muldf3+0x6d4>
    a3cc:	00c00744 	movi	r3,29
    a3d0:	14bffe04 	addi	r18,r2,-8
    a3d4:	1907c83a 	sub	r3,r3,r4
    a3d8:	8ca2983a 	sll	r17,r17,r18
    a3dc:	30c6d83a 	srl	r3,r6,r3
    a3e0:	34a4983a 	sll	r18,r6,r18
    a3e4:	1c62b03a 	or	r17,r3,r17
    a3e8:	1080fcc4 	addi	r2,r2,1011
    a3ec:	0085c83a 	sub	r2,zero,r2
    a3f0:	000f883a 	mov	r7,zero
    a3f4:	003f8106 	br	a1fc <__alt_data_end+0xf400a1fc>
    a3f8:	3027883a 	mov	r19,r6
    a3fc:	0081ffc4 	movi	r2,2047
    a400:	0021883a 	mov	r16,zero
    a404:	002d883a 	mov	r22,zero
    a408:	003faa06 	br	a2b4 <__alt_data_end+0xf400a2b4>
    a40c:	0023883a 	mov	r17,zero
    a410:	0025883a 	mov	r18,zero
    a414:	01c00044 	movi	r7,1
    a418:	003f7806 	br	a1fc <__alt_data_end+0xf400a1fc>
    a41c:	01c000c4 	movi	r7,3
    a420:	003f7606 	br	a1fc <__alt_data_end+0xf400a1fc>
    a424:	05400104 	movi	r21,4
    a428:	0021883a 	mov	r16,zero
    a42c:	002d883a 	mov	r22,zero
    a430:	01400044 	movi	r5,1
    a434:	003f5f06 	br	a1b4 <__alt_data_end+0xf400a1b4>
    a438:	05400304 	movi	r21,12
    a43c:	014000c4 	movi	r5,3
    a440:	003f5c06 	br	a1b4 <__alt_data_end+0xf400a1b4>
    a444:	04000434 	movhi	r16,16
    a448:	0027883a 	mov	r19,zero
    a44c:	843fffc4 	addi	r16,r16,-1
    a450:	05bfffc4 	movi	r22,-1
    a454:	0081ffc4 	movi	r2,2047
    a458:	003f9606 	br	a2b4 <__alt_data_end+0xf400a2b4>
    a45c:	8023883a 	mov	r17,r16
    a460:	b025883a 	mov	r18,r22
    a464:	280f883a 	mov	r7,r5
    a468:	003f8806 	br	a28c <__alt_data_end+0xf400a28c>
    a46c:	8023883a 	mov	r17,r16
    a470:	b025883a 	mov	r18,r22
    a474:	480d883a 	mov	r6,r9
    a478:	280f883a 	mov	r7,r5
    a47c:	003f8306 	br	a28c <__alt_data_end+0xf400a28c>
    a480:	b026d43a 	srli	r19,r22,16
    a484:	902ed43a 	srli	r23,r18,16
    a488:	b5bfffcc 	andi	r22,r22,65535
    a48c:	94bfffcc 	andi	r18,r18,65535
    a490:	b00b883a 	mov	r5,r22
    a494:	9009883a 	mov	r4,r18
    a498:	d8c00515 	stw	r3,20(sp)
    a49c:	d9800715 	stw	r6,28(sp)
    a4a0:	da000615 	stw	r8,24(sp)
    a4a4:	00096640 	call	9664 <__mulsi3>
    a4a8:	980b883a 	mov	r5,r19
    a4ac:	9009883a 	mov	r4,r18
    a4b0:	1029883a 	mov	r20,r2
    a4b4:	00096640 	call	9664 <__mulsi3>
    a4b8:	b80b883a 	mov	r5,r23
    a4bc:	9809883a 	mov	r4,r19
    a4c0:	102b883a 	mov	r21,r2
    a4c4:	00096640 	call	9664 <__mulsi3>
    a4c8:	b809883a 	mov	r4,r23
    a4cc:	b00b883a 	mov	r5,r22
    a4d0:	1039883a 	mov	fp,r2
    a4d4:	00096640 	call	9664 <__mulsi3>
    a4d8:	a008d43a 	srli	r4,r20,16
    a4dc:	1545883a 	add	r2,r2,r21
    a4e0:	d8c00517 	ldw	r3,20(sp)
    a4e4:	2085883a 	add	r2,r4,r2
    a4e8:	d9800717 	ldw	r6,28(sp)
    a4ec:	da000617 	ldw	r8,24(sp)
    a4f0:	1540022e 	bgeu	r2,r21,a4fc <__muldf3+0x3c4>
    a4f4:	01000074 	movhi	r4,1
    a4f8:	e139883a 	add	fp,fp,r4
    a4fc:	100e943a 	slli	r7,r2,16
    a500:	1004d43a 	srli	r2,r2,16
    a504:	882ad43a 	srli	r21,r17,16
    a508:	a53fffcc 	andi	r20,r20,65535
    a50c:	8c7fffcc 	andi	r17,r17,65535
    a510:	3d29883a 	add	r20,r7,r20
    a514:	b00b883a 	mov	r5,r22
    a518:	8809883a 	mov	r4,r17
    a51c:	d8c00515 	stw	r3,20(sp)
    a520:	d9800715 	stw	r6,28(sp)
    a524:	da000615 	stw	r8,24(sp)
    a528:	dd000115 	stw	r20,4(sp)
    a52c:	d8800015 	stw	r2,0(sp)
    a530:	00096640 	call	9664 <__mulsi3>
    a534:	980b883a 	mov	r5,r19
    a538:	8809883a 	mov	r4,r17
    a53c:	d8800215 	stw	r2,8(sp)
    a540:	00096640 	call	9664 <__mulsi3>
    a544:	9809883a 	mov	r4,r19
    a548:	a80b883a 	mov	r5,r21
    a54c:	1029883a 	mov	r20,r2
    a550:	00096640 	call	9664 <__mulsi3>
    a554:	b00b883a 	mov	r5,r22
    a558:	a809883a 	mov	r4,r21
    a55c:	d8800415 	stw	r2,16(sp)
    a560:	00096640 	call	9664 <__mulsi3>
    a564:	d9c00217 	ldw	r7,8(sp)
    a568:	1505883a 	add	r2,r2,r20
    a56c:	d8c00517 	ldw	r3,20(sp)
    a570:	3826d43a 	srli	r19,r7,16
    a574:	d9800717 	ldw	r6,28(sp)
    a578:	da000617 	ldw	r8,24(sp)
    a57c:	9885883a 	add	r2,r19,r2
    a580:	da400417 	ldw	r9,16(sp)
    a584:	1500022e 	bgeu	r2,r20,a590 <__muldf3+0x458>
    a588:	01000074 	movhi	r4,1
    a58c:	4913883a 	add	r9,r9,r4
    a590:	1028d43a 	srli	r20,r2,16
    a594:	1004943a 	slli	r2,r2,16
    a598:	802cd43a 	srli	r22,r16,16
    a59c:	843fffcc 	andi	r16,r16,65535
    a5a0:	3cffffcc 	andi	r19,r7,65535
    a5a4:	9009883a 	mov	r4,r18
    a5a8:	800b883a 	mov	r5,r16
    a5ac:	a269883a 	add	r20,r20,r9
    a5b0:	d8c00515 	stw	r3,20(sp)
    a5b4:	d9800715 	stw	r6,28(sp)
    a5b8:	da000615 	stw	r8,24(sp)
    a5bc:	14e7883a 	add	r19,r2,r19
    a5c0:	00096640 	call	9664 <__mulsi3>
    a5c4:	9009883a 	mov	r4,r18
    a5c8:	b00b883a 	mov	r5,r22
    a5cc:	d8800315 	stw	r2,12(sp)
    a5d0:	00096640 	call	9664 <__mulsi3>
    a5d4:	b809883a 	mov	r4,r23
    a5d8:	b00b883a 	mov	r5,r22
    a5dc:	d8800215 	stw	r2,8(sp)
    a5e0:	00096640 	call	9664 <__mulsi3>
    a5e4:	b80b883a 	mov	r5,r23
    a5e8:	8009883a 	mov	r4,r16
    a5ec:	d8800415 	stw	r2,16(sp)
    a5f0:	00096640 	call	9664 <__mulsi3>
    a5f4:	da800317 	ldw	r10,12(sp)
    a5f8:	d9c00217 	ldw	r7,8(sp)
    a5fc:	d9000017 	ldw	r4,0(sp)
    a600:	502ed43a 	srli	r23,r10,16
    a604:	11c5883a 	add	r2,r2,r7
    a608:	24e5883a 	add	r18,r4,r19
    a60c:	b885883a 	add	r2,r23,r2
    a610:	d8c00517 	ldw	r3,20(sp)
    a614:	d9800717 	ldw	r6,28(sp)
    a618:	da000617 	ldw	r8,24(sp)
    a61c:	da400417 	ldw	r9,16(sp)
    a620:	11c0022e 	bgeu	r2,r7,a62c <__muldf3+0x4f4>
    a624:	01000074 	movhi	r4,1
    a628:	4913883a 	add	r9,r9,r4
    a62c:	100ed43a 	srli	r7,r2,16
    a630:	1004943a 	slli	r2,r2,16
    a634:	55ffffcc 	andi	r23,r10,65535
    a638:	3a53883a 	add	r9,r7,r9
    a63c:	8809883a 	mov	r4,r17
    a640:	800b883a 	mov	r5,r16
    a644:	d8c00515 	stw	r3,20(sp)
    a648:	d9800715 	stw	r6,28(sp)
    a64c:	da000615 	stw	r8,24(sp)
    a650:	da400415 	stw	r9,16(sp)
    a654:	15ef883a 	add	r23,r2,r23
    a658:	00096640 	call	9664 <__mulsi3>
    a65c:	8809883a 	mov	r4,r17
    a660:	b00b883a 	mov	r5,r22
    a664:	d8800215 	stw	r2,8(sp)
    a668:	00096640 	call	9664 <__mulsi3>
    a66c:	b00b883a 	mov	r5,r22
    a670:	a809883a 	mov	r4,r21
    a674:	d8800315 	stw	r2,12(sp)
    a678:	00096640 	call	9664 <__mulsi3>
    a67c:	8009883a 	mov	r4,r16
    a680:	a80b883a 	mov	r5,r21
    a684:	1023883a 	mov	r17,r2
    a688:	00096640 	call	9664 <__mulsi3>
    a68c:	d9c00217 	ldw	r7,8(sp)
    a690:	da800317 	ldw	r10,12(sp)
    a694:	d8c00517 	ldw	r3,20(sp)
    a698:	3808d43a 	srli	r4,r7,16
    a69c:	1285883a 	add	r2,r2,r10
    a6a0:	d9800717 	ldw	r6,28(sp)
    a6a4:	2085883a 	add	r2,r4,r2
    a6a8:	da000617 	ldw	r8,24(sp)
    a6ac:	da400417 	ldw	r9,16(sp)
    a6b0:	1280022e 	bgeu	r2,r10,a6bc <__muldf3+0x584>
    a6b4:	01000074 	movhi	r4,1
    a6b8:	8923883a 	add	r17,r17,r4
    a6bc:	1008943a 	slli	r4,r2,16
    a6c0:	39ffffcc 	andi	r7,r7,65535
    a6c4:	e4b9883a 	add	fp,fp,r18
    a6c8:	21cf883a 	add	r7,r4,r7
    a6cc:	e4e7803a 	cmpltu	r19,fp,r19
    a6d0:	3d0f883a 	add	r7,r7,r20
    a6d4:	bf39883a 	add	fp,r23,fp
    a6d8:	99c9883a 	add	r4,r19,r7
    a6dc:	e5ef803a 	cmpltu	r23,fp,r23
    a6e0:	490b883a 	add	r5,r9,r4
    a6e4:	1004d43a 	srli	r2,r2,16
    a6e8:	b965883a 	add	r18,r23,r5
    a6ec:	24c9803a 	cmpltu	r4,r4,r19
    a6f0:	3d29803a 	cmpltu	r20,r7,r20
    a6f4:	a128b03a 	or	r20,r20,r4
    a6f8:	95ef803a 	cmpltu	r23,r18,r23
    a6fc:	2a53803a 	cmpltu	r9,r5,r9
    a700:	a0a9883a 	add	r20,r20,r2
    a704:	4deeb03a 	or	r23,r9,r23
    a708:	a5ef883a 	add	r23,r20,r23
    a70c:	bc63883a 	add	r17,r23,r17
    a710:	e004927a 	slli	r2,fp,9
    a714:	d9000117 	ldw	r4,4(sp)
    a718:	882e927a 	slli	r23,r17,9
    a71c:	9022d5fa 	srli	r17,r18,23
    a720:	e038d5fa 	srli	fp,fp,23
    a724:	1104b03a 	or	r2,r2,r4
    a728:	9024927a 	slli	r18,r18,9
    a72c:	1004c03a 	cmpne	r2,r2,zero
    a730:	bc62b03a 	or	r17,r23,r17
    a734:	1738b03a 	or	fp,r2,fp
    a738:	8880402c 	andhi	r2,r17,256
    a73c:	e4a4b03a 	or	r18,fp,r18
    a740:	10000726 	beq	r2,zero,a760 <__muldf3+0x628>
    a744:	9006d07a 	srli	r3,r18,1
    a748:	880497fa 	slli	r2,r17,31
    a74c:	9480004c 	andi	r18,r18,1
    a750:	8822d07a 	srli	r17,r17,1
    a754:	1ca4b03a 	or	r18,r3,r18
    a758:	14a4b03a 	or	r18,r2,r18
    a75c:	4007883a 	mov	r3,r8
    a760:	1880ffc4 	addi	r2,r3,1023
    a764:	0080460e 	bge	zero,r2,a880 <__muldf3+0x748>
    a768:	910001cc 	andi	r4,r18,7
    a76c:	20000726 	beq	r4,zero,a78c <__muldf3+0x654>
    a770:	910003cc 	andi	r4,r18,15
    a774:	01400104 	movi	r5,4
    a778:	21400426 	beq	r4,r5,a78c <__muldf3+0x654>
    a77c:	9149883a 	add	r4,r18,r5
    a780:	24a5803a 	cmpltu	r18,r4,r18
    a784:	8ca3883a 	add	r17,r17,r18
    a788:	2025883a 	mov	r18,r4
    a78c:	8900402c 	andhi	r4,r17,256
    a790:	20000426 	beq	r4,zero,a7a4 <__muldf3+0x66c>
    a794:	18810004 	addi	r2,r3,1024
    a798:	00ffc034 	movhi	r3,65280
    a79c:	18ffffc4 	addi	r3,r3,-1
    a7a0:	88e2703a 	and	r17,r17,r3
    a7a4:	00c1ff84 	movi	r3,2046
    a7a8:	18bf1316 	blt	r3,r2,a3f8 <__alt_data_end+0xf400a3f8>
    a7ac:	882c977a 	slli	r22,r17,29
    a7b0:	9024d0fa 	srli	r18,r18,3
    a7b4:	8822927a 	slli	r17,r17,9
    a7b8:	1081ffcc 	andi	r2,r2,2047
    a7bc:	b4acb03a 	or	r22,r22,r18
    a7c0:	8820d33a 	srli	r16,r17,12
    a7c4:	3027883a 	mov	r19,r6
    a7c8:	003eba06 	br	a2b4 <__alt_data_end+0xf400a2b4>
    a7cc:	8080022c 	andhi	r2,r16,8
    a7d0:	10000926 	beq	r2,zero,a7f8 <__muldf3+0x6c0>
    a7d4:	8880022c 	andhi	r2,r17,8
    a7d8:	1000071e 	bne	r2,zero,a7f8 <__muldf3+0x6c0>
    a7dc:	00800434 	movhi	r2,16
    a7e0:	8c000234 	orhi	r16,r17,8
    a7e4:	10bfffc4 	addi	r2,r2,-1
    a7e8:	e027883a 	mov	r19,fp
    a7ec:	80a0703a 	and	r16,r16,r2
    a7f0:	902d883a 	mov	r22,r18
    a7f4:	003f1706 	br	a454 <__alt_data_end+0xf400a454>
    a7f8:	00800434 	movhi	r2,16
    a7fc:	84000234 	orhi	r16,r16,8
    a800:	10bfffc4 	addi	r2,r2,-1
    a804:	80a0703a 	and	r16,r16,r2
    a808:	003f1206 	br	a454 <__alt_data_end+0xf400a454>
    a80c:	147ff604 	addi	r17,r2,-40
    a810:	3462983a 	sll	r17,r6,r17
    a814:	0025883a 	mov	r18,zero
    a818:	003ef306 	br	a3e8 <__alt_data_end+0xf400a3e8>
    a81c:	3009883a 	mov	r4,r6
    a820:	d9400215 	stw	r5,8(sp)
    a824:	d9800715 	stw	r6,28(sp)
    a828:	da400415 	stw	r9,16(sp)
    a82c:	da800315 	stw	r10,12(sp)
    a830:	000b3c80 	call	b3c8 <__clzsi2>
    a834:	10800804 	addi	r2,r2,32
    a838:	da800317 	ldw	r10,12(sp)
    a83c:	da400417 	ldw	r9,16(sp)
    a840:	d9800717 	ldw	r6,28(sp)
    a844:	d9400217 	ldw	r5,8(sp)
    a848:	003edd06 	br	a3c0 <__alt_data_end+0xf400a3c0>
    a84c:	143ff604 	addi	r16,r2,-40
    a850:	ac20983a 	sll	r16,r21,r16
    a854:	002d883a 	mov	r22,zero
    a858:	003ec106 	br	a360 <__alt_data_end+0xf400a360>
    a85c:	d9800715 	stw	r6,28(sp)
    a860:	d9c00215 	stw	r7,8(sp)
    a864:	da400415 	stw	r9,16(sp)
    a868:	000b3c80 	call	b3c8 <__clzsi2>
    a86c:	10800804 	addi	r2,r2,32
    a870:	da400417 	ldw	r9,16(sp)
    a874:	d9c00217 	ldw	r7,8(sp)
    a878:	d9800717 	ldw	r6,28(sp)
    a87c:	003eae06 	br	a338 <__alt_data_end+0xf400a338>
    a880:	00c00044 	movi	r3,1
    a884:	1887c83a 	sub	r3,r3,r2
    a888:	01000e04 	movi	r4,56
    a88c:	20fe8516 	blt	r4,r3,a2a4 <__alt_data_end+0xf400a2a4>
    a890:	010007c4 	movi	r4,31
    a894:	20c01b16 	blt	r4,r3,a904 <__muldf3+0x7cc>
    a898:	00800804 	movi	r2,32
    a89c:	10c5c83a 	sub	r2,r2,r3
    a8a0:	888a983a 	sll	r5,r17,r2
    a8a4:	90c8d83a 	srl	r4,r18,r3
    a8a8:	9084983a 	sll	r2,r18,r2
    a8ac:	88e2d83a 	srl	r17,r17,r3
    a8b0:	2906b03a 	or	r3,r5,r4
    a8b4:	1004c03a 	cmpne	r2,r2,zero
    a8b8:	1886b03a 	or	r3,r3,r2
    a8bc:	188001cc 	andi	r2,r3,7
    a8c0:	10000726 	beq	r2,zero,a8e0 <__muldf3+0x7a8>
    a8c4:	188003cc 	andi	r2,r3,15
    a8c8:	01000104 	movi	r4,4
    a8cc:	11000426 	beq	r2,r4,a8e0 <__muldf3+0x7a8>
    a8d0:	1805883a 	mov	r2,r3
    a8d4:	10c00104 	addi	r3,r2,4
    a8d8:	1885803a 	cmpltu	r2,r3,r2
    a8dc:	88a3883a 	add	r17,r17,r2
    a8e0:	8880202c 	andhi	r2,r17,128
    a8e4:	10001c26 	beq	r2,zero,a958 <__muldf3+0x820>
    a8e8:	3027883a 	mov	r19,r6
    a8ec:	00800044 	movi	r2,1
    a8f0:	0021883a 	mov	r16,zero
    a8f4:	002d883a 	mov	r22,zero
    a8f8:	003e6e06 	br	a2b4 <__alt_data_end+0xf400a2b4>
    a8fc:	4007883a 	mov	r3,r8
    a900:	003f9706 	br	a760 <__alt_data_end+0xf400a760>
    a904:	017ff844 	movi	r5,-31
    a908:	2885c83a 	sub	r2,r5,r2
    a90c:	888ad83a 	srl	r5,r17,r2
    a910:	00800804 	movi	r2,32
    a914:	18801a26 	beq	r3,r2,a980 <__muldf3+0x848>
    a918:	01001004 	movi	r4,64
    a91c:	20c7c83a 	sub	r3,r4,r3
    a920:	88e2983a 	sll	r17,r17,r3
    a924:	8ca4b03a 	or	r18,r17,r18
    a928:	9004c03a 	cmpne	r2,r18,zero
    a92c:	2884b03a 	or	r2,r5,r2
    a930:	144001cc 	andi	r17,r2,7
    a934:	88000d1e 	bne	r17,zero,a96c <__muldf3+0x834>
    a938:	0021883a 	mov	r16,zero
    a93c:	102cd0fa 	srli	r22,r2,3
    a940:	3027883a 	mov	r19,r6
    a944:	0005883a 	mov	r2,zero
    a948:	b46cb03a 	or	r22,r22,r17
    a94c:	003e5906 	br	a2b4 <__alt_data_end+0xf400a2b4>
    a950:	1007883a 	mov	r3,r2
    a954:	0023883a 	mov	r17,zero
    a958:	8820927a 	slli	r16,r17,9
    a95c:	1805883a 	mov	r2,r3
    a960:	8822977a 	slli	r17,r17,29
    a964:	8020d33a 	srli	r16,r16,12
    a968:	003ff406 	br	a93c <__alt_data_end+0xf400a93c>
    a96c:	10c003cc 	andi	r3,r2,15
    a970:	01000104 	movi	r4,4
    a974:	193ff626 	beq	r3,r4,a950 <__alt_data_end+0xf400a950>
    a978:	0023883a 	mov	r17,zero
    a97c:	003fd506 	br	a8d4 <__alt_data_end+0xf400a8d4>
    a980:	0023883a 	mov	r17,zero
    a984:	003fe706 	br	a924 <__alt_data_end+0xf400a924>
    a988:	00800434 	movhi	r2,16
    a98c:	8c000234 	orhi	r16,r17,8
    a990:	10bfffc4 	addi	r2,r2,-1
    a994:	3027883a 	mov	r19,r6
    a998:	80a0703a 	and	r16,r16,r2
    a99c:	902d883a 	mov	r22,r18
    a9a0:	003eac06 	br	a454 <__alt_data_end+0xf400a454>

0000a9a4 <__subdf3>:
    a9a4:	02000434 	movhi	r8,16
    a9a8:	423fffc4 	addi	r8,r8,-1
    a9ac:	defffb04 	addi	sp,sp,-20
    a9b0:	2a14703a 	and	r10,r5,r8
    a9b4:	3812d53a 	srli	r9,r7,20
    a9b8:	3a10703a 	and	r8,r7,r8
    a9bc:	2006d77a 	srli	r3,r4,29
    a9c0:	3004d77a 	srli	r2,r6,29
    a9c4:	dc000015 	stw	r16,0(sp)
    a9c8:	501490fa 	slli	r10,r10,3
    a9cc:	2820d53a 	srli	r16,r5,20
    a9d0:	401090fa 	slli	r8,r8,3
    a9d4:	dc800215 	stw	r18,8(sp)
    a9d8:	dc400115 	stw	r17,4(sp)
    a9dc:	dfc00415 	stw	ra,16(sp)
    a9e0:	202290fa 	slli	r17,r4,3
    a9e4:	dcc00315 	stw	r19,12(sp)
    a9e8:	4a41ffcc 	andi	r9,r9,2047
    a9ec:	0101ffc4 	movi	r4,2047
    a9f0:	2824d7fa 	srli	r18,r5,31
    a9f4:	8401ffcc 	andi	r16,r16,2047
    a9f8:	50c6b03a 	or	r3,r10,r3
    a9fc:	380ed7fa 	srli	r7,r7,31
    aa00:	408ab03a 	or	r5,r8,r2
    aa04:	300c90fa 	slli	r6,r6,3
    aa08:	49009626 	beq	r9,r4,ac64 <__subdf3+0x2c0>
    aa0c:	39c0005c 	xori	r7,r7,1
    aa10:	8245c83a 	sub	r2,r16,r9
    aa14:	3c807426 	beq	r7,r18,abe8 <__subdf3+0x244>
    aa18:	0080af0e 	bge	zero,r2,acd8 <__subdf3+0x334>
    aa1c:	48002a1e 	bne	r9,zero,aac8 <__subdf3+0x124>
    aa20:	2988b03a 	or	r4,r5,r6
    aa24:	20009a1e 	bne	r4,zero,ac90 <__subdf3+0x2ec>
    aa28:	888001cc 	andi	r2,r17,7
    aa2c:	10000726 	beq	r2,zero,aa4c <__subdf3+0xa8>
    aa30:	888003cc 	andi	r2,r17,15
    aa34:	01000104 	movi	r4,4
    aa38:	11000426 	beq	r2,r4,aa4c <__subdf3+0xa8>
    aa3c:	890b883a 	add	r5,r17,r4
    aa40:	2c63803a 	cmpltu	r17,r5,r17
    aa44:	1c47883a 	add	r3,r3,r17
    aa48:	2823883a 	mov	r17,r5
    aa4c:	1880202c 	andhi	r2,r3,128
    aa50:	10005926 	beq	r2,zero,abb8 <__subdf3+0x214>
    aa54:	84000044 	addi	r16,r16,1
    aa58:	0081ffc4 	movi	r2,2047
    aa5c:	8080be26 	beq	r16,r2,ad58 <__subdf3+0x3b4>
    aa60:	017fe034 	movhi	r5,65408
    aa64:	297fffc4 	addi	r5,r5,-1
    aa68:	1946703a 	and	r3,r3,r5
    aa6c:	1804977a 	slli	r2,r3,29
    aa70:	1806927a 	slli	r3,r3,9
    aa74:	8822d0fa 	srli	r17,r17,3
    aa78:	8401ffcc 	andi	r16,r16,2047
    aa7c:	180ad33a 	srli	r5,r3,12
    aa80:	9100004c 	andi	r4,r18,1
    aa84:	1444b03a 	or	r2,r2,r17
    aa88:	80c1ffcc 	andi	r3,r16,2047
    aa8c:	1820953a 	slli	r16,r3,20
    aa90:	20c03fcc 	andi	r3,r4,255
    aa94:	180897fa 	slli	r4,r3,31
    aa98:	00c00434 	movhi	r3,16
    aa9c:	18ffffc4 	addi	r3,r3,-1
    aaa0:	28c6703a 	and	r3,r5,r3
    aaa4:	1c06b03a 	or	r3,r3,r16
    aaa8:	1906b03a 	or	r3,r3,r4
    aaac:	dfc00417 	ldw	ra,16(sp)
    aab0:	dcc00317 	ldw	r19,12(sp)
    aab4:	dc800217 	ldw	r18,8(sp)
    aab8:	dc400117 	ldw	r17,4(sp)
    aabc:	dc000017 	ldw	r16,0(sp)
    aac0:	dec00504 	addi	sp,sp,20
    aac4:	f800283a 	ret
    aac8:	0101ffc4 	movi	r4,2047
    aacc:	813fd626 	beq	r16,r4,aa28 <__alt_data_end+0xf400aa28>
    aad0:	29402034 	orhi	r5,r5,128
    aad4:	01000e04 	movi	r4,56
    aad8:	2080a316 	blt	r4,r2,ad68 <__subdf3+0x3c4>
    aadc:	010007c4 	movi	r4,31
    aae0:	2080c616 	blt	r4,r2,adfc <__subdf3+0x458>
    aae4:	01000804 	movi	r4,32
    aae8:	2089c83a 	sub	r4,r4,r2
    aaec:	2910983a 	sll	r8,r5,r4
    aaf0:	308ed83a 	srl	r7,r6,r2
    aaf4:	3108983a 	sll	r4,r6,r4
    aaf8:	2884d83a 	srl	r2,r5,r2
    aafc:	41ccb03a 	or	r6,r8,r7
    ab00:	2008c03a 	cmpne	r4,r4,zero
    ab04:	310cb03a 	or	r6,r6,r4
    ab08:	898dc83a 	sub	r6,r17,r6
    ab0c:	89a3803a 	cmpltu	r17,r17,r6
    ab10:	1887c83a 	sub	r3,r3,r2
    ab14:	1c47c83a 	sub	r3,r3,r17
    ab18:	3023883a 	mov	r17,r6
    ab1c:	1880202c 	andhi	r2,r3,128
    ab20:	10002326 	beq	r2,zero,abb0 <__subdf3+0x20c>
    ab24:	04c02034 	movhi	r19,128
    ab28:	9cffffc4 	addi	r19,r19,-1
    ab2c:	1ce6703a 	and	r19,r3,r19
    ab30:	98007a26 	beq	r19,zero,ad1c <__subdf3+0x378>
    ab34:	9809883a 	mov	r4,r19
    ab38:	000b3c80 	call	b3c8 <__clzsi2>
    ab3c:	113ffe04 	addi	r4,r2,-8
    ab40:	00c007c4 	movi	r3,31
    ab44:	19007b16 	blt	r3,r4,ad34 <__subdf3+0x390>
    ab48:	00800804 	movi	r2,32
    ab4c:	1105c83a 	sub	r2,r2,r4
    ab50:	8884d83a 	srl	r2,r17,r2
    ab54:	9906983a 	sll	r3,r19,r4
    ab58:	8922983a 	sll	r17,r17,r4
    ab5c:	10c4b03a 	or	r2,r2,r3
    ab60:	24007816 	blt	r4,r16,ad44 <__subdf3+0x3a0>
    ab64:	2421c83a 	sub	r16,r4,r16
    ab68:	80c00044 	addi	r3,r16,1
    ab6c:	010007c4 	movi	r4,31
    ab70:	20c09516 	blt	r4,r3,adc8 <__subdf3+0x424>
    ab74:	01400804 	movi	r5,32
    ab78:	28cbc83a 	sub	r5,r5,r3
    ab7c:	88c8d83a 	srl	r4,r17,r3
    ab80:	8962983a 	sll	r17,r17,r5
    ab84:	114a983a 	sll	r5,r2,r5
    ab88:	10c6d83a 	srl	r3,r2,r3
    ab8c:	8804c03a 	cmpne	r2,r17,zero
    ab90:	290ab03a 	or	r5,r5,r4
    ab94:	28a2b03a 	or	r17,r5,r2
    ab98:	0021883a 	mov	r16,zero
    ab9c:	003fa206 	br	aa28 <__alt_data_end+0xf400aa28>
    aba0:	2090b03a 	or	r8,r4,r2
    aba4:	40018e26 	beq	r8,zero,b1e0 <__subdf3+0x83c>
    aba8:	1007883a 	mov	r3,r2
    abac:	2023883a 	mov	r17,r4
    abb0:	888001cc 	andi	r2,r17,7
    abb4:	103f9e1e 	bne	r2,zero,aa30 <__alt_data_end+0xf400aa30>
    abb8:	1804977a 	slli	r2,r3,29
    abbc:	8822d0fa 	srli	r17,r17,3
    abc0:	1810d0fa 	srli	r8,r3,3
    abc4:	9100004c 	andi	r4,r18,1
    abc8:	1444b03a 	or	r2,r2,r17
    abcc:	00c1ffc4 	movi	r3,2047
    abd0:	80c02826 	beq	r16,r3,ac74 <__subdf3+0x2d0>
    abd4:	01400434 	movhi	r5,16
    abd8:	297fffc4 	addi	r5,r5,-1
    abdc:	80e0703a 	and	r16,r16,r3
    abe0:	414a703a 	and	r5,r8,r5
    abe4:	003fa806 	br	aa88 <__alt_data_end+0xf400aa88>
    abe8:	0080630e 	bge	zero,r2,ad78 <__subdf3+0x3d4>
    abec:	48003026 	beq	r9,zero,acb0 <__subdf3+0x30c>
    abf0:	0101ffc4 	movi	r4,2047
    abf4:	813f8c26 	beq	r16,r4,aa28 <__alt_data_end+0xf400aa28>
    abf8:	29402034 	orhi	r5,r5,128
    abfc:	01000e04 	movi	r4,56
    ac00:	2080a90e 	bge	r4,r2,aea8 <__subdf3+0x504>
    ac04:	298cb03a 	or	r6,r5,r6
    ac08:	3012c03a 	cmpne	r9,r6,zero
    ac0c:	0005883a 	mov	r2,zero
    ac10:	4c53883a 	add	r9,r9,r17
    ac14:	4c63803a 	cmpltu	r17,r9,r17
    ac18:	10c7883a 	add	r3,r2,r3
    ac1c:	88c7883a 	add	r3,r17,r3
    ac20:	4823883a 	mov	r17,r9
    ac24:	1880202c 	andhi	r2,r3,128
    ac28:	1000d026 	beq	r2,zero,af6c <__subdf3+0x5c8>
    ac2c:	84000044 	addi	r16,r16,1
    ac30:	0081ffc4 	movi	r2,2047
    ac34:	8080fe26 	beq	r16,r2,b030 <__subdf3+0x68c>
    ac38:	00bfe034 	movhi	r2,65408
    ac3c:	10bfffc4 	addi	r2,r2,-1
    ac40:	1886703a 	and	r3,r3,r2
    ac44:	880ad07a 	srli	r5,r17,1
    ac48:	180497fa 	slli	r2,r3,31
    ac4c:	8900004c 	andi	r4,r17,1
    ac50:	2922b03a 	or	r17,r5,r4
    ac54:	1806d07a 	srli	r3,r3,1
    ac58:	1462b03a 	or	r17,r2,r17
    ac5c:	3825883a 	mov	r18,r7
    ac60:	003f7106 	br	aa28 <__alt_data_end+0xf400aa28>
    ac64:	2984b03a 	or	r2,r5,r6
    ac68:	103f6826 	beq	r2,zero,aa0c <__alt_data_end+0xf400aa0c>
    ac6c:	39c03fcc 	andi	r7,r7,255
    ac70:	003f6706 	br	aa10 <__alt_data_end+0xf400aa10>
    ac74:	4086b03a 	or	r3,r8,r2
    ac78:	18015226 	beq	r3,zero,b1c4 <__subdf3+0x820>
    ac7c:	00c00434 	movhi	r3,16
    ac80:	41400234 	orhi	r5,r8,8
    ac84:	18ffffc4 	addi	r3,r3,-1
    ac88:	28ca703a 	and	r5,r5,r3
    ac8c:	003f7e06 	br	aa88 <__alt_data_end+0xf400aa88>
    ac90:	10bfffc4 	addi	r2,r2,-1
    ac94:	1000491e 	bne	r2,zero,adbc <__subdf3+0x418>
    ac98:	898fc83a 	sub	r7,r17,r6
    ac9c:	89e3803a 	cmpltu	r17,r17,r7
    aca0:	1947c83a 	sub	r3,r3,r5
    aca4:	1c47c83a 	sub	r3,r3,r17
    aca8:	3823883a 	mov	r17,r7
    acac:	003f9b06 	br	ab1c <__alt_data_end+0xf400ab1c>
    acb0:	2988b03a 	or	r4,r5,r6
    acb4:	203f5c26 	beq	r4,zero,aa28 <__alt_data_end+0xf400aa28>
    acb8:	10bfffc4 	addi	r2,r2,-1
    acbc:	1000931e 	bne	r2,zero,af0c <__subdf3+0x568>
    acc0:	898d883a 	add	r6,r17,r6
    acc4:	3463803a 	cmpltu	r17,r6,r17
    acc8:	1947883a 	add	r3,r3,r5
    accc:	88c7883a 	add	r3,r17,r3
    acd0:	3023883a 	mov	r17,r6
    acd4:	003fd306 	br	ac24 <__alt_data_end+0xf400ac24>
    acd8:	1000541e 	bne	r2,zero,ae2c <__subdf3+0x488>
    acdc:	80800044 	addi	r2,r16,1
    ace0:	1081ffcc 	andi	r2,r2,2047
    ace4:	01000044 	movi	r4,1
    ace8:	2080a20e 	bge	r4,r2,af74 <__subdf3+0x5d0>
    acec:	8989c83a 	sub	r4,r17,r6
    acf0:	8905803a 	cmpltu	r2,r17,r4
    acf4:	1967c83a 	sub	r19,r3,r5
    acf8:	98a7c83a 	sub	r19,r19,r2
    acfc:	9880202c 	andhi	r2,r19,128
    ad00:	10006326 	beq	r2,zero,ae90 <__subdf3+0x4ec>
    ad04:	3463c83a 	sub	r17,r6,r17
    ad08:	28c7c83a 	sub	r3,r5,r3
    ad0c:	344d803a 	cmpltu	r6,r6,r17
    ad10:	19a7c83a 	sub	r19,r3,r6
    ad14:	3825883a 	mov	r18,r7
    ad18:	983f861e 	bne	r19,zero,ab34 <__alt_data_end+0xf400ab34>
    ad1c:	8809883a 	mov	r4,r17
    ad20:	000b3c80 	call	b3c8 <__clzsi2>
    ad24:	10800804 	addi	r2,r2,32
    ad28:	113ffe04 	addi	r4,r2,-8
    ad2c:	00c007c4 	movi	r3,31
    ad30:	193f850e 	bge	r3,r4,ab48 <__alt_data_end+0xf400ab48>
    ad34:	10bff604 	addi	r2,r2,-40
    ad38:	8884983a 	sll	r2,r17,r2
    ad3c:	0023883a 	mov	r17,zero
    ad40:	243f880e 	bge	r4,r16,ab64 <__alt_data_end+0xf400ab64>
    ad44:	00ffe034 	movhi	r3,65408
    ad48:	18ffffc4 	addi	r3,r3,-1
    ad4c:	8121c83a 	sub	r16,r16,r4
    ad50:	10c6703a 	and	r3,r2,r3
    ad54:	003f3406 	br	aa28 <__alt_data_end+0xf400aa28>
    ad58:	9100004c 	andi	r4,r18,1
    ad5c:	000b883a 	mov	r5,zero
    ad60:	0005883a 	mov	r2,zero
    ad64:	003f4806 	br	aa88 <__alt_data_end+0xf400aa88>
    ad68:	298cb03a 	or	r6,r5,r6
    ad6c:	300cc03a 	cmpne	r6,r6,zero
    ad70:	0005883a 	mov	r2,zero
    ad74:	003f6406 	br	ab08 <__alt_data_end+0xf400ab08>
    ad78:	10009a1e 	bne	r2,zero,afe4 <__subdf3+0x640>
    ad7c:	82400044 	addi	r9,r16,1
    ad80:	4881ffcc 	andi	r2,r9,2047
    ad84:	02800044 	movi	r10,1
    ad88:	5080670e 	bge	r10,r2,af28 <__subdf3+0x584>
    ad8c:	0081ffc4 	movi	r2,2047
    ad90:	4880af26 	beq	r9,r2,b050 <__subdf3+0x6ac>
    ad94:	898d883a 	add	r6,r17,r6
    ad98:	1945883a 	add	r2,r3,r5
    ad9c:	3447803a 	cmpltu	r3,r6,r17
    ada0:	1887883a 	add	r3,r3,r2
    ada4:	182297fa 	slli	r17,r3,31
    ada8:	300cd07a 	srli	r6,r6,1
    adac:	1806d07a 	srli	r3,r3,1
    adb0:	4821883a 	mov	r16,r9
    adb4:	89a2b03a 	or	r17,r17,r6
    adb8:	003f1b06 	br	aa28 <__alt_data_end+0xf400aa28>
    adbc:	0101ffc4 	movi	r4,2047
    adc0:	813f441e 	bne	r16,r4,aad4 <__alt_data_end+0xf400aad4>
    adc4:	003f1806 	br	aa28 <__alt_data_end+0xf400aa28>
    adc8:	843ff844 	addi	r16,r16,-31
    adcc:	01400804 	movi	r5,32
    add0:	1408d83a 	srl	r4,r2,r16
    add4:	19405026 	beq	r3,r5,af18 <__subdf3+0x574>
    add8:	01401004 	movi	r5,64
    addc:	28c7c83a 	sub	r3,r5,r3
    ade0:	10c4983a 	sll	r2,r2,r3
    ade4:	88a2b03a 	or	r17,r17,r2
    ade8:	8822c03a 	cmpne	r17,r17,zero
    adec:	2462b03a 	or	r17,r4,r17
    adf0:	0007883a 	mov	r3,zero
    adf4:	0021883a 	mov	r16,zero
    adf8:	003f6d06 	br	abb0 <__alt_data_end+0xf400abb0>
    adfc:	11fff804 	addi	r7,r2,-32
    ae00:	01000804 	movi	r4,32
    ae04:	29ced83a 	srl	r7,r5,r7
    ae08:	11004526 	beq	r2,r4,af20 <__subdf3+0x57c>
    ae0c:	01001004 	movi	r4,64
    ae10:	2089c83a 	sub	r4,r4,r2
    ae14:	2904983a 	sll	r2,r5,r4
    ae18:	118cb03a 	or	r6,r2,r6
    ae1c:	300cc03a 	cmpne	r6,r6,zero
    ae20:	398cb03a 	or	r6,r7,r6
    ae24:	0005883a 	mov	r2,zero
    ae28:	003f3706 	br	ab08 <__alt_data_end+0xf400ab08>
    ae2c:	80002a26 	beq	r16,zero,aed8 <__subdf3+0x534>
    ae30:	0101ffc4 	movi	r4,2047
    ae34:	49006626 	beq	r9,r4,afd0 <__subdf3+0x62c>
    ae38:	0085c83a 	sub	r2,zero,r2
    ae3c:	18c02034 	orhi	r3,r3,128
    ae40:	01000e04 	movi	r4,56
    ae44:	20807e16 	blt	r4,r2,b040 <__subdf3+0x69c>
    ae48:	010007c4 	movi	r4,31
    ae4c:	2080e716 	blt	r4,r2,b1ec <__subdf3+0x848>
    ae50:	01000804 	movi	r4,32
    ae54:	2089c83a 	sub	r4,r4,r2
    ae58:	1914983a 	sll	r10,r3,r4
    ae5c:	8890d83a 	srl	r8,r17,r2
    ae60:	8908983a 	sll	r4,r17,r4
    ae64:	1884d83a 	srl	r2,r3,r2
    ae68:	5222b03a 	or	r17,r10,r8
    ae6c:	2006c03a 	cmpne	r3,r4,zero
    ae70:	88e2b03a 	or	r17,r17,r3
    ae74:	3463c83a 	sub	r17,r6,r17
    ae78:	2885c83a 	sub	r2,r5,r2
    ae7c:	344d803a 	cmpltu	r6,r6,r17
    ae80:	1187c83a 	sub	r3,r2,r6
    ae84:	4821883a 	mov	r16,r9
    ae88:	3825883a 	mov	r18,r7
    ae8c:	003f2306 	br	ab1c <__alt_data_end+0xf400ab1c>
    ae90:	24d0b03a 	or	r8,r4,r19
    ae94:	40001b1e 	bne	r8,zero,af04 <__subdf3+0x560>
    ae98:	0005883a 	mov	r2,zero
    ae9c:	0009883a 	mov	r4,zero
    aea0:	0021883a 	mov	r16,zero
    aea4:	003f4906 	br	abcc <__alt_data_end+0xf400abcc>
    aea8:	010007c4 	movi	r4,31
    aeac:	20803a16 	blt	r4,r2,af98 <__subdf3+0x5f4>
    aeb0:	01000804 	movi	r4,32
    aeb4:	2089c83a 	sub	r4,r4,r2
    aeb8:	2912983a 	sll	r9,r5,r4
    aebc:	3090d83a 	srl	r8,r6,r2
    aec0:	3108983a 	sll	r4,r6,r4
    aec4:	2884d83a 	srl	r2,r5,r2
    aec8:	4a12b03a 	or	r9,r9,r8
    aecc:	2008c03a 	cmpne	r4,r4,zero
    aed0:	4912b03a 	or	r9,r9,r4
    aed4:	003f4e06 	br	ac10 <__alt_data_end+0xf400ac10>
    aed8:	1c48b03a 	or	r4,r3,r17
    aedc:	20003c26 	beq	r4,zero,afd0 <__subdf3+0x62c>
    aee0:	0084303a 	nor	r2,zero,r2
    aee4:	1000381e 	bne	r2,zero,afc8 <__subdf3+0x624>
    aee8:	3463c83a 	sub	r17,r6,r17
    aeec:	28c5c83a 	sub	r2,r5,r3
    aef0:	344d803a 	cmpltu	r6,r6,r17
    aef4:	1187c83a 	sub	r3,r2,r6
    aef8:	4821883a 	mov	r16,r9
    aefc:	3825883a 	mov	r18,r7
    af00:	003f0606 	br	ab1c <__alt_data_end+0xf400ab1c>
    af04:	2023883a 	mov	r17,r4
    af08:	003f0906 	br	ab30 <__alt_data_end+0xf400ab30>
    af0c:	0101ffc4 	movi	r4,2047
    af10:	813f3a1e 	bne	r16,r4,abfc <__alt_data_end+0xf400abfc>
    af14:	003ec406 	br	aa28 <__alt_data_end+0xf400aa28>
    af18:	0005883a 	mov	r2,zero
    af1c:	003fb106 	br	ade4 <__alt_data_end+0xf400ade4>
    af20:	0005883a 	mov	r2,zero
    af24:	003fbc06 	br	ae18 <__alt_data_end+0xf400ae18>
    af28:	1c44b03a 	or	r2,r3,r17
    af2c:	80008e1e 	bne	r16,zero,b168 <__subdf3+0x7c4>
    af30:	1000c826 	beq	r2,zero,b254 <__subdf3+0x8b0>
    af34:	2984b03a 	or	r2,r5,r6
    af38:	103ebb26 	beq	r2,zero,aa28 <__alt_data_end+0xf400aa28>
    af3c:	8989883a 	add	r4,r17,r6
    af40:	1945883a 	add	r2,r3,r5
    af44:	2447803a 	cmpltu	r3,r4,r17
    af48:	1887883a 	add	r3,r3,r2
    af4c:	1880202c 	andhi	r2,r3,128
    af50:	2023883a 	mov	r17,r4
    af54:	103f1626 	beq	r2,zero,abb0 <__alt_data_end+0xf400abb0>
    af58:	00bfe034 	movhi	r2,65408
    af5c:	10bfffc4 	addi	r2,r2,-1
    af60:	5021883a 	mov	r16,r10
    af64:	1886703a 	and	r3,r3,r2
    af68:	003eaf06 	br	aa28 <__alt_data_end+0xf400aa28>
    af6c:	3825883a 	mov	r18,r7
    af70:	003f0f06 	br	abb0 <__alt_data_end+0xf400abb0>
    af74:	1c44b03a 	or	r2,r3,r17
    af78:	8000251e 	bne	r16,zero,b010 <__subdf3+0x66c>
    af7c:	1000661e 	bne	r2,zero,b118 <__subdf3+0x774>
    af80:	2990b03a 	or	r8,r5,r6
    af84:	40009626 	beq	r8,zero,b1e0 <__subdf3+0x83c>
    af88:	2807883a 	mov	r3,r5
    af8c:	3023883a 	mov	r17,r6
    af90:	3825883a 	mov	r18,r7
    af94:	003ea406 	br	aa28 <__alt_data_end+0xf400aa28>
    af98:	127ff804 	addi	r9,r2,-32
    af9c:	01000804 	movi	r4,32
    afa0:	2a52d83a 	srl	r9,r5,r9
    afa4:	11008c26 	beq	r2,r4,b1d8 <__subdf3+0x834>
    afa8:	01001004 	movi	r4,64
    afac:	2085c83a 	sub	r2,r4,r2
    afb0:	2884983a 	sll	r2,r5,r2
    afb4:	118cb03a 	or	r6,r2,r6
    afb8:	300cc03a 	cmpne	r6,r6,zero
    afbc:	4992b03a 	or	r9,r9,r6
    afc0:	0005883a 	mov	r2,zero
    afc4:	003f1206 	br	ac10 <__alt_data_end+0xf400ac10>
    afc8:	0101ffc4 	movi	r4,2047
    afcc:	493f9c1e 	bne	r9,r4,ae40 <__alt_data_end+0xf400ae40>
    afd0:	2807883a 	mov	r3,r5
    afd4:	3023883a 	mov	r17,r6
    afd8:	4821883a 	mov	r16,r9
    afdc:	3825883a 	mov	r18,r7
    afe0:	003e9106 	br	aa28 <__alt_data_end+0xf400aa28>
    afe4:	80001f1e 	bne	r16,zero,b064 <__subdf3+0x6c0>
    afe8:	1c48b03a 	or	r4,r3,r17
    afec:	20005a26 	beq	r4,zero,b158 <__subdf3+0x7b4>
    aff0:	0084303a 	nor	r2,zero,r2
    aff4:	1000561e 	bne	r2,zero,b150 <__subdf3+0x7ac>
    aff8:	89a3883a 	add	r17,r17,r6
    affc:	1945883a 	add	r2,r3,r5
    b000:	898d803a 	cmpltu	r6,r17,r6
    b004:	3087883a 	add	r3,r6,r2
    b008:	4821883a 	mov	r16,r9
    b00c:	003f0506 	br	ac24 <__alt_data_end+0xf400ac24>
    b010:	10002b1e 	bne	r2,zero,b0c0 <__subdf3+0x71c>
    b014:	2984b03a 	or	r2,r5,r6
    b018:	10008026 	beq	r2,zero,b21c <__subdf3+0x878>
    b01c:	2807883a 	mov	r3,r5
    b020:	3023883a 	mov	r17,r6
    b024:	3825883a 	mov	r18,r7
    b028:	0401ffc4 	movi	r16,2047
    b02c:	003e7e06 	br	aa28 <__alt_data_end+0xf400aa28>
    b030:	3809883a 	mov	r4,r7
    b034:	0011883a 	mov	r8,zero
    b038:	0005883a 	mov	r2,zero
    b03c:	003ee306 	br	abcc <__alt_data_end+0xf400abcc>
    b040:	1c62b03a 	or	r17,r3,r17
    b044:	8822c03a 	cmpne	r17,r17,zero
    b048:	0005883a 	mov	r2,zero
    b04c:	003f8906 	br	ae74 <__alt_data_end+0xf400ae74>
    b050:	3809883a 	mov	r4,r7
    b054:	4821883a 	mov	r16,r9
    b058:	0011883a 	mov	r8,zero
    b05c:	0005883a 	mov	r2,zero
    b060:	003eda06 	br	abcc <__alt_data_end+0xf400abcc>
    b064:	0101ffc4 	movi	r4,2047
    b068:	49003b26 	beq	r9,r4,b158 <__subdf3+0x7b4>
    b06c:	0085c83a 	sub	r2,zero,r2
    b070:	18c02034 	orhi	r3,r3,128
    b074:	01000e04 	movi	r4,56
    b078:	20806e16 	blt	r4,r2,b234 <__subdf3+0x890>
    b07c:	010007c4 	movi	r4,31
    b080:	20807716 	blt	r4,r2,b260 <__subdf3+0x8bc>
    b084:	01000804 	movi	r4,32
    b088:	2089c83a 	sub	r4,r4,r2
    b08c:	1914983a 	sll	r10,r3,r4
    b090:	8890d83a 	srl	r8,r17,r2
    b094:	8908983a 	sll	r4,r17,r4
    b098:	1884d83a 	srl	r2,r3,r2
    b09c:	5222b03a 	or	r17,r10,r8
    b0a0:	2006c03a 	cmpne	r3,r4,zero
    b0a4:	88e2b03a 	or	r17,r17,r3
    b0a8:	89a3883a 	add	r17,r17,r6
    b0ac:	1145883a 	add	r2,r2,r5
    b0b0:	898d803a 	cmpltu	r6,r17,r6
    b0b4:	3087883a 	add	r3,r6,r2
    b0b8:	4821883a 	mov	r16,r9
    b0bc:	003ed906 	br	ac24 <__alt_data_end+0xf400ac24>
    b0c0:	2984b03a 	or	r2,r5,r6
    b0c4:	10004226 	beq	r2,zero,b1d0 <__subdf3+0x82c>
    b0c8:	1808d0fa 	srli	r4,r3,3
    b0cc:	8822d0fa 	srli	r17,r17,3
    b0d0:	1806977a 	slli	r3,r3,29
    b0d4:	2080022c 	andhi	r2,r4,8
    b0d8:	1c62b03a 	or	r17,r3,r17
    b0dc:	10000826 	beq	r2,zero,b100 <__subdf3+0x75c>
    b0e0:	2812d0fa 	srli	r9,r5,3
    b0e4:	4880022c 	andhi	r2,r9,8
    b0e8:	1000051e 	bne	r2,zero,b100 <__subdf3+0x75c>
    b0ec:	300cd0fa 	srli	r6,r6,3
    b0f0:	2804977a 	slli	r2,r5,29
    b0f4:	4809883a 	mov	r4,r9
    b0f8:	3825883a 	mov	r18,r7
    b0fc:	11a2b03a 	or	r17,r2,r6
    b100:	8806d77a 	srli	r3,r17,29
    b104:	200890fa 	slli	r4,r4,3
    b108:	882290fa 	slli	r17,r17,3
    b10c:	0401ffc4 	movi	r16,2047
    b110:	1906b03a 	or	r3,r3,r4
    b114:	003e4406 	br	aa28 <__alt_data_end+0xf400aa28>
    b118:	2984b03a 	or	r2,r5,r6
    b11c:	103e4226 	beq	r2,zero,aa28 <__alt_data_end+0xf400aa28>
    b120:	8989c83a 	sub	r4,r17,r6
    b124:	8911803a 	cmpltu	r8,r17,r4
    b128:	1945c83a 	sub	r2,r3,r5
    b12c:	1205c83a 	sub	r2,r2,r8
    b130:	1200202c 	andhi	r8,r2,128
    b134:	403e9a26 	beq	r8,zero,aba0 <__alt_data_end+0xf400aba0>
    b138:	3463c83a 	sub	r17,r6,r17
    b13c:	28c5c83a 	sub	r2,r5,r3
    b140:	344d803a 	cmpltu	r6,r6,r17
    b144:	1187c83a 	sub	r3,r2,r6
    b148:	3825883a 	mov	r18,r7
    b14c:	003e3606 	br	aa28 <__alt_data_end+0xf400aa28>
    b150:	0101ffc4 	movi	r4,2047
    b154:	493fc71e 	bne	r9,r4,b074 <__alt_data_end+0xf400b074>
    b158:	2807883a 	mov	r3,r5
    b15c:	3023883a 	mov	r17,r6
    b160:	4821883a 	mov	r16,r9
    b164:	003e3006 	br	aa28 <__alt_data_end+0xf400aa28>
    b168:	10003626 	beq	r2,zero,b244 <__subdf3+0x8a0>
    b16c:	2984b03a 	or	r2,r5,r6
    b170:	10001726 	beq	r2,zero,b1d0 <__subdf3+0x82c>
    b174:	1808d0fa 	srli	r4,r3,3
    b178:	8822d0fa 	srli	r17,r17,3
    b17c:	1806977a 	slli	r3,r3,29
    b180:	2080022c 	andhi	r2,r4,8
    b184:	1c62b03a 	or	r17,r3,r17
    b188:	10000726 	beq	r2,zero,b1a8 <__subdf3+0x804>
    b18c:	2812d0fa 	srli	r9,r5,3
    b190:	4880022c 	andhi	r2,r9,8
    b194:	1000041e 	bne	r2,zero,b1a8 <__subdf3+0x804>
    b198:	300cd0fa 	srli	r6,r6,3
    b19c:	2804977a 	slli	r2,r5,29
    b1a0:	4809883a 	mov	r4,r9
    b1a4:	11a2b03a 	or	r17,r2,r6
    b1a8:	8806d77a 	srli	r3,r17,29
    b1ac:	200890fa 	slli	r4,r4,3
    b1b0:	882290fa 	slli	r17,r17,3
    b1b4:	3825883a 	mov	r18,r7
    b1b8:	1906b03a 	or	r3,r3,r4
    b1bc:	0401ffc4 	movi	r16,2047
    b1c0:	003e1906 	br	aa28 <__alt_data_end+0xf400aa28>
    b1c4:	000b883a 	mov	r5,zero
    b1c8:	0005883a 	mov	r2,zero
    b1cc:	003e2e06 	br	aa88 <__alt_data_end+0xf400aa88>
    b1d0:	0401ffc4 	movi	r16,2047
    b1d4:	003e1406 	br	aa28 <__alt_data_end+0xf400aa28>
    b1d8:	0005883a 	mov	r2,zero
    b1dc:	003f7506 	br	afb4 <__alt_data_end+0xf400afb4>
    b1e0:	0005883a 	mov	r2,zero
    b1e4:	0009883a 	mov	r4,zero
    b1e8:	003e7806 	br	abcc <__alt_data_end+0xf400abcc>
    b1ec:	123ff804 	addi	r8,r2,-32
    b1f0:	01000804 	movi	r4,32
    b1f4:	1a10d83a 	srl	r8,r3,r8
    b1f8:	11002526 	beq	r2,r4,b290 <__subdf3+0x8ec>
    b1fc:	01001004 	movi	r4,64
    b200:	2085c83a 	sub	r2,r4,r2
    b204:	1884983a 	sll	r2,r3,r2
    b208:	1444b03a 	or	r2,r2,r17
    b20c:	1004c03a 	cmpne	r2,r2,zero
    b210:	40a2b03a 	or	r17,r8,r2
    b214:	0005883a 	mov	r2,zero
    b218:	003f1606 	br	ae74 <__alt_data_end+0xf400ae74>
    b21c:	02000434 	movhi	r8,16
    b220:	0009883a 	mov	r4,zero
    b224:	423fffc4 	addi	r8,r8,-1
    b228:	00bfffc4 	movi	r2,-1
    b22c:	0401ffc4 	movi	r16,2047
    b230:	003e6606 	br	abcc <__alt_data_end+0xf400abcc>
    b234:	1c62b03a 	or	r17,r3,r17
    b238:	8822c03a 	cmpne	r17,r17,zero
    b23c:	0005883a 	mov	r2,zero
    b240:	003f9906 	br	b0a8 <__alt_data_end+0xf400b0a8>
    b244:	2807883a 	mov	r3,r5
    b248:	3023883a 	mov	r17,r6
    b24c:	0401ffc4 	movi	r16,2047
    b250:	003df506 	br	aa28 <__alt_data_end+0xf400aa28>
    b254:	2807883a 	mov	r3,r5
    b258:	3023883a 	mov	r17,r6
    b25c:	003df206 	br	aa28 <__alt_data_end+0xf400aa28>
    b260:	123ff804 	addi	r8,r2,-32
    b264:	01000804 	movi	r4,32
    b268:	1a10d83a 	srl	r8,r3,r8
    b26c:	11000a26 	beq	r2,r4,b298 <__subdf3+0x8f4>
    b270:	01001004 	movi	r4,64
    b274:	2085c83a 	sub	r2,r4,r2
    b278:	1884983a 	sll	r2,r3,r2
    b27c:	1444b03a 	or	r2,r2,r17
    b280:	1004c03a 	cmpne	r2,r2,zero
    b284:	40a2b03a 	or	r17,r8,r2
    b288:	0005883a 	mov	r2,zero
    b28c:	003f8606 	br	b0a8 <__alt_data_end+0xf400b0a8>
    b290:	0005883a 	mov	r2,zero
    b294:	003fdc06 	br	b208 <__alt_data_end+0xf400b208>
    b298:	0005883a 	mov	r2,zero
    b29c:	003ff706 	br	b27c <__alt_data_end+0xf400b27c>

0000b2a0 <__fixdfsi>:
    b2a0:	280cd53a 	srli	r6,r5,20
    b2a4:	00c00434 	movhi	r3,16
    b2a8:	18ffffc4 	addi	r3,r3,-1
    b2ac:	3181ffcc 	andi	r6,r6,2047
    b2b0:	01c0ff84 	movi	r7,1022
    b2b4:	28c6703a 	and	r3,r5,r3
    b2b8:	280ad7fa 	srli	r5,r5,31
    b2bc:	3980120e 	bge	r7,r6,b308 <__fixdfsi+0x68>
    b2c0:	00810744 	movi	r2,1053
    b2c4:	11800c16 	blt	r2,r6,b2f8 <__fixdfsi+0x58>
    b2c8:	00810cc4 	movi	r2,1075
    b2cc:	1185c83a 	sub	r2,r2,r6
    b2d0:	01c007c4 	movi	r7,31
    b2d4:	18c00434 	orhi	r3,r3,16
    b2d8:	38800d16 	blt	r7,r2,b310 <__fixdfsi+0x70>
    b2dc:	31befb44 	addi	r6,r6,-1043
    b2e0:	2084d83a 	srl	r2,r4,r2
    b2e4:	1986983a 	sll	r3,r3,r6
    b2e8:	1884b03a 	or	r2,r3,r2
    b2ec:	28000726 	beq	r5,zero,b30c <__fixdfsi+0x6c>
    b2f0:	0085c83a 	sub	r2,zero,r2
    b2f4:	f800283a 	ret
    b2f8:	00a00034 	movhi	r2,32768
    b2fc:	10bfffc4 	addi	r2,r2,-1
    b300:	2885883a 	add	r2,r5,r2
    b304:	f800283a 	ret
    b308:	0005883a 	mov	r2,zero
    b30c:	f800283a 	ret
    b310:	008104c4 	movi	r2,1043
    b314:	1185c83a 	sub	r2,r2,r6
    b318:	1884d83a 	srl	r2,r3,r2
    b31c:	003ff306 	br	b2ec <__alt_data_end+0xf400b2ec>

0000b320 <__floatunsidf>:
    b320:	defffe04 	addi	sp,sp,-8
    b324:	dc000015 	stw	r16,0(sp)
    b328:	dfc00115 	stw	ra,4(sp)
    b32c:	2021883a 	mov	r16,r4
    b330:	20002226 	beq	r4,zero,b3bc <__floatunsidf+0x9c>
    b334:	000b3c80 	call	b3c8 <__clzsi2>
    b338:	01010784 	movi	r4,1054
    b33c:	2089c83a 	sub	r4,r4,r2
    b340:	01810cc4 	movi	r6,1075
    b344:	310dc83a 	sub	r6,r6,r4
    b348:	00c007c4 	movi	r3,31
    b34c:	1980120e 	bge	r3,r6,b398 <__floatunsidf+0x78>
    b350:	00c104c4 	movi	r3,1043
    b354:	1907c83a 	sub	r3,r3,r4
    b358:	80ca983a 	sll	r5,r16,r3
    b35c:	00800434 	movhi	r2,16
    b360:	10bfffc4 	addi	r2,r2,-1
    b364:	2101ffcc 	andi	r4,r4,2047
    b368:	0021883a 	mov	r16,zero
    b36c:	288a703a 	and	r5,r5,r2
    b370:	2008953a 	slli	r4,r4,20
    b374:	00c00434 	movhi	r3,16
    b378:	18ffffc4 	addi	r3,r3,-1
    b37c:	28c6703a 	and	r3,r5,r3
    b380:	8005883a 	mov	r2,r16
    b384:	1906b03a 	or	r3,r3,r4
    b388:	dfc00117 	ldw	ra,4(sp)
    b38c:	dc000017 	ldw	r16,0(sp)
    b390:	dec00204 	addi	sp,sp,8
    b394:	f800283a 	ret
    b398:	00c002c4 	movi	r3,11
    b39c:	188bc83a 	sub	r5,r3,r2
    b3a0:	814ad83a 	srl	r5,r16,r5
    b3a4:	00c00434 	movhi	r3,16
    b3a8:	18ffffc4 	addi	r3,r3,-1
    b3ac:	81a0983a 	sll	r16,r16,r6
    b3b0:	2101ffcc 	andi	r4,r4,2047
    b3b4:	28ca703a 	and	r5,r5,r3
    b3b8:	003fed06 	br	b370 <__alt_data_end+0xf400b370>
    b3bc:	0009883a 	mov	r4,zero
    b3c0:	000b883a 	mov	r5,zero
    b3c4:	003fea06 	br	b370 <__alt_data_end+0xf400b370>

0000b3c8 <__clzsi2>:
    b3c8:	00bfffd4 	movui	r2,65535
    b3cc:	11000536 	bltu	r2,r4,b3e4 <__clzsi2+0x1c>
    b3d0:	00803fc4 	movi	r2,255
    b3d4:	11000f36 	bltu	r2,r4,b414 <__clzsi2+0x4c>
    b3d8:	00800804 	movi	r2,32
    b3dc:	0007883a 	mov	r3,zero
    b3e0:	00000506 	br	b3f8 <__clzsi2+0x30>
    b3e4:	00804034 	movhi	r2,256
    b3e8:	10bfffc4 	addi	r2,r2,-1
    b3ec:	11000c2e 	bgeu	r2,r4,b420 <__clzsi2+0x58>
    b3f0:	00800204 	movi	r2,8
    b3f4:	00c00604 	movi	r3,24
    b3f8:	20c8d83a 	srl	r4,r4,r3
    b3fc:	00c20074 	movhi	r3,2049
    b400:	18ead804 	addi	r3,r3,-21664
    b404:	1909883a 	add	r4,r3,r4
    b408:	20c00003 	ldbu	r3,0(r4)
    b40c:	10c5c83a 	sub	r2,r2,r3
    b410:	f800283a 	ret
    b414:	00800604 	movi	r2,24
    b418:	00c00204 	movi	r3,8
    b41c:	003ff606 	br	b3f8 <__alt_data_end+0xf400b3f8>
    b420:	00800404 	movi	r2,16
    b424:	1007883a 	mov	r3,r2
    b428:	003ff306 	br	b3f8 <__alt_data_end+0xf400b3f8>

0000b42c <__divsi3>:
    b42c:	20001b16 	blt	r4,zero,b49c <__divsi3+0x70>
    b430:	000f883a 	mov	r7,zero
    b434:	28001616 	blt	r5,zero,b490 <__divsi3+0x64>
    b438:	200d883a 	mov	r6,r4
    b43c:	29001a2e 	bgeu	r5,r4,b4a8 <__divsi3+0x7c>
    b440:	00800804 	movi	r2,32
    b444:	00c00044 	movi	r3,1
    b448:	00000106 	br	b450 <__divsi3+0x24>
    b44c:	10000d26 	beq	r2,zero,b484 <__divsi3+0x58>
    b450:	294b883a 	add	r5,r5,r5
    b454:	10bfffc4 	addi	r2,r2,-1
    b458:	18c7883a 	add	r3,r3,r3
    b45c:	293ffb36 	bltu	r5,r4,b44c <__alt_data_end+0xf400b44c>
    b460:	0005883a 	mov	r2,zero
    b464:	18000726 	beq	r3,zero,b484 <__divsi3+0x58>
    b468:	0005883a 	mov	r2,zero
    b46c:	31400236 	bltu	r6,r5,b478 <__divsi3+0x4c>
    b470:	314dc83a 	sub	r6,r6,r5
    b474:	10c4b03a 	or	r2,r2,r3
    b478:	1806d07a 	srli	r3,r3,1
    b47c:	280ad07a 	srli	r5,r5,1
    b480:	183ffa1e 	bne	r3,zero,b46c <__alt_data_end+0xf400b46c>
    b484:	38000126 	beq	r7,zero,b48c <__divsi3+0x60>
    b488:	0085c83a 	sub	r2,zero,r2
    b48c:	f800283a 	ret
    b490:	014bc83a 	sub	r5,zero,r5
    b494:	39c0005c 	xori	r7,r7,1
    b498:	003fe706 	br	b438 <__alt_data_end+0xf400b438>
    b49c:	0109c83a 	sub	r4,zero,r4
    b4a0:	01c00044 	movi	r7,1
    b4a4:	003fe306 	br	b434 <__alt_data_end+0xf400b434>
    b4a8:	00c00044 	movi	r3,1
    b4ac:	003fee06 	br	b468 <__alt_data_end+0xf400b468>

0000b4b0 <__modsi3>:
    b4b0:	20001716 	blt	r4,zero,b510 <__modsi3+0x60>
    b4b4:	000f883a 	mov	r7,zero
    b4b8:	2005883a 	mov	r2,r4
    b4bc:	28001216 	blt	r5,zero,b508 <__modsi3+0x58>
    b4c0:	2900162e 	bgeu	r5,r4,b51c <__modsi3+0x6c>
    b4c4:	01800804 	movi	r6,32
    b4c8:	00c00044 	movi	r3,1
    b4cc:	00000106 	br	b4d4 <__modsi3+0x24>
    b4d0:	30000a26 	beq	r6,zero,b4fc <__modsi3+0x4c>
    b4d4:	294b883a 	add	r5,r5,r5
    b4d8:	31bfffc4 	addi	r6,r6,-1
    b4dc:	18c7883a 	add	r3,r3,r3
    b4e0:	293ffb36 	bltu	r5,r4,b4d0 <__alt_data_end+0xf400b4d0>
    b4e4:	18000526 	beq	r3,zero,b4fc <__modsi3+0x4c>
    b4e8:	1806d07a 	srli	r3,r3,1
    b4ec:	11400136 	bltu	r2,r5,b4f4 <__modsi3+0x44>
    b4f0:	1145c83a 	sub	r2,r2,r5
    b4f4:	280ad07a 	srli	r5,r5,1
    b4f8:	183ffb1e 	bne	r3,zero,b4e8 <__alt_data_end+0xf400b4e8>
    b4fc:	38000126 	beq	r7,zero,b504 <__modsi3+0x54>
    b500:	0085c83a 	sub	r2,zero,r2
    b504:	f800283a 	ret
    b508:	014bc83a 	sub	r5,zero,r5
    b50c:	003fec06 	br	b4c0 <__alt_data_end+0xf400b4c0>
    b510:	0109c83a 	sub	r4,zero,r4
    b514:	01c00044 	movi	r7,1
    b518:	003fe706 	br	b4b8 <__alt_data_end+0xf400b4b8>
    b51c:	00c00044 	movi	r3,1
    b520:	003ff106 	br	b4e8 <__alt_data_end+0xf400b4e8>

0000b524 <__udivsi3>:
    b524:	200d883a 	mov	r6,r4
    b528:	2900152e 	bgeu	r5,r4,b580 <__udivsi3+0x5c>
    b52c:	28001416 	blt	r5,zero,b580 <__udivsi3+0x5c>
    b530:	00800804 	movi	r2,32
    b534:	00c00044 	movi	r3,1
    b538:	00000206 	br	b544 <__udivsi3+0x20>
    b53c:	10000e26 	beq	r2,zero,b578 <__udivsi3+0x54>
    b540:	28000516 	blt	r5,zero,b558 <__udivsi3+0x34>
    b544:	294b883a 	add	r5,r5,r5
    b548:	10bfffc4 	addi	r2,r2,-1
    b54c:	18c7883a 	add	r3,r3,r3
    b550:	293ffa36 	bltu	r5,r4,b53c <__alt_data_end+0xf400b53c>
    b554:	18000826 	beq	r3,zero,b578 <__udivsi3+0x54>
    b558:	0005883a 	mov	r2,zero
    b55c:	31400236 	bltu	r6,r5,b568 <__udivsi3+0x44>
    b560:	314dc83a 	sub	r6,r6,r5
    b564:	10c4b03a 	or	r2,r2,r3
    b568:	1806d07a 	srli	r3,r3,1
    b56c:	280ad07a 	srli	r5,r5,1
    b570:	183ffa1e 	bne	r3,zero,b55c <__alt_data_end+0xf400b55c>
    b574:	f800283a 	ret
    b578:	0005883a 	mov	r2,zero
    b57c:	f800283a 	ret
    b580:	00c00044 	movi	r3,1
    b584:	003ff406 	br	b558 <__alt_data_end+0xf400b558>

0000b588 <__umodsi3>:
    b588:	2005883a 	mov	r2,r4
    b58c:	2900122e 	bgeu	r5,r4,b5d8 <__umodsi3+0x50>
    b590:	28001116 	blt	r5,zero,b5d8 <__umodsi3+0x50>
    b594:	01800804 	movi	r6,32
    b598:	00c00044 	movi	r3,1
    b59c:	00000206 	br	b5a8 <__umodsi3+0x20>
    b5a0:	30000c26 	beq	r6,zero,b5d4 <__umodsi3+0x4c>
    b5a4:	28000516 	blt	r5,zero,b5bc <__umodsi3+0x34>
    b5a8:	294b883a 	add	r5,r5,r5
    b5ac:	31bfffc4 	addi	r6,r6,-1
    b5b0:	18c7883a 	add	r3,r3,r3
    b5b4:	293ffa36 	bltu	r5,r4,b5a0 <__alt_data_end+0xf400b5a0>
    b5b8:	18000626 	beq	r3,zero,b5d4 <__umodsi3+0x4c>
    b5bc:	1806d07a 	srli	r3,r3,1
    b5c0:	11400136 	bltu	r2,r5,b5c8 <__umodsi3+0x40>
    b5c4:	1145c83a 	sub	r2,r2,r5
    b5c8:	280ad07a 	srli	r5,r5,1
    b5cc:	183ffb1e 	bne	r3,zero,b5bc <__alt_data_end+0xf400b5bc>
    b5d0:	f800283a 	ret
    b5d4:	f800283a 	ret
    b5d8:	00c00044 	movi	r3,1
    b5dc:	003ff706 	br	b5bc <__alt_data_end+0xf400b5bc>

0000b5e0 <memset>:
    b5e0:	2005883a 	mov	r2,r4
    b5e4:	2007883a 	mov	r3,r4
    b5e8:	218d883a 	add	r6,r4,r6
    b5ec:	19800326 	beq	r3,r6,b5fc <memset+0x1c>
    b5f0:	19400005 	stb	r5,0(r3)
    b5f4:	18c00044 	addi	r3,r3,1
    b5f8:	003ffc06 	br	b5ec <__alt_data_end+0xf400b5ec>
    b5fc:	f800283a 	ret

0000b600 <_printf_r>:
    b600:	defffd04 	addi	sp,sp,-12
    b604:	dfc00015 	stw	ra,0(sp)
    b608:	d9800115 	stw	r6,4(sp)
    b60c:	d9c00215 	stw	r7,8(sp)
    b610:	20c00217 	ldw	r3,8(r4)
    b614:	01800074 	movhi	r6,1
    b618:	31af1804 	addi	r6,r6,-17312
    b61c:	19800115 	stw	r6,4(r3)
    b620:	280d883a 	mov	r6,r5
    b624:	21400217 	ldw	r5,8(r4)
    b628:	d9c00104 	addi	r7,sp,4
    b62c:	000b7180 	call	b718 <___vfprintf_internal_r>
    b630:	dfc00017 	ldw	ra,0(sp)
    b634:	dec00304 	addi	sp,sp,12
    b638:	f800283a 	ret

0000b63c <printf>:
    b63c:	defffc04 	addi	sp,sp,-16
    b640:	dfc00015 	stw	ra,0(sp)
    b644:	d9400115 	stw	r5,4(sp)
    b648:	d9800215 	stw	r6,8(sp)
    b64c:	d9c00315 	stw	r7,12(sp)
    b650:	00820074 	movhi	r2,2049
    b654:	10ab5204 	addi	r2,r2,-21176
    b658:	10800017 	ldw	r2,0(r2)
    b65c:	01400074 	movhi	r5,1
    b660:	296f1804 	addi	r5,r5,-17312
    b664:	10c00217 	ldw	r3,8(r2)
    b668:	d9800104 	addi	r6,sp,4
    b66c:	19400115 	stw	r5,4(r3)
    b670:	200b883a 	mov	r5,r4
    b674:	11000217 	ldw	r4,8(r2)
    b678:	000bc440 	call	bc44 <__vfprintf_internal>
    b67c:	dfc00017 	ldw	ra,0(sp)
    b680:	dec00404 	addi	sp,sp,16
    b684:	f800283a 	ret

0000b688 <_putchar_r>:
    b688:	21800217 	ldw	r6,8(r4)
    b68c:	000bd6c1 	jmpi	bd6c <_putc_r>

0000b690 <putchar>:
    b690:	00820074 	movhi	r2,2049
    b694:	10ab5204 	addi	r2,r2,-21176
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	200b883a 	mov	r5,r4
    b6a0:	11800217 	ldw	r6,8(r2)
    b6a4:	1009883a 	mov	r4,r2
    b6a8:	000bd6c1 	jmpi	bd6c <_putc_r>

0000b6ac <print_repeat>:
    b6ac:	defffb04 	addi	sp,sp,-20
    b6b0:	dc800315 	stw	r18,12(sp)
    b6b4:	dc400215 	stw	r17,8(sp)
    b6b8:	dc000115 	stw	r16,4(sp)
    b6bc:	dfc00415 	stw	ra,16(sp)
    b6c0:	2025883a 	mov	r18,r4
    b6c4:	2823883a 	mov	r17,r5
    b6c8:	d9800005 	stb	r6,0(sp)
    b6cc:	3821883a 	mov	r16,r7
    b6d0:	04000a0e 	bge	zero,r16,b6fc <print_repeat+0x50>
    b6d4:	88800117 	ldw	r2,4(r17)
    b6d8:	01c00044 	movi	r7,1
    b6dc:	d80d883a 	mov	r6,sp
    b6e0:	880b883a 	mov	r5,r17
    b6e4:	9009883a 	mov	r4,r18
    b6e8:	103ee83a 	callr	r2
    b6ec:	843fffc4 	addi	r16,r16,-1
    b6f0:	103ff726 	beq	r2,zero,b6d0 <__alt_data_end+0xf400b6d0>
    b6f4:	00bfffc4 	movi	r2,-1
    b6f8:	00000106 	br	b700 <print_repeat+0x54>
    b6fc:	0005883a 	mov	r2,zero
    b700:	dfc00417 	ldw	ra,16(sp)
    b704:	dc800317 	ldw	r18,12(sp)
    b708:	dc400217 	ldw	r17,8(sp)
    b70c:	dc000117 	ldw	r16,4(sp)
    b710:	dec00504 	addi	sp,sp,20
    b714:	f800283a 	ret

0000b718 <___vfprintf_internal_r>:
    b718:	deffe504 	addi	sp,sp,-108
    b71c:	d8c00804 	addi	r3,sp,32
    b720:	ddc01815 	stw	r23,96(sp)
    b724:	dd801715 	stw	r22,92(sp)
    b728:	dd401615 	stw	r21,88(sp)
    b72c:	dd001515 	stw	r20,84(sp)
    b730:	dcc01415 	stw	r19,80(sp)
    b734:	dc801315 	stw	r18,76(sp)
    b738:	dc401215 	stw	r17,72(sp)
    b73c:	dc001115 	stw	r16,68(sp)
    b740:	dfc01a15 	stw	ra,104(sp)
    b744:	df001915 	stw	fp,100(sp)
    b748:	2029883a 	mov	r20,r4
    b74c:	2823883a 	mov	r17,r5
    b750:	382d883a 	mov	r22,r7
    b754:	d9800f15 	stw	r6,60(sp)
    b758:	0021883a 	mov	r16,zero
    b75c:	d8000e15 	stw	zero,56(sp)
    b760:	d8000a15 	stw	zero,40(sp)
    b764:	002b883a 	mov	r21,zero
    b768:	0027883a 	mov	r19,zero
    b76c:	0025883a 	mov	r18,zero
    b770:	d8000c15 	stw	zero,48(sp)
    b774:	d8000b15 	stw	zero,44(sp)
    b778:	002f883a 	mov	r23,zero
    b77c:	d8c00915 	stw	r3,36(sp)
    b780:	d8c00f17 	ldw	r3,60(sp)
    b784:	19000003 	ldbu	r4,0(r3)
    b788:	20803fcc 	andi	r2,r4,255
    b78c:	1080201c 	xori	r2,r2,128
    b790:	10bfe004 	addi	r2,r2,-128
    b794:	10011e26 	beq	r2,zero,bc10 <___vfprintf_internal_r+0x4f8>
    b798:	00c00044 	movi	r3,1
    b79c:	b8c01426 	beq	r23,r3,b7f0 <___vfprintf_internal_r+0xd8>
    b7a0:	1dc00216 	blt	r3,r23,b7ac <___vfprintf_internal_r+0x94>
    b7a4:	b8000626 	beq	r23,zero,b7c0 <___vfprintf_internal_r+0xa8>
    b7a8:	00011506 	br	bc00 <___vfprintf_internal_r+0x4e8>
    b7ac:	01400084 	movi	r5,2
    b7b0:	b9401d26 	beq	r23,r5,b828 <___vfprintf_internal_r+0x110>
    b7b4:	014000c4 	movi	r5,3
    b7b8:	b9402b26 	beq	r23,r5,b868 <___vfprintf_internal_r+0x150>
    b7bc:	00011006 	br	bc00 <___vfprintf_internal_r+0x4e8>
    b7c0:	01400944 	movi	r5,37
    b7c4:	1140fc26 	beq	r2,r5,bbb8 <___vfprintf_internal_r+0x4a0>
    b7c8:	88800117 	ldw	r2,4(r17)
    b7cc:	d9000005 	stb	r4,0(sp)
    b7d0:	01c00044 	movi	r7,1
    b7d4:	d80d883a 	mov	r6,sp
    b7d8:	880b883a 	mov	r5,r17
    b7dc:	a009883a 	mov	r4,r20
    b7e0:	103ee83a 	callr	r2
    b7e4:	1000d81e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    b7e8:	84000044 	addi	r16,r16,1
    b7ec:	00010406 	br	bc00 <___vfprintf_internal_r+0x4e8>
    b7f0:	01400c04 	movi	r5,48
    b7f4:	1140fa26 	beq	r2,r5,bbe0 <___vfprintf_internal_r+0x4c8>
    b7f8:	01400944 	movi	r5,37
    b7fc:	11400a1e 	bne	r2,r5,b828 <___vfprintf_internal_r+0x110>
    b800:	d8800005 	stb	r2,0(sp)
    b804:	88800117 	ldw	r2,4(r17)
    b808:	b80f883a 	mov	r7,r23
    b80c:	d80d883a 	mov	r6,sp
    b810:	880b883a 	mov	r5,r17
    b814:	a009883a 	mov	r4,r20
    b818:	103ee83a 	callr	r2
    b81c:	1000ca1e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    b820:	84000044 	addi	r16,r16,1
    b824:	0000f506 	br	bbfc <___vfprintf_internal_r+0x4e4>
    b828:	25fff404 	addi	r23,r4,-48
    b82c:	bdc03fcc 	andi	r23,r23,255
    b830:	00c00244 	movi	r3,9
    b834:	1dc00936 	bltu	r3,r23,b85c <___vfprintf_internal_r+0x144>
    b838:	00bfffc4 	movi	r2,-1
    b83c:	90800426 	beq	r18,r2,b850 <___vfprintf_internal_r+0x138>
    b840:	01400284 	movi	r5,10
    b844:	9009883a 	mov	r4,r18
    b848:	00096640 	call	9664 <__mulsi3>
    b84c:	00000106 	br	b854 <___vfprintf_internal_r+0x13c>
    b850:	0005883a 	mov	r2,zero
    b854:	b8a5883a 	add	r18,r23,r2
    b858:	0000e206 	br	bbe4 <___vfprintf_internal_r+0x4cc>
    b85c:	01400b84 	movi	r5,46
    b860:	1140e426 	beq	r2,r5,bbf4 <___vfprintf_internal_r+0x4dc>
    b864:	05c00084 	movi	r23,2
    b868:	213ff404 	addi	r4,r4,-48
    b86c:	27003fcc 	andi	fp,r4,255
    b870:	00c00244 	movi	r3,9
    b874:	1f000936 	bltu	r3,fp,b89c <___vfprintf_internal_r+0x184>
    b878:	00bfffc4 	movi	r2,-1
    b87c:	98800426 	beq	r19,r2,b890 <___vfprintf_internal_r+0x178>
    b880:	01400284 	movi	r5,10
    b884:	9809883a 	mov	r4,r19
    b888:	00096640 	call	9664 <__mulsi3>
    b88c:	00000106 	br	b894 <___vfprintf_internal_r+0x17c>
    b890:	0005883a 	mov	r2,zero
    b894:	e0a7883a 	add	r19,fp,r2
    b898:	0000d906 	br	bc00 <___vfprintf_internal_r+0x4e8>
    b89c:	00c01b04 	movi	r3,108
    b8a0:	10c0d226 	beq	r2,r3,bbec <___vfprintf_internal_r+0x4d4>
    b8a4:	013fffc4 	movi	r4,-1
    b8a8:	99000226 	beq	r19,r4,b8b4 <___vfprintf_internal_r+0x19c>
    b8ac:	d8000b15 	stw	zero,44(sp)
    b8b0:	00000106 	br	b8b8 <___vfprintf_internal_r+0x1a0>
    b8b4:	04c00044 	movi	r19,1
    b8b8:	01001a44 	movi	r4,105
    b8bc:	11001626 	beq	r2,r4,b918 <___vfprintf_internal_r+0x200>
    b8c0:	20800916 	blt	r4,r2,b8e8 <___vfprintf_internal_r+0x1d0>
    b8c4:	010018c4 	movi	r4,99
    b8c8:	11008826 	beq	r2,r4,baec <___vfprintf_internal_r+0x3d4>
    b8cc:	01001904 	movi	r4,100
    b8d0:	11001126 	beq	r2,r4,b918 <___vfprintf_internal_r+0x200>
    b8d4:	01001604 	movi	r4,88
    b8d8:	1100c81e 	bne	r2,r4,bbfc <___vfprintf_internal_r+0x4e4>
    b8dc:	00c00044 	movi	r3,1
    b8e0:	d8c00e15 	stw	r3,56(sp)
    b8e4:	00001506 	br	b93c <___vfprintf_internal_r+0x224>
    b8e8:	01001cc4 	movi	r4,115
    b8ec:	11009826 	beq	r2,r4,bb50 <___vfprintf_internal_r+0x438>
    b8f0:	20800416 	blt	r4,r2,b904 <___vfprintf_internal_r+0x1ec>
    b8f4:	01001bc4 	movi	r4,111
    b8f8:	1100c01e 	bne	r2,r4,bbfc <___vfprintf_internal_r+0x4e4>
    b8fc:	05400204 	movi	r21,8
    b900:	00000f06 	br	b940 <___vfprintf_internal_r+0x228>
    b904:	01001d44 	movi	r4,117
    b908:	11000d26 	beq	r2,r4,b940 <___vfprintf_internal_r+0x228>
    b90c:	01001e04 	movi	r4,120
    b910:	11000a26 	beq	r2,r4,b93c <___vfprintf_internal_r+0x224>
    b914:	0000b906 	br	bbfc <___vfprintf_internal_r+0x4e4>
    b918:	d8c00a17 	ldw	r3,40(sp)
    b91c:	b7000104 	addi	fp,r22,4
    b920:	18000726 	beq	r3,zero,b940 <___vfprintf_internal_r+0x228>
    b924:	df000d15 	stw	fp,52(sp)
    b928:	b5c00017 	ldw	r23,0(r22)
    b92c:	b800080e 	bge	r23,zero,b950 <___vfprintf_internal_r+0x238>
    b930:	05efc83a 	sub	r23,zero,r23
    b934:	02400044 	movi	r9,1
    b938:	00000606 	br	b954 <___vfprintf_internal_r+0x23c>
    b93c:	05400404 	movi	r21,16
    b940:	b0c00104 	addi	r3,r22,4
    b944:	d8c00d15 	stw	r3,52(sp)
    b948:	b5c00017 	ldw	r23,0(r22)
    b94c:	d8000a15 	stw	zero,40(sp)
    b950:	0013883a 	mov	r9,zero
    b954:	d839883a 	mov	fp,sp
    b958:	b8001726 	beq	r23,zero,b9b8 <___vfprintf_internal_r+0x2a0>
    b95c:	a80b883a 	mov	r5,r21
    b960:	b809883a 	mov	r4,r23
    b964:	da401015 	stw	r9,64(sp)
    b968:	000b5240 	call	b524 <__udivsi3>
    b96c:	a80b883a 	mov	r5,r21
    b970:	1009883a 	mov	r4,r2
    b974:	102d883a 	mov	r22,r2
    b978:	00096640 	call	9664 <__mulsi3>
    b97c:	b885c83a 	sub	r2,r23,r2
    b980:	00c00244 	movi	r3,9
    b984:	da401017 	ldw	r9,64(sp)
    b988:	18800216 	blt	r3,r2,b994 <___vfprintf_internal_r+0x27c>
    b98c:	10800c04 	addi	r2,r2,48
    b990:	00000506 	br	b9a8 <___vfprintf_internal_r+0x290>
    b994:	d8c00e17 	ldw	r3,56(sp)
    b998:	18000226 	beq	r3,zero,b9a4 <___vfprintf_internal_r+0x28c>
    b99c:	10800dc4 	addi	r2,r2,55
    b9a0:	00000106 	br	b9a8 <___vfprintf_internal_r+0x290>
    b9a4:	108015c4 	addi	r2,r2,87
    b9a8:	e0800005 	stb	r2,0(fp)
    b9ac:	b02f883a 	mov	r23,r22
    b9b0:	e7000044 	addi	fp,fp,1
    b9b4:	003fe806 	br	b958 <__alt_data_end+0xf400b958>
    b9b8:	e6efc83a 	sub	r23,fp,sp
    b9bc:	9dc5c83a 	sub	r2,r19,r23
    b9c0:	0080090e 	bge	zero,r2,b9e8 <___vfprintf_internal_r+0x2d0>
    b9c4:	e085883a 	add	r2,fp,r2
    b9c8:	01400c04 	movi	r5,48
    b9cc:	d8c00917 	ldw	r3,36(sp)
    b9d0:	e009883a 	mov	r4,fp
    b9d4:	e0c0032e 	bgeu	fp,r3,b9e4 <___vfprintf_internal_r+0x2cc>
    b9d8:	e7000044 	addi	fp,fp,1
    b9dc:	21400005 	stb	r5,0(r4)
    b9e0:	e0bffa1e 	bne	fp,r2,b9cc <__alt_data_end+0xf400b9cc>
    b9e4:	e6efc83a 	sub	r23,fp,sp
    b9e8:	d8c00b17 	ldw	r3,44(sp)
    b9ec:	4dd1883a 	add	r8,r9,r23
    b9f0:	922dc83a 	sub	r22,r18,r8
    b9f4:	18001626 	beq	r3,zero,ba50 <___vfprintf_internal_r+0x338>
    b9f8:	48000a26 	beq	r9,zero,ba24 <___vfprintf_internal_r+0x30c>
    b9fc:	00800b44 	movi	r2,45
    ba00:	d8800805 	stb	r2,32(sp)
    ba04:	88800117 	ldw	r2,4(r17)
    ba08:	01c00044 	movi	r7,1
    ba0c:	d9800804 	addi	r6,sp,32
    ba10:	880b883a 	mov	r5,r17
    ba14:	a009883a 	mov	r4,r20
    ba18:	103ee83a 	callr	r2
    ba1c:	10004a1e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    ba20:	84000044 	addi	r16,r16,1
    ba24:	0580070e 	bge	zero,r22,ba44 <___vfprintf_internal_r+0x32c>
    ba28:	b00f883a 	mov	r7,r22
    ba2c:	01800c04 	movi	r6,48
    ba30:	880b883a 	mov	r5,r17
    ba34:	a009883a 	mov	r4,r20
    ba38:	000b6ac0 	call	b6ac <print_repeat>
    ba3c:	1000421e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    ba40:	85a1883a 	add	r16,r16,r22
    ba44:	e02d883a 	mov	r22,fp
    ba48:	bf2fc83a 	sub	r23,r23,fp
    ba4c:	00002006 	br	bad0 <___vfprintf_internal_r+0x3b8>
    ba50:	0580090e 	bge	zero,r22,ba78 <___vfprintf_internal_r+0x360>
    ba54:	b00f883a 	mov	r7,r22
    ba58:	01800804 	movi	r6,32
    ba5c:	880b883a 	mov	r5,r17
    ba60:	a009883a 	mov	r4,r20
    ba64:	da401015 	stw	r9,64(sp)
    ba68:	000b6ac0 	call	b6ac <print_repeat>
    ba6c:	da401017 	ldw	r9,64(sp)
    ba70:	1000351e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    ba74:	85a1883a 	add	r16,r16,r22
    ba78:	483ff226 	beq	r9,zero,ba44 <__alt_data_end+0xf400ba44>
    ba7c:	00800b44 	movi	r2,45
    ba80:	d8800805 	stb	r2,32(sp)
    ba84:	88800117 	ldw	r2,4(r17)
    ba88:	01c00044 	movi	r7,1
    ba8c:	d9800804 	addi	r6,sp,32
    ba90:	880b883a 	mov	r5,r17
    ba94:	a009883a 	mov	r4,r20
    ba98:	103ee83a 	callr	r2
    ba9c:	10002a1e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    baa0:	84000044 	addi	r16,r16,1
    baa4:	003fe706 	br	ba44 <__alt_data_end+0xf400ba44>
    baa8:	b5bfffc4 	addi	r22,r22,-1
    baac:	b0800003 	ldbu	r2,0(r22)
    bab0:	01c00044 	movi	r7,1
    bab4:	d9800804 	addi	r6,sp,32
    bab8:	d8800805 	stb	r2,32(sp)
    babc:	88800117 	ldw	r2,4(r17)
    bac0:	880b883a 	mov	r5,r17
    bac4:	a009883a 	mov	r4,r20
    bac8:	103ee83a 	callr	r2
    bacc:	10001e1e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    bad0:	8585c83a 	sub	r2,r16,r22
    bad4:	b5c9883a 	add	r4,r22,r23
    bad8:	e085883a 	add	r2,fp,r2
    badc:	013ff216 	blt	zero,r4,baa8 <__alt_data_end+0xf400baa8>
    bae0:	1021883a 	mov	r16,r2
    bae4:	dd800d17 	ldw	r22,52(sp)
    bae8:	00004406 	br	bbfc <___vfprintf_internal_r+0x4e4>
    baec:	00800044 	movi	r2,1
    baf0:	1480080e 	bge	r2,r18,bb14 <___vfprintf_internal_r+0x3fc>
    baf4:	95ffffc4 	addi	r23,r18,-1
    baf8:	b80f883a 	mov	r7,r23
    bafc:	01800804 	movi	r6,32
    bb00:	880b883a 	mov	r5,r17
    bb04:	a009883a 	mov	r4,r20
    bb08:	000b6ac0 	call	b6ac <print_repeat>
    bb0c:	10000e1e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    bb10:	85e1883a 	add	r16,r16,r23
    bb14:	b0800017 	ldw	r2,0(r22)
    bb18:	01c00044 	movi	r7,1
    bb1c:	d80d883a 	mov	r6,sp
    bb20:	d8800005 	stb	r2,0(sp)
    bb24:	88800117 	ldw	r2,4(r17)
    bb28:	880b883a 	mov	r5,r17
    bb2c:	a009883a 	mov	r4,r20
    bb30:	b5c00104 	addi	r23,r22,4
    bb34:	103ee83a 	callr	r2
    bb38:	1000031e 	bne	r2,zero,bb48 <___vfprintf_internal_r+0x430>
    bb3c:	84000044 	addi	r16,r16,1
    bb40:	b82d883a 	mov	r22,r23
    bb44:	00002d06 	br	bbfc <___vfprintf_internal_r+0x4e4>
    bb48:	00bfffc4 	movi	r2,-1
    bb4c:	00003106 	br	bc14 <___vfprintf_internal_r+0x4fc>
    bb50:	b5c00017 	ldw	r23,0(r22)
    bb54:	b7000104 	addi	fp,r22,4
    bb58:	b809883a 	mov	r4,r23
    bb5c:	000bdc40 	call	bdc4 <strlen>
    bb60:	9091c83a 	sub	r8,r18,r2
    bb64:	102d883a 	mov	r22,r2
    bb68:	0200090e 	bge	zero,r8,bb90 <___vfprintf_internal_r+0x478>
    bb6c:	400f883a 	mov	r7,r8
    bb70:	01800804 	movi	r6,32
    bb74:	880b883a 	mov	r5,r17
    bb78:	a009883a 	mov	r4,r20
    bb7c:	da001015 	stw	r8,64(sp)
    bb80:	000b6ac0 	call	b6ac <print_repeat>
    bb84:	da001017 	ldw	r8,64(sp)
    bb88:	103fef1e 	bne	r2,zero,bb48 <__alt_data_end+0xf400bb48>
    bb8c:	8221883a 	add	r16,r16,r8
    bb90:	88800117 	ldw	r2,4(r17)
    bb94:	b00f883a 	mov	r7,r22
    bb98:	b80d883a 	mov	r6,r23
    bb9c:	880b883a 	mov	r5,r17
    bba0:	a009883a 	mov	r4,r20
    bba4:	103ee83a 	callr	r2
    bba8:	103fe71e 	bne	r2,zero,bb48 <__alt_data_end+0xf400bb48>
    bbac:	85a1883a 	add	r16,r16,r22
    bbb0:	e02d883a 	mov	r22,fp
    bbb4:	00001106 	br	bbfc <___vfprintf_internal_r+0x4e4>
    bbb8:	00c00044 	movi	r3,1
    bbbc:	04ffffc4 	movi	r19,-1
    bbc0:	d8000e15 	stw	zero,56(sp)
    bbc4:	d8c00a15 	stw	r3,40(sp)
    bbc8:	05400284 	movi	r21,10
    bbcc:	9825883a 	mov	r18,r19
    bbd0:	d8000c15 	stw	zero,48(sp)
    bbd4:	d8000b15 	stw	zero,44(sp)
    bbd8:	182f883a 	mov	r23,r3
    bbdc:	00000806 	br	bc00 <___vfprintf_internal_r+0x4e8>
    bbe0:	ddc00b15 	stw	r23,44(sp)
    bbe4:	05c00084 	movi	r23,2
    bbe8:	00000506 	br	bc00 <___vfprintf_internal_r+0x4e8>
    bbec:	00c00044 	movi	r3,1
    bbf0:	d8c00c15 	stw	r3,48(sp)
    bbf4:	05c000c4 	movi	r23,3
    bbf8:	00000106 	br	bc00 <___vfprintf_internal_r+0x4e8>
    bbfc:	002f883a 	mov	r23,zero
    bc00:	d8c00f17 	ldw	r3,60(sp)
    bc04:	18c00044 	addi	r3,r3,1
    bc08:	d8c00f15 	stw	r3,60(sp)
    bc0c:	003edc06 	br	b780 <__alt_data_end+0xf400b780>
    bc10:	8005883a 	mov	r2,r16
    bc14:	dfc01a17 	ldw	ra,104(sp)
    bc18:	df001917 	ldw	fp,100(sp)
    bc1c:	ddc01817 	ldw	r23,96(sp)
    bc20:	dd801717 	ldw	r22,92(sp)
    bc24:	dd401617 	ldw	r21,88(sp)
    bc28:	dd001517 	ldw	r20,84(sp)
    bc2c:	dcc01417 	ldw	r19,80(sp)
    bc30:	dc801317 	ldw	r18,76(sp)
    bc34:	dc401217 	ldw	r17,72(sp)
    bc38:	dc001117 	ldw	r16,68(sp)
    bc3c:	dec01b04 	addi	sp,sp,108
    bc40:	f800283a 	ret

0000bc44 <__vfprintf_internal>:
    bc44:	00820074 	movhi	r2,2049
    bc48:	10ab5204 	addi	r2,r2,-21176
    bc4c:	300f883a 	mov	r7,r6
    bc50:	280d883a 	mov	r6,r5
    bc54:	200b883a 	mov	r5,r4
    bc58:	11000017 	ldw	r4,0(r2)
    bc5c:	000b7181 	jmpi	b718 <___vfprintf_internal_r>

0000bc60 <__sfvwrite_small_dev>:
    bc60:	2880000b 	ldhu	r2,0(r5)
    bc64:	1080020c 	andi	r2,r2,8
    bc68:	10002126 	beq	r2,zero,bcf0 <__sfvwrite_small_dev+0x90>
    bc6c:	2880008f 	ldh	r2,2(r5)
    bc70:	defffa04 	addi	sp,sp,-24
    bc74:	dc000015 	stw	r16,0(sp)
    bc78:	dfc00515 	stw	ra,20(sp)
    bc7c:	dd000415 	stw	r20,16(sp)
    bc80:	dcc00315 	stw	r19,12(sp)
    bc84:	dc800215 	stw	r18,8(sp)
    bc88:	dc400115 	stw	r17,4(sp)
    bc8c:	2821883a 	mov	r16,r5
    bc90:	10001216 	blt	r2,zero,bcdc <__sfvwrite_small_dev+0x7c>
    bc94:	2027883a 	mov	r19,r4
    bc98:	3025883a 	mov	r18,r6
    bc9c:	3823883a 	mov	r17,r7
    bca0:	05010004 	movi	r20,1024
    bca4:	04400b0e 	bge	zero,r17,bcd4 <__sfvwrite_small_dev+0x74>
    bca8:	880f883a 	mov	r7,r17
    bcac:	a440010e 	bge	r20,r17,bcb4 <__sfvwrite_small_dev+0x54>
    bcb0:	01c10004 	movi	r7,1024
    bcb4:	8140008f 	ldh	r5,2(r16)
    bcb8:	900d883a 	mov	r6,r18
    bcbc:	9809883a 	mov	r4,r19
    bcc0:	000bde00 	call	bde0 <_write_r>
    bcc4:	0080050e 	bge	zero,r2,bcdc <__sfvwrite_small_dev+0x7c>
    bcc8:	88a3c83a 	sub	r17,r17,r2
    bccc:	90a5883a 	add	r18,r18,r2
    bcd0:	003ff406 	br	bca4 <__alt_data_end+0xf400bca4>
    bcd4:	0005883a 	mov	r2,zero
    bcd8:	00000706 	br	bcf8 <__sfvwrite_small_dev+0x98>
    bcdc:	8080000b 	ldhu	r2,0(r16)
    bce0:	10801014 	ori	r2,r2,64
    bce4:	8080000d 	sth	r2,0(r16)
    bce8:	00bfffc4 	movi	r2,-1
    bcec:	00000206 	br	bcf8 <__sfvwrite_small_dev+0x98>
    bcf0:	00bfffc4 	movi	r2,-1
    bcf4:	f800283a 	ret
    bcf8:	dfc00517 	ldw	ra,20(sp)
    bcfc:	dd000417 	ldw	r20,16(sp)
    bd00:	dcc00317 	ldw	r19,12(sp)
    bd04:	dc800217 	ldw	r18,8(sp)
    bd08:	dc400117 	ldw	r17,4(sp)
    bd0c:	dc000017 	ldw	r16,0(sp)
    bd10:	dec00604 	addi	sp,sp,24
    bd14:	f800283a 	ret

0000bd18 <putc>:
    bd18:	defffd04 	addi	sp,sp,-12
    bd1c:	00800074 	movhi	r2,1
    bd20:	dc000115 	stw	r16,4(sp)
    bd24:	dfc00215 	stw	ra,8(sp)
    bd28:	10af1804 	addi	r2,r2,-17312
    bd2c:	28800115 	stw	r2,4(r5)
    bd30:	00820074 	movhi	r2,2049
    bd34:	10ab5204 	addi	r2,r2,-21176
    bd38:	d9000005 	stb	r4,0(sp)
    bd3c:	2021883a 	mov	r16,r4
    bd40:	11000017 	ldw	r4,0(r2)
    bd44:	01c00044 	movi	r7,1
    bd48:	d80d883a 	mov	r6,sp
    bd4c:	000bc600 	call	bc60 <__sfvwrite_small_dev>
    bd50:	00ffffc4 	movi	r3,-1
    bd54:	10c00126 	beq	r2,r3,bd5c <putc+0x44>
    bd58:	8005883a 	mov	r2,r16
    bd5c:	dfc00217 	ldw	ra,8(sp)
    bd60:	dc000117 	ldw	r16,4(sp)
    bd64:	dec00304 	addi	sp,sp,12
    bd68:	f800283a 	ret

0000bd6c <_putc_r>:
    bd6c:	defffd04 	addi	sp,sp,-12
    bd70:	00800074 	movhi	r2,1
    bd74:	dc000115 	stw	r16,4(sp)
    bd78:	dfc00215 	stw	ra,8(sp)
    bd7c:	10af1804 	addi	r2,r2,-17312
    bd80:	30800115 	stw	r2,4(r6)
    bd84:	00820074 	movhi	r2,2049
    bd88:	10ab5204 	addi	r2,r2,-21176
    bd8c:	11000017 	ldw	r4,0(r2)
    bd90:	2821883a 	mov	r16,r5
    bd94:	01c00044 	movi	r7,1
    bd98:	300b883a 	mov	r5,r6
    bd9c:	d80d883a 	mov	r6,sp
    bda0:	dc000005 	stb	r16,0(sp)
    bda4:	000bc600 	call	bc60 <__sfvwrite_small_dev>
    bda8:	00ffffc4 	movi	r3,-1
    bdac:	10c00126 	beq	r2,r3,bdb4 <_putc_r+0x48>
    bdb0:	8005883a 	mov	r2,r16
    bdb4:	dfc00217 	ldw	ra,8(sp)
    bdb8:	dc000117 	ldw	r16,4(sp)
    bdbc:	dec00304 	addi	sp,sp,12
    bdc0:	f800283a 	ret

0000bdc4 <strlen>:
    bdc4:	2005883a 	mov	r2,r4
    bdc8:	10c00007 	ldb	r3,0(r2)
    bdcc:	18000226 	beq	r3,zero,bdd8 <strlen+0x14>
    bdd0:	10800044 	addi	r2,r2,1
    bdd4:	003ffc06 	br	bdc8 <__alt_data_end+0xf400bdc8>
    bdd8:	1105c83a 	sub	r2,r2,r4
    bddc:	f800283a 	ret

0000bde0 <_write_r>:
    bde0:	defffd04 	addi	sp,sp,-12
    bde4:	dc000015 	stw	r16,0(sp)
    bde8:	04020074 	movhi	r16,2049
    bdec:	dc400115 	stw	r17,4(sp)
    bdf0:	842b5704 	addi	r16,r16,-21156
    bdf4:	2023883a 	mov	r17,r4
    bdf8:	2809883a 	mov	r4,r5
    bdfc:	300b883a 	mov	r5,r6
    be00:	380d883a 	mov	r6,r7
    be04:	dfc00215 	stw	ra,8(sp)
    be08:	80000015 	stw	zero,0(r16)
    be0c:	000bf800 	call	bf80 <write>
    be10:	00ffffc4 	movi	r3,-1
    be14:	10c0031e 	bne	r2,r3,be24 <_write_r+0x44>
    be18:	80c00017 	ldw	r3,0(r16)
    be1c:	18000126 	beq	r3,zero,be24 <_write_r+0x44>
    be20:	88c00015 	stw	r3,0(r17)
    be24:	dfc00217 	ldw	ra,8(sp)
    be28:	dc400117 	ldw	r17,4(sp)
    be2c:	dc000017 	ldw	r16,0(sp)
    be30:	dec00304 	addi	sp,sp,12
    be34:	f800283a 	ret

0000be38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    be38:	deffff04 	addi	sp,sp,-4
    be3c:	01020074 	movhi	r4,2049
    be40:	01400074 	movhi	r5,1
    be44:	dfc00015 	stw	ra,0(sp)
    be48:	212b1804 	addi	r4,r4,-21408
    be4c:	295b4c04 	addi	r5,r5,27952

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    be50:	2140061e 	bne	r4,r5,be6c <alt_load+0x34>
    be54:	01000074 	movhi	r4,1
    be58:	01400074 	movhi	r5,1
    be5c:	21200804 	addi	r4,r4,-32736
    be60:	29600804 	addi	r5,r5,-32736
    be64:	2140121e 	bne	r4,r5,beb0 <alt_load+0x78>
    be68:	00000b06 	br	be98 <alt_load+0x60>
    be6c:	00c20074 	movhi	r3,2049
    be70:	18eb5704 	addi	r3,r3,-21156
    be74:	1907c83a 	sub	r3,r3,r4
    be78:	0005883a 	mov	r2,zero
  {
    while( to != end )
    be7c:	10fff526 	beq	r2,r3,be54 <__alt_data_end+0xf400be54>
    {
      *to++ = *from++;
    be80:	114f883a 	add	r7,r2,r5
    be84:	39c00017 	ldw	r7,0(r7)
    be88:	110d883a 	add	r6,r2,r4
    be8c:	10800104 	addi	r2,r2,4
    be90:	31c00015 	stw	r7,0(r6)
    be94:	003ff906 	br	be7c <__alt_data_end+0xf400be7c>
    be98:	01020034 	movhi	r4,2048
    be9c:	01400074 	movhi	r5,1
    bea0:	21000004 	addi	r4,r4,0
    bea4:	29703404 	addi	r5,r5,-16176

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    bea8:	2140101e 	bne	r4,r5,beec <alt_load+0xb4>
    beac:	00000b06 	br	bedc <alt_load+0xa4>
    beb0:	00c00074 	movhi	r3,1
    beb4:	18e00804 	addi	r3,r3,-32736
    beb8:	1907c83a 	sub	r3,r3,r4
    bebc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    bec0:	10fff526 	beq	r2,r3,be98 <__alt_data_end+0xf400be98>
    {
      *to++ = *from++;
    bec4:	114f883a 	add	r7,r2,r5
    bec8:	39c00017 	ldw	r7,0(r7)
    becc:	110d883a 	add	r6,r2,r4
    bed0:	10800104 	addi	r2,r2,4
    bed4:	31c00015 	stw	r7,0(r6)
    bed8:	003ff906 	br	bec0 <__alt_data_end+0xf400bec0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bedc:	000c0c00 	call	c0c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    bee0:	dfc00017 	ldw	ra,0(sp)
    bee4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    bee8:	000c0c41 	jmpi	c0c4 <alt_icache_flush_all>
    beec:	00c20074 	movhi	r3,2049
    bef0:	18eb1804 	addi	r3,r3,-21408
    bef4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    bef8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    befc:	18bff726 	beq	r3,r2,bedc <__alt_data_end+0xf400bedc>
    {
      *to++ = *from++;
    bf00:	114f883a 	add	r7,r2,r5
    bf04:	39c00017 	ldw	r7,0(r7)
    bf08:	110d883a 	add	r6,r2,r4
    bf0c:	10800104 	addi	r2,r2,4
    bf10:	31c00015 	stw	r7,0(r6)
    bf14:	003ff906 	br	befc <__alt_data_end+0xf400befc>

0000bf18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    bf18:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bf1c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    bf20:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bf24:	000bfe00 	call	bfe0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    bf28:	000c0000 	call	c000 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    bf2c:	d1a00817 	ldw	r6,-32736(gp)
    bf30:	d1600917 	ldw	r5,-32732(gp)
    bf34:	d1200a17 	ldw	r4,-32728(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    bf38:	dfc00017 	ldw	ra,0(sp)
    bf3c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    bf40:	00092a01 	jmpi	92a0 <main>

0000bf44 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    bf44:	defffe04 	addi	sp,sp,-8
    bf48:	dc000015 	stw	r16,0(sp)
    bf4c:	dfc00115 	stw	ra,4(sp)
    bf50:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    bf54:	000bdc40 	call	bdc4 <strlen>
    bf58:	01020074 	movhi	r4,2049
    bf5c:	000f883a 	mov	r7,zero
    bf60:	100d883a 	mov	r6,r2
    bf64:	800b883a 	mov	r5,r16
    bf68:	212b5504 	addi	r4,r4,-21164
#else
    return fputs(str, stdout);
#endif
#endif
}
    bf6c:	dfc00117 	ldw	ra,4(sp)
    bf70:	dc000017 	ldw	r16,0(sp)
    bf74:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    bf78:	000c0041 	jmpi	c004 <altera_avalon_jtag_uart_write>

0000bf7c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    bf7c:	000c0381 	jmpi	c038 <alt_busy_sleep>

0000bf80 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    bf80:	00800044 	movi	r2,1
    bf84:	20800226 	beq	r4,r2,bf90 <write+0x10>
    bf88:	00800084 	movi	r2,2
    bf8c:	2080041e 	bne	r4,r2,bfa0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    bf90:	01020074 	movhi	r4,2049
    bf94:	000f883a 	mov	r7,zero
    bf98:	212b5504 	addi	r4,r4,-21164
    bf9c:	000c0041 	jmpi	c004 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    bfa0:	d0a00617 	ldw	r2,-32744(gp)
    bfa4:	10000926 	beq	r2,zero,bfcc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bfa8:	deffff04 	addi	sp,sp,-4
    bfac:	dfc00015 	stw	ra,0(sp)
    bfb0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    bfb4:	00c01444 	movi	r3,81
    bfb8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    bfbc:	00bfffc4 	movi	r2,-1
    bfc0:	dfc00017 	ldw	ra,0(sp)
    bfc4:	dec00104 	addi	sp,sp,4
    bfc8:	f800283a 	ret
    bfcc:	d0a00704 	addi	r2,gp,-32740
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    bfd0:	00c01444 	movi	r3,81
    bfd4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    bfd8:	00bfffc4 	movi	r2,-1
    bfdc:	f800283a 	ret

0000bfe0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    bfe0:	deffff04 	addi	sp,sp,-4
    bfe4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    bfe8:	000c0c80 	call	c0c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bfec:	00800044 	movi	r2,1
    bff0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    bff4:	dfc00017 	ldw	ra,0(sp)
    bff8:	dec00104 	addi	sp,sp,4
    bffc:	f800283a 	ret

0000c000 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c000:	f800283a 	ret

0000c004 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    c004:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c008:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    c00c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    c010:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    c014:	2980072e 	bgeu	r5,r6,c034 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    c018:	38c00037 	ldwio	r3,0(r7)
    c01c:	18ffffec 	andhi	r3,r3,65535
    c020:	183ffc26 	beq	r3,zero,c014 <__alt_data_end+0xf400c014>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    c024:	28c00007 	ldb	r3,0(r5)
    c028:	20c00035 	stwio	r3,0(r4)
    c02c:	29400044 	addi	r5,r5,1
    c030:	003ff806 	br	c014 <__alt_data_end+0xf400c014>

  return count;
}
    c034:	f800283a 	ret

0000c038 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    c038:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    c03c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    c040:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    c044:	dc000015 	stw	r16,0(sp)
    c048:	dfc00115 	stw	ra,4(sp)
    c04c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    c050:	000b5240 	call	b524 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    c054:	10001026 	beq	r2,zero,c098 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    c058:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    c05c:	013999b4 	movhi	r4,58982
    c060:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    c064:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    c068:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    c06c:	297fffc4 	addi	r5,r5,-1
    c070:	283ffe1e 	bne	r5,zero,c06c <__alt_data_end+0xf400c06c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    c074:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    c078:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    c07c:	18bffb16 	blt	r3,r2,c06c <__alt_data_end+0xf400c06c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c080:	01400144 	movi	r5,5
    c084:	8009883a 	mov	r4,r16
    c088:	00096640 	call	9664 <__mulsi3>
    c08c:	10bfffc4 	addi	r2,r2,-1
    c090:	103ffe1e 	bne	r2,zero,c08c <__alt_data_end+0xf400c08c>
    c094:	00000506 	br	c0ac <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c098:	01400144 	movi	r5,5
    c09c:	8009883a 	mov	r4,r16
    c0a0:	00096640 	call	9664 <__mulsi3>
    c0a4:	10bfffc4 	addi	r2,r2,-1
    c0a8:	00bffe16 	blt	zero,r2,c0a4 <__alt_data_end+0xf400c0a4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    c0ac:	0005883a 	mov	r2,zero
    c0b0:	dfc00117 	ldw	ra,4(sp)
    c0b4:	dc000017 	ldw	r16,0(sp)
    c0b8:	dec00204 	addi	sp,sp,8
    c0bc:	f800283a 	ret

0000c0c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c0c0:	f800283a 	ret

0000c0c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c0c4:	f800283a 	ret

0000c0c8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    c0c8:	000170fa 	wrctl	ienable,zero
    c0cc:	f800283a 	ret
